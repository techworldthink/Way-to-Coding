# -*- coding: utf-8 -*-
"""WeatherPrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15rkjxiSaF5g4VOHJ_LHfQETG4-K8kC-_

# Weather forecasting with Machine Learning
"""

from sklearn.model_selection import train_test_split
import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras

# Load the dataset
weather_df = pd.read_csv('weatherHistory.csv')

weather_df.head()

weather_df.info()

weather_df.keys()

weather_df['Summary'].unique()

#weather_df['Summary'].unique()
factorized_mapping = dict(enumerate(weather_df['Summary'].unique()))
weather_df['Summary'] = pd.factorize(weather_df['Summary'])[0]
print(factorized_mapping)

# Define features and labels
features = weather_df[['Temperature (C)','Humidity']]
labels = weather_df[['Summary']]

# Train Test Split
features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=0.3, random_state=0)

# Build a linear regression model using Keras
model = keras.Sequential([
    keras.layers.Dense(units=1, input_shape=(2,))  # Two input features, single output unit
])

# Compile the model
model.compile(optimizer='Adam', loss='mean_squared_error')  # Using Stochastic Gradient Descent (SGD) optimizer

# Train the model
model.fit(
    features_train,labels_train,
    epochs=6,
    validation_data=(features_test, labels_test)
    )

predictions = model.predict(features_test)
print(predictions)

rounded_predictions = [round(prediction[0]) for prediction in predictions]
original_predictions = [factorized_mapping[prediction] for prediction in rounded_predictions]
original_predictions

rmse = np.sqrt(((labels_test - predictions) ** 2).mean())
print("Root Mean Squared Error (RMSE):", rmse)

"""# Convert the Trained Model to Tensor Flow Lite"""

import tensorflow as tf

# Convert the model to the TensorFlow Lite format without quantization
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the model to disk
open("weather_model.tflite", "wb").write(tflite_model)

import os
basic_model_size = os.path.getsize("weather_model.tflite")
print("Model is %d bytes" % basic_model_size)

"""# Encode the Model in an Arduino Header File"""

!echo "const unsigned char model[] = {" > /content/model.h
!cat weather_model.tflite | xxd -i      >> /content/model.h
!echo "};"                              >> /content/model.h

import os
model_h_size = os.path.getsize("model.h")
print(f"Header file, model.h, is {model_h_size:,} bytes.")
print("\nOpen the side panel (refresh if needed). Double click model.h to download the file.")