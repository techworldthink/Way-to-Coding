
LDR_TO_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000390c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a74  08003a74  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003a74  08003a74  00013a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a7c  08003a7c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a7c  08003a7c  00013a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a80  08003a80  00013a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08003af4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003af4  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009873  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016d7  00000000  00000000  0002990b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0002afe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000738  00000000  00000000  0002b7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014905  00000000  00000000  0002bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8c3  00000000  00000000  000407f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007fd69  00000000  00000000  0004b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cae21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ee4  00000000  00000000  000cae74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039b4 	.word	0x080039b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080039b4 	.word	0x080039b4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
static void MX_GPIO_Init(void);
static void MX_ADC_Init(void);
static void MX_USART2_UART_Init(void);


int main(void){
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c2:	f000 fa73 	bl	80009ac <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80004c6:	f000 f83b 	bl	8000540 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ca:	f000 f93f 	bl	800074c <MX_GPIO_Init>
  MX_ADC_Init();
 80004ce:	f000 f8a9 	bl	8000624 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80004d2:	f000 f90b 	bl	80006ec <MX_USART2_UART_Init>

  HAL_ADC_Start(&hadc);
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <main+0x74>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fc6f 	bl	8000dbc <HAL_ADC_Start>

  while (1){
	  uint16_t readValue;
	  HAL_ADC_PollForConversion(&hadc, 1000);
 80004de:	23fa      	movs	r3, #250	; 0xfa
 80004e0:	009a      	lsls	r2, r3, #2
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <main+0x74>)
 80004e4:	0011      	movs	r1, r2
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 fcbc 	bl	8000e64 <HAL_ADC_PollForConversion>
	  readValue = HAL_ADC_GetValue(&hadc);
 80004ec:	4b10      	ldr	r3, [pc, #64]	; (8000530 <main+0x74>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f000 fd54 	bl	8000f9c <HAL_ADC_GetValue>
 80004f4:	0002      	movs	r2, r0
 80004f6:	1dbb      	adds	r3, r7, #6
 80004f8:	801a      	strh	r2, [r3, #0]
	  char buffer[5];
	  snprintf(buffer, sizeof(buffer), "%u", readValue);
 80004fa:	1dbb      	adds	r3, r7, #6
 80004fc:	881b      	ldrh	r3, [r3, #0]
 80004fe:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <main+0x78>)
 8000500:	0038      	movs	r0, r7
 8000502:	2105      	movs	r1, #5
 8000504:	f002 fdd8 	bl	80030b8 <sniprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, sizeof(buffer), HAL_MAX_DELAY);
 8000508:	2301      	movs	r3, #1
 800050a:	425b      	negs	r3, r3
 800050c:	0039      	movs	r1, r7
 800050e:	480a      	ldr	r0, [pc, #40]	; (8000538 <main+0x7c>)
 8000510:	2205      	movs	r2, #5
 8000512:	f002 f837 	bl	8002584 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, (uint8_t *)"\n", 1, HAL_MAX_DELAY);
 8000516:	2301      	movs	r3, #1
 8000518:	425b      	negs	r3, r3
 800051a:	4908      	ldr	r1, [pc, #32]	; (800053c <main+0x80>)
 800051c:	4806      	ldr	r0, [pc, #24]	; (8000538 <main+0x7c>)
 800051e:	2201      	movs	r2, #1
 8000520:	f002 f830 	bl	8002584 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000524:	23fa      	movs	r3, #250	; 0xfa
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	0018      	movs	r0, r3
 800052a:	f000 faaf 	bl	8000a8c <HAL_Delay>
  while (1){
 800052e:	e7d6      	b.n	80004de <main+0x22>
 8000530:	2000008c 	.word	0x2000008c
 8000534:	080039cc 	.word	0x080039cc
 8000538:	200000e8 	.word	0x200000e8
 800053c:	080039d0 	.word	0x080039d0

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b590      	push	{r4, r7, lr}
 8000542:	b09d      	sub	sp, #116	; 0x74
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	2438      	movs	r4, #56	; 0x38
 8000548:	193b      	adds	r3, r7, r4
 800054a:	0018      	movs	r0, r3
 800054c:	2338      	movs	r3, #56	; 0x38
 800054e:	001a      	movs	r2, r3
 8000550:	2100      	movs	r1, #0
 8000552:	f002 fda9 	bl	80030a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000556:	2324      	movs	r3, #36	; 0x24
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	0018      	movs	r0, r3
 800055c:	2314      	movs	r3, #20
 800055e:	001a      	movs	r2, r3
 8000560:	2100      	movs	r1, #0
 8000562:	f002 fda1 	bl	80030a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000566:	003b      	movs	r3, r7
 8000568:	0018      	movs	r0, r3
 800056a:	2324      	movs	r3, #36	; 0x24
 800056c:	001a      	movs	r2, r3
 800056e:	2100      	movs	r1, #0
 8000570:	f002 fd9a 	bl	80030a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <SystemClock_Config+0xdc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a29      	ldr	r2, [pc, #164]	; (8000620 <SystemClock_Config+0xe0>)
 800057a:	401a      	ands	r2, r3
 800057c:	4b27      	ldr	r3, [pc, #156]	; (800061c <SystemClock_Config+0xdc>)
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	0109      	lsls	r1, r1, #4
 8000582:	430a      	orrs	r2, r1
 8000584:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000586:	0021      	movs	r1, r4
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2202      	movs	r2, #2
 800058c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2201      	movs	r2, #1
 8000592:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2210      	movs	r2, #16
 8000598:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2202      	movs	r2, #2
 800059e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2280      	movs	r2, #128	; 0x80
 80005aa:	0312      	lsls	r2, r2, #12
 80005ac:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2280      	movs	r2, #128	; 0x80
 80005b2:	0412      	lsls	r2, r2, #16
 80005b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	0018      	movs	r0, r3
 80005ba:	f001 f83b 	bl	8001634 <HAL_RCC_OscConfig>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005c2:	f000 f8d9 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	2124      	movs	r1, #36	; 0x24
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	220f      	movs	r2, #15
 80005cc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2203      	movs	r2, #3
 80005d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2200      	movs	r2, #0
 80005de:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	2200      	movs	r2, #0
 80005e4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2101      	movs	r1, #1
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fbf6 	bl	8001ddc <HAL_RCC_ClockConfig>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005f4:	f000 f8c0 	bl	8000778 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005f8:	003b      	movs	r3, r7
 80005fa:	2202      	movs	r2, #2
 80005fc:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005fe:	003b      	movs	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000604:	003b      	movs	r3, r7
 8000606:	0018      	movs	r0, r3
 8000608:	f001 fe0c 	bl	8002224 <HAL_RCCEx_PeriphCLKConfig>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000610:	f000 f8b2 	bl	8000778 <Error_Handler>
  }
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	b01d      	add	sp, #116	; 0x74
 800061a:	bd90      	pop	{r4, r7, pc}
 800061c:	40007000 	.word	0x40007000
 8000620:	ffffe7ff 	.word	0xffffe7ff

08000624 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	003b      	movs	r3, r7
 800062c:	0018      	movs	r0, r3
 800062e:	2308      	movs	r3, #8
 8000630:	001a      	movs	r2, r3
 8000632:	2100      	movs	r1, #0
 8000634:	f002 fd38 	bl	80030a8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <MX_ADC_Init+0xc0>)
 800063a:	4a2b      	ldr	r2, [pc, #172]	; (80006e8 <MX_ADC_Init+0xc4>)
 800063c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <MX_ADC_Init+0xc0>)
 8000640:	2200      	movs	r2, #0
 8000642:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <MX_ADC_Init+0xc0>)
 8000646:	2280      	movs	r2, #128	; 0x80
 8000648:	05d2      	lsls	r2, r2, #23
 800064a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800064c:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <MX_ADC_Init+0xc0>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000652:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <MX_ADC_Init+0xc0>)
 8000654:	2200      	movs	r2, #0
 8000656:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_ADC_Init+0xc0>)
 800065a:	2201      	movs	r2, #1
 800065c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065e:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <MX_ADC_Init+0xc0>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_ADC_Init+0xc0>)
 8000666:	2220      	movs	r2, #32
 8000668:	2101      	movs	r1, #1
 800066a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800066c:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <MX_ADC_Init+0xc0>)
 800066e:	2221      	movs	r2, #33	; 0x21
 8000670:	2100      	movs	r1, #0
 8000672:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_ADC_Init+0xc0>)
 8000676:	2200      	movs	r2, #0
 8000678:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_ADC_Init+0xc0>)
 800067c:	22c2      	movs	r2, #194	; 0xc2
 800067e:	32ff      	adds	r2, #255	; 0xff
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_ADC_Init+0xc0>)
 8000684:	222c      	movs	r2, #44	; 0x2c
 8000686:	2100      	movs	r1, #0
 8000688:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800068a:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <MX_ADC_Init+0xc0>)
 800068c:	2204      	movs	r2, #4
 800068e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <MX_ADC_Init+0xc0>)
 8000692:	2200      	movs	r2, #0
 8000694:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_ADC_Init+0xc0>)
 8000698:	2200      	movs	r2, #0
 800069a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800069c:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <MX_ADC_Init+0xc0>)
 800069e:	2200      	movs	r2, #0
 80006a0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_ADC_Init+0xc0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80006a8:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <MX_ADC_Init+0xc0>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fa12 	bl	8000ad4 <HAL_ADC_Init>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80006b4:	f000 f860 	bl	8000778 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006b8:	003b      	movs	r3, r7
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006be:	003b      	movs	r3, r7
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	0152      	lsls	r2, r2, #5
 80006c4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006c6:	003a      	movs	r2, r7
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <MX_ADC_Init+0xc0>)
 80006ca:	0011      	movs	r1, r2
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 fc71 	bl	8000fb4 <HAL_ADC_ConfigChannel>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80006d6:	f000 f84f 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b002      	add	sp, #8
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	2000008c 	.word	0x2000008c
 80006e8:	40012400 	.word	0x40012400

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART2_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART2_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART2_UART_Init+0x58>)
 80006f8:	22e1      	movs	r2, #225	; 0xe1
 80006fa:	0252      	lsls	r2, r2, #9
 80006fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <MX_USART2_UART_Init+0x58>)
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fed3 	bl	80024dc <HAL_UART_Init>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f81d 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000e8 	.word	0x200000e8
 8000748:	40004400 	.word	0x40004400

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_GPIO_Init+0x28>)
 8000754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000756:	4b07      	ldr	r3, [pc, #28]	; (8000774 <MX_GPIO_Init+0x28>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <MX_GPIO_Init+0x28>)
 8000760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	40021000 	.word	0x40021000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <Error_Handler+0x8>
	...

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000788:	4b07      	ldr	r3, [pc, #28]	; (80007a8 <HAL_MspInit+0x24>)
 800078a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_MspInit+0x24>)
 800078e:	2101      	movs	r1, #1
 8000790:	430a      	orrs	r2, r1
 8000792:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <HAL_MspInit+0x24>)
 8000796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_MspInit+0x24>)
 800079a:	2180      	movs	r1, #128	; 0x80
 800079c:	0549      	lsls	r1, r1, #21
 800079e:	430a      	orrs	r2, r1
 80007a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b089      	sub	sp, #36	; 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	240c      	movs	r4, #12
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	0018      	movs	r0, r3
 80007ba:	2314      	movs	r3, #20
 80007bc:	001a      	movs	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f002 fc72 	bl	80030a8 <memset>
  if(hadc->Instance==ADC1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a14      	ldr	r2, [pc, #80]	; (800081c <HAL_ADC_MspInit+0x70>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d122      	bne.n	8000814 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ce:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_ADC_MspInit+0x74>)
 80007d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <HAL_ADC_MspInit+0x74>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	0089      	lsls	r1, r1, #2
 80007d8:	430a      	orrs	r2, r1
 80007da:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_ADC_MspInit+0x74>)
 80007de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_ADC_MspInit+0x74>)
 80007e2:	2101      	movs	r1, #1
 80007e4:	430a      	orrs	r2, r1
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80007e8:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_ADC_MspInit+0x74>)
 80007ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ec:	2201      	movs	r2, #1
 80007ee:	4013      	ands	r3, r2
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2203      	movs	r2, #3
 80007fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	193b      	adds	r3, r7, r4
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000806:	193a      	adds	r2, r7, r4
 8000808:	23a0      	movs	r3, #160	; 0xa0
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	0011      	movs	r1, r2
 800080e:	0018      	movs	r0, r3
 8000810:	f000 fd92 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	b009      	add	sp, #36	; 0x24
 800081a:	bd90      	pop	{r4, r7, pc}
 800081c:	40012400 	.word	0x40012400
 8000820:	40021000 	.word	0x40021000

08000824 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	240c      	movs	r4, #12
 800082e:	193b      	adds	r3, r7, r4
 8000830:	0018      	movs	r0, r3
 8000832:	2314      	movs	r3, #20
 8000834:	001a      	movs	r2, r3
 8000836:	2100      	movs	r1, #0
 8000838:	f002 fc36 	bl	80030a8 <memset>
  if(huart->Instance==USART2)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <HAL_UART_MspInit+0x80>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d129      	bne.n	800089a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000846:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <HAL_UART_MspInit+0x84>)
 8000848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <HAL_UART_MspInit+0x84>)
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	0289      	lsls	r1, r1, #10
 8000850:	430a      	orrs	r2, r1
 8000852:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_UART_MspInit+0x84>)
 8000856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000858:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <HAL_UART_MspInit+0x84>)
 800085a:	2101      	movs	r1, #1
 800085c:	430a      	orrs	r2, r1
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000860:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_UART_MspInit+0x84>)
 8000862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000864:	2201      	movs	r2, #1
 8000866:	4013      	ands	r3, r2
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2;
 800086c:	0021      	movs	r1, r4
 800086e:	187b      	adds	r3, r7, r1
 8000870:	4a0e      	ldr	r2, [pc, #56]	; (80008ac <HAL_UART_MspInit+0x88>)
 8000872:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2202      	movs	r2, #2
 8000878:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000880:	187b      	adds	r3, r7, r1
 8000882:	2203      	movs	r2, #3
 8000884:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2204      	movs	r2, #4
 800088a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088c:	187a      	adds	r2, r7, r1
 800088e:	23a0      	movs	r3, #160	; 0xa0
 8000890:	05db      	lsls	r3, r3, #23
 8000892:	0011      	movs	r1, r2
 8000894:	0018      	movs	r0, r3
 8000896:	f000 fd4f 	bl	8001338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b009      	add	sp, #36	; 0x24
 80008a0:	bd90      	pop	{r4, r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40021000 	.word	0x40021000
 80008ac:	00008004 	.word	0x00008004

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008c0:	46c0      	nop			; (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f8be 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <_sbrk+0x5c>)
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <_sbrk+0x60>)
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <_sbrk+0x64>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d102      	bne.n	8000902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <_sbrk+0x64>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <_sbrk+0x68>)
 8000900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <_sbrk+0x64>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	429a      	cmp	r2, r3
 800090e:	d207      	bcs.n	8000920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000910:	f002 fba0 	bl	8003054 <__errno>
 8000914:	0003      	movs	r3, r0
 8000916:	220c      	movs	r2, #12
 8000918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800091a:	2301      	movs	r3, #1
 800091c:	425b      	negs	r3, r3
 800091e:	e009      	b.n	8000934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <_sbrk+0x64>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000926:	4b07      	ldr	r3, [pc, #28]	; (8000944 <_sbrk+0x64>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	18d2      	adds	r2, r2, r3
 800092e:	4b05      	ldr	r3, [pc, #20]	; (8000944 <_sbrk+0x64>)
 8000930:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000932:	68fb      	ldr	r3, [r7, #12]
}
 8000934:	0018      	movs	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	b006      	add	sp, #24
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20005000 	.word	0x20005000
 8000940:	00000400 	.word	0x00000400
 8000944:	20000170 	.word	0x20000170
 8000948:	20000188 	.word	0x20000188

0800094c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	46c0      	nop			; (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000958:	480d      	ldr	r0, [pc, #52]	; (8000990 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800095a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800095c:	f7ff fff6 	bl	800094c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	; (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	; (800099c <LoopForever+0xe>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	; (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	; (80009a4 <LoopForever+0x16>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f002 fb6b 	bl	8003060 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff fd97 	bl	80004bc <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
   ldr   r0, =_estack
 8000990:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800099c:	08003a84 	.word	0x08003a84
  ldr r2, =_sbss
 80009a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009a4:	20000188 	.word	0x20000188

080009a8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_COMP_IRQHandler>
	...

080009ac <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b2:	1dfb      	adds	r3, r7, #7
 80009b4:	2200      	movs	r2, #0
 80009b6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_Init+0x3c>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <HAL_Init+0x3c>)
 80009be:	2140      	movs	r1, #64	; 0x40
 80009c0:	430a      	orrs	r2, r1
 80009c2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 f811 	bl	80009ec <HAL_InitTick>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d003      	beq.n	80009d6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e001      	b.n	80009da <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009d6:	f7ff fed5 	bl	8000784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
}
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40022000 	.word	0x40022000

080009ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <HAL_InitTick+0x5c>)
 80009f6:	681c      	ldr	r4, [r3, #0]
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_InitTick+0x60>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	0019      	movs	r1, r3
 80009fe:	23fa      	movs	r3, #250	; 0xfa
 8000a00:	0098      	lsls	r0, r3, #2
 8000a02:	f7ff fb8b 	bl	800011c <__udivsi3>
 8000a06:	0003      	movs	r3, r0
 8000a08:	0019      	movs	r1, r3
 8000a0a:	0020      	movs	r0, r4
 8000a0c:	f7ff fb86 	bl	800011c <__udivsi3>
 8000a10:	0003      	movs	r3, r0
 8000a12:	0018      	movs	r0, r3
 8000a14:	f000 fc83 	bl	800131e <HAL_SYSTICK_Config>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e00f      	b.n	8000a40 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2b03      	cmp	r3, #3
 8000a24:	d80b      	bhi.n	8000a3e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	2301      	movs	r3, #1
 8000a2a:	425b      	negs	r3, r3
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f000 fc60 	bl	80012f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_InitTick+0x64>)
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b003      	add	sp, #12
 8000a46:	bd90      	pop	{r4, r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <HAL_IncTick+0x1c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <HAL_IncTick+0x20>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	18d2      	adds	r2, r2, r3
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_IncTick+0x20>)
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000174 	.word	0x20000174

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b02      	ldr	r3, [pc, #8]	; (8000a88 <HAL_GetTick+0x10>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	20000174 	.word	0x20000174

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff fff0 	bl	8000a78 <HAL_GetTick>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	d005      	beq.n	8000ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <HAL_Delay+0x44>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	001a      	movs	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	189b      	adds	r3, r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	f7ff ffe0 	bl	8000a78 <HAL_GetTick>
 8000ab8:	0002      	movs	r2, r0
 8000aba:	68bb      	ldr	r3, [r7, #8]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d8f7      	bhi.n	8000ab4 <HAL_Delay+0x28>
  {
  }
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	b004      	add	sp, #16
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	20000008 	.word	0x20000008

08000ad4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e159      	b.n	8000d9a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d10a      	bne.n	8000b04 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2200      	movs	r2, #0
 8000af2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2250      	movs	r2, #80	; 0x50
 8000af8:	2100      	movs	r1, #0
 8000afa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	0018      	movs	r0, r3
 8000b00:	f7ff fe54 	bl	80007ac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b08:	2210      	movs	r2, #16
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	2b10      	cmp	r3, #16
 8000b0e:	d005      	beq.n	8000b1c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	2204      	movs	r2, #4
 8000b18:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000b1a:	d00b      	beq.n	8000b34 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b20:	2210      	movs	r2, #16
 8000b22:	431a      	orrs	r2, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2250      	movs	r2, #80	; 0x50
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000b30:	2301      	movs	r3, #1
 8000b32:	e132      	b.n	8000d9a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b38:	4a9a      	ldr	r2, [pc, #616]	; (8000da4 <HAL_ADC_Init+0x2d0>)
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d108      	bne.n	8000b64 <HAL_ADC_Init+0x90>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2201      	movs	r2, #1
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d101      	bne.n	8000b64 <HAL_ADC_Init+0x90>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <HAL_ADC_Init+0x92>
 8000b64:	2300      	movs	r3, #0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d149      	bne.n	8000bfe <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	685a      	ldr	r2, [r3, #4]
 8000b6e:	23c0      	movs	r3, #192	; 0xc0
 8000b70:	061b      	lsls	r3, r3, #24
 8000b72:	429a      	cmp	r2, r3
 8000b74:	d00b      	beq.n	8000b8e <HAL_ADC_Init+0xba>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	2380      	movs	r3, #128	; 0x80
 8000b7c:	05db      	lsls	r3, r3, #23
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d005      	beq.n	8000b8e <HAL_ADC_Init+0xba>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	685a      	ldr	r2, [r3, #4]
 8000b86:	2380      	movs	r3, #128	; 0x80
 8000b88:	061b      	lsls	r3, r3, #24
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d111      	bne.n	8000bb2 <HAL_ADC_Init+0xde>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	691a      	ldr	r2, [r3, #16]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	0092      	lsls	r2, r2, #2
 8000b9a:	0892      	lsrs	r2, r2, #2
 8000b9c:	611a      	str	r2, [r3, #16]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	6919      	ldr	r1, [r3, #16]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685a      	ldr	r2, [r3, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	430a      	orrs	r2, r1
 8000bae:	611a      	str	r2, [r3, #16]
 8000bb0:	e014      	b.n	8000bdc <HAL_ADC_Init+0x108>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	0892      	lsrs	r2, r2, #2
 8000bc0:	611a      	str	r2, [r3, #16]
 8000bc2:	4b79      	ldr	r3, [pc, #484]	; (8000da8 <HAL_ADC_Init+0x2d4>)
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	4b78      	ldr	r3, [pc, #480]	; (8000da8 <HAL_ADC_Init+0x2d4>)
 8000bc8:	4978      	ldr	r1, [pc, #480]	; (8000dac <HAL_ADC_Init+0x2d8>)
 8000bca:	400a      	ands	r2, r1
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	4b76      	ldr	r3, [pc, #472]	; (8000da8 <HAL_ADC_Init+0x2d4>)
 8000bd0:	6819      	ldr	r1, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	4b74      	ldr	r3, [pc, #464]	; (8000da8 <HAL_ADC_Init+0x2d4>)
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2118      	movs	r1, #24
 8000be8:	438a      	bics	r2, r1
 8000bea:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68d9      	ldr	r1, [r3, #12]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689a      	ldr	r2, [r3, #8]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000bfe:	4b6a      	ldr	r3, [pc, #424]	; (8000da8 <HAL_ADC_Init+0x2d4>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	4b69      	ldr	r3, [pc, #420]	; (8000da8 <HAL_ADC_Init+0x2d4>)
 8000c04:	496a      	ldr	r1, [pc, #424]	; (8000db0 <HAL_ADC_Init+0x2dc>)
 8000c06:	400a      	ands	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8000c0a:	4b67      	ldr	r3, [pc, #412]	; (8000da8 <HAL_ADC_Init+0x2d4>)
 8000c0c:	6819      	ldr	r1, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c12:	065a      	lsls	r2, r3, #25
 8000c14:	4b64      	ldr	r3, [pc, #400]	; (8000da8 <HAL_ADC_Init+0x2d4>)
 8000c16:	430a      	orrs	r2, r1
 8000c18:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	055b      	lsls	r3, r3, #21
 8000c24:	4013      	ands	r3, r2
 8000c26:	d108      	bne.n	8000c3a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	0549      	lsls	r1, r1, #21
 8000c36:	430a      	orrs	r2, r1
 8000c38:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	495b      	ldr	r1, [pc, #364]	; (8000db4 <HAL_ADC_Init+0x2e0>)
 8000c46:	400a      	ands	r2, r1
 8000c48:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68d9      	ldr	r1, [r3, #12]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	2b02      	cmp	r3, #2
 8000c5a:	d101      	bne.n	8000c60 <HAL_ADC_Init+0x18c>
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	e000      	b.n	8000c62 <HAL_ADC_Init+0x18e>
 8000c60:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c62:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2020      	movs	r0, #32
 8000c68:	5c1b      	ldrb	r3, [r3, r0]
 8000c6a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c6c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	202c      	movs	r0, #44	; 0x2c
 8000c72:	5c1b      	ldrb	r3, [r3, r0]
 8000c74:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000c76:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000c7c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000c84:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000c8c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c9a:	23c2      	movs	r3, #194	; 0xc2
 8000c9c:	33ff      	adds	r3, #255	; 0xff
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d00b      	beq.n	8000cba <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	68d9      	ldr	r1, [r3, #12]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2221      	movs	r2, #33	; 0x21
 8000cbe:	5c9b      	ldrb	r3, [r3, r2]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d11a      	bne.n	8000cfa <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	5c9b      	ldrb	r3, [r3, r2]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d109      	bne.n	8000ce2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	0249      	lsls	r1, r1, #9
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	e00b      	b.n	8000cfa <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	431a      	orrs	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d11f      	bne.n	8000d42 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	691a      	ldr	r2, [r3, #16]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	492a      	ldr	r1, [pc, #168]	; (8000db8 <HAL_ADC_Init+0x2e4>)
 8000d0e:	400a      	ands	r2, r1
 8000d10:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	6919      	ldr	r1, [r3, #16]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000d20:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8000d26:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	691a      	ldr	r2, [r3, #16]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	430a      	orrs	r2, r1
 8000d3e:	611a      	str	r2, [r3, #16]
 8000d40:	e00e      	b.n	8000d60 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	2201      	movs	r2, #1
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d107      	bne.n	8000d60 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	691a      	ldr	r2, [r3, #16]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	438a      	bics	r2, r1
 8000d5e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	695a      	ldr	r2, [r3, #20]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2107      	movs	r1, #7
 8000d6c:	438a      	bics	r2, r1
 8000d6e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6959      	ldr	r1, [r3, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	430a      	orrs	r2, r1
 8000d80:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	4393      	bics	r3, r2
 8000d90:	2201      	movs	r2, #1
 8000d92:	431a      	orrs	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b002      	add	sp, #8
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	fffffefd 	.word	0xfffffefd
 8000da8:	40012708 	.word	0x40012708
 8000dac:	ffc3ffff 	.word	0xffc3ffff
 8000db0:	fdffffff 	.word	0xfdffffff
 8000db4:	fffe0219 	.word	0xfffe0219
 8000db8:	fffffc03 	.word	0xfffffc03

08000dbc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d138      	bne.n	8000e4a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2250      	movs	r2, #80	; 0x50
 8000ddc:	5c9b      	ldrb	r3, [r3, r2]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d101      	bne.n	8000de6 <HAL_ADC_Start+0x2a>
 8000de2:	2302      	movs	r3, #2
 8000de4:	e038      	b.n	8000e58 <HAL_ADC_Start+0x9c>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2250      	movs	r2, #80	; 0x50
 8000dea:	2101      	movs	r1, #1
 8000dec:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d007      	beq.n	8000e06 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000df6:	230f      	movs	r3, #15
 8000df8:	18fc      	adds	r4, r7, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f000 f95f 	bl	80010c0 <ADC_Enable>
 8000e02:	0003      	movs	r3, r0
 8000e04:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e06:	230f      	movs	r3, #15
 8000e08:	18fb      	adds	r3, r7, r3
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d120      	bne.n	8000e52 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e14:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <HAL_ADC_Start+0xa4>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	2280      	movs	r2, #128	; 0x80
 8000e1a:	0052      	lsls	r2, r2, #1
 8000e1c:	431a      	orrs	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2200      	movs	r2, #0
 8000e26:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2250      	movs	r2, #80	; 0x50
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	221c      	movs	r2, #28
 8000e36:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2104      	movs	r1, #4
 8000e44:	430a      	orrs	r2, r1
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	e003      	b.n	8000e52 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	18fb      	adds	r3, r7, r3
 8000e4e:	2202      	movs	r2, #2
 8000e50:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e52:	230f      	movs	r3, #15
 8000e54:	18fb      	adds	r3, r7, r3
 8000e56:	781b      	ldrb	r3, [r3, #0]
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b005      	add	sp, #20
 8000e5e:	bd90      	pop	{r4, r7, pc}
 8000e60:	fffff0fe 	.word	0xfffff0fe

08000e64 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d102      	bne.n	8000e84 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000e7e:	2308      	movs	r3, #8
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	e014      	b.n	8000eae <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d10b      	bne.n	8000eaa <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e96:	2220      	movs	r2, #32
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2250      	movs	r2, #80	; 0x50
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e072      	b.n	8000f90 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000eaa:	230c      	movs	r3, #12
 8000eac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8000eae:	f7ff fde3 	bl	8000a78 <HAL_GetTick>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000eb6:	e01f      	b.n	8000ef8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	d01c      	beq.n	8000ef8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d007      	beq.n	8000ed4 <HAL_ADC_PollForConversion+0x70>
 8000ec4:	f7ff fdd8 	bl	8000a78 <HAL_GetTick>
 8000ec8:	0002      	movs	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d211      	bcs.n	8000ef8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	68fa      	ldr	r2, [r7, #12]
 8000edc:	4013      	ands	r3, r2
 8000ede:	d10b      	bne.n	8000ef8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2250      	movs	r2, #80	; 0x50
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e04b      	b.n	8000f90 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	4013      	ands	r3, r2
 8000f02:	d0d9      	beq.n	8000eb8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f08:	2280      	movs	r2, #128	; 0x80
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	23c0      	movs	r3, #192	; 0xc0
 8000f1a:	011b      	lsls	r3, r3, #4
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	d12e      	bne.n	8000f7e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2220      	movs	r2, #32
 8000f24:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d129      	bne.n	8000f7e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2208      	movs	r2, #8
 8000f32:	4013      	ands	r3, r2
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d122      	bne.n	8000f7e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4013      	ands	r3, r2
 8000f42:	d110      	bne.n	8000f66 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	210c      	movs	r1, #12
 8000f50:	438a      	bics	r2, r1
 8000f52:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f58:	4a0f      	ldr	r2, [pc, #60]	; (8000f98 <HAL_ADC_PollForConversion+0x134>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	431a      	orrs	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	655a      	str	r2, [r3, #84]	; 0x54
 8000f64:	e00b      	b.n	8000f7e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f76:	2201      	movs	r2, #1
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d103      	bne.n	8000f8e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
}
 8000f90:	0018      	movs	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b004      	add	sp, #16
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	fffffefe 	.word	0xfffffefe

08000f9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000faa:	0018      	movs	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b002      	add	sp, #8
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2250      	movs	r2, #80	; 0x50
 8000fc2:	5c9b      	ldrb	r3, [r3, r2]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_ADC_ConfigChannel+0x18>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e06c      	b.n	80010a6 <HAL_ADC_ConfigChannel+0xf2>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2250      	movs	r2, #80	; 0x50
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2204      	movs	r2, #4
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d00b      	beq.n	8000ff8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2250      	movs	r2, #80	; 0x50
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e056      	b.n	80010a6 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	4a2c      	ldr	r2, [pc, #176]	; (80010b0 <HAL_ADC_ConfigChannel+0xfc>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d028      	beq.n	8001054 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	035b      	lsls	r3, r3, #13
 800100e:	0b5a      	lsrs	r2, r3, #13
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	02db      	lsls	r3, r3, #11
 8001020:	4013      	ands	r3, r2
 8001022:	d009      	beq.n	8001038 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <HAL_ADC_ConfigChannel+0x100>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_ADC_ConfigChannel+0x100>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	0409      	lsls	r1, r1, #16
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001032:	200a      	movs	r0, #10
 8001034:	f000 f8ac 	bl	8001190 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2380      	movs	r3, #128	; 0x80
 800103e:	029b      	lsls	r3, r3, #10
 8001040:	4013      	ands	r3, r2
 8001042:	d02b      	beq.n	800109c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <HAL_ADC_ConfigChannel+0x100>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <HAL_ADC_ConfigChannel+0x100>)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	03c9      	lsls	r1, r1, #15
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e023      	b.n	800109c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	035b      	lsls	r3, r3, #13
 8001060:	0b5b      	lsrs	r3, r3, #13
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	400a      	ands	r2, r1
 800106a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	02db      	lsls	r3, r3, #11
 8001074:	4013      	ands	r3, r2
 8001076:	d005      	beq.n	8001084 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_ADC_ConfigChannel+0x100>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_ADC_ConfigChannel+0x100>)
 800107e:	490e      	ldr	r1, [pc, #56]	; (80010b8 <HAL_ADC_ConfigChannel+0x104>)
 8001080:	400a      	ands	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	029b      	lsls	r3, r3, #10
 800108c:	4013      	ands	r3, r2
 800108e:	d005      	beq.n	800109c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_ADC_ConfigChannel+0x100>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <HAL_ADC_ConfigChannel+0x100>)
 8001096:	4909      	ldr	r1, [pc, #36]	; (80010bc <HAL_ADC_ConfigChannel+0x108>)
 8001098:	400a      	ands	r2, r1
 800109a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2250      	movs	r2, #80	; 0x50
 80010a0:	2100      	movs	r1, #0
 80010a2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	00001001 	.word	0x00001001
 80010b4:	40012708 	.word	0x40012708
 80010b8:	ff7fffff 	.word	0xff7fffff
 80010bc:	ffbfffff 	.word	0xffbfffff

080010c0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2203      	movs	r2, #3
 80010d4:	4013      	ands	r3, r2
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d108      	bne.n	80010ec <ADC_Enable+0x2c>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2201      	movs	r2, #1
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d101      	bne.n	80010ec <ADC_Enable+0x2c>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <ADC_Enable+0x2e>
 80010ec:	2300      	movs	r3, #0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d146      	bne.n	8001180 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4a24      	ldr	r2, [pc, #144]	; (800118c <ADC_Enable+0xcc>)
 80010fa:	4013      	ands	r3, r2
 80010fc:	d00d      	beq.n	800111a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001102:	2210      	movs	r2, #16
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	2201      	movs	r2, #1
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e033      	b.n	8001182 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	430a      	orrs	r2, r1
 8001128:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800112a:	2001      	movs	r0, #1
 800112c:	f000 f830 	bl	8001190 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001130:	f7ff fca2 	bl	8000a78 <HAL_GetTick>
 8001134:	0003      	movs	r3, r0
 8001136:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001138:	e01b      	b.n	8001172 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800113a:	f7ff fc9d 	bl	8000a78 <HAL_GetTick>
 800113e:	0002      	movs	r2, r0
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b0a      	cmp	r3, #10
 8001146:	d914      	bls.n	8001172 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2201      	movs	r2, #1
 8001150:	4013      	ands	r3, r2
 8001152:	2b01      	cmp	r3, #1
 8001154:	d00d      	beq.n	8001172 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800115a:	2210      	movs	r2, #16
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	2201      	movs	r2, #1
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e007      	b.n	8001182 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2201      	movs	r2, #1
 800117a:	4013      	ands	r3, r2
 800117c:	2b01      	cmp	r3, #1
 800117e:	d1dc      	bne.n	800113a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	0018      	movs	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	b004      	add	sp, #16
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	80000017 	.word	0x80000017

08001190 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <ADC_DelayMicroSecond+0x38>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	490b      	ldr	r1, [pc, #44]	; (80011cc <ADC_DelayMicroSecond+0x3c>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f7fe ffbc 	bl	800011c <__udivsi3>
 80011a4:	0003      	movs	r3, r0
 80011a6:	001a      	movs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4353      	muls	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80011ae:	e002      	b.n	80011b6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f9      	bne.n	80011b0 <ADC_DelayMicroSecond+0x20>
  }
}
 80011bc:	46c0      	nop			; (mov r8, r8)
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b004      	add	sp, #16
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	20000000 	.word	0x20000000
 80011cc:	000f4240 	.word	0x000f4240

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	0002      	movs	r2, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b7f      	cmp	r3, #127	; 0x7f
 80011e4:	d828      	bhi.n	8001238 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011e6:	4a2f      	ldr	r2, [pc, #188]	; (80012a4 <__NVIC_SetPriority+0xd4>)
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	33c0      	adds	r3, #192	; 0xc0
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	589b      	ldr	r3, [r3, r2]
 80011f6:	1dfa      	adds	r2, r7, #7
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	0011      	movs	r1, r2
 80011fc:	2203      	movs	r2, #3
 80011fe:	400a      	ands	r2, r1
 8001200:	00d2      	lsls	r2, r2, #3
 8001202:	21ff      	movs	r1, #255	; 0xff
 8001204:	4091      	lsls	r1, r2
 8001206:	000a      	movs	r2, r1
 8001208:	43d2      	mvns	r2, r2
 800120a:	401a      	ands	r2, r3
 800120c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	019b      	lsls	r3, r3, #6
 8001212:	22ff      	movs	r2, #255	; 0xff
 8001214:	401a      	ands	r2, r3
 8001216:	1dfb      	adds	r3, r7, #7
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	0018      	movs	r0, r3
 800121c:	2303      	movs	r3, #3
 800121e:	4003      	ands	r3, r0
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001224:	481f      	ldr	r0, [pc, #124]	; (80012a4 <__NVIC_SetPriority+0xd4>)
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b25b      	sxtb	r3, r3
 800122c:	089b      	lsrs	r3, r3, #2
 800122e:	430a      	orrs	r2, r1
 8001230:	33c0      	adds	r3, #192	; 0xc0
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001236:	e031      	b.n	800129c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001238:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <__NVIC_SetPriority+0xd8>)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	0019      	movs	r1, r3
 8001240:	230f      	movs	r3, #15
 8001242:	400b      	ands	r3, r1
 8001244:	3b08      	subs	r3, #8
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	3306      	adds	r3, #6
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	18d3      	adds	r3, r2, r3
 800124e:	3304      	adds	r3, #4
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1dfa      	adds	r2, r7, #7
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	0011      	movs	r1, r2
 8001258:	2203      	movs	r2, #3
 800125a:	400a      	ands	r2, r1
 800125c:	00d2      	lsls	r2, r2, #3
 800125e:	21ff      	movs	r1, #255	; 0xff
 8001260:	4091      	lsls	r1, r2
 8001262:	000a      	movs	r2, r1
 8001264:	43d2      	mvns	r2, r2
 8001266:	401a      	ands	r2, r3
 8001268:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	019b      	lsls	r3, r3, #6
 800126e:	22ff      	movs	r2, #255	; 0xff
 8001270:	401a      	ands	r2, r3
 8001272:	1dfb      	adds	r3, r7, #7
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	0018      	movs	r0, r3
 8001278:	2303      	movs	r3, #3
 800127a:	4003      	ands	r3, r0
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001280:	4809      	ldr	r0, [pc, #36]	; (80012a8 <__NVIC_SetPriority+0xd8>)
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	001c      	movs	r4, r3
 8001288:	230f      	movs	r3, #15
 800128a:	4023      	ands	r3, r4
 800128c:	3b08      	subs	r3, #8
 800128e:	089b      	lsrs	r3, r3, #2
 8001290:	430a      	orrs	r2, r1
 8001292:	3306      	adds	r3, #6
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	18c3      	adds	r3, r0, r3
 8001298:	3304      	adds	r3, #4
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	46c0      	nop			; (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	b003      	add	sp, #12
 80012a2:	bd90      	pop	{r4, r7, pc}
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	045b      	lsls	r3, r3, #17
 80012bc:	429a      	cmp	r2, r3
 80012be:	d301      	bcc.n	80012c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c0:	2301      	movs	r3, #1
 80012c2:	e010      	b.n	80012e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c4:	4b0a      	ldr	r3, [pc, #40]	; (80012f0 <SysTick_Config+0x44>)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	3a01      	subs	r2, #1
 80012ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012cc:	2301      	movs	r3, #1
 80012ce:	425b      	negs	r3, r3
 80012d0:	2103      	movs	r1, #3
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7ff ff7c 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SysTick_Config+0x44>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <SysTick_Config+0x44>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	0018      	movs	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	210f      	movs	r1, #15
 8001300:	187b      	adds	r3, r7, r1
 8001302:	1c02      	adds	r2, r0, #0
 8001304:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	187b      	adds	r3, r7, r1
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff ff5d 	bl	80011d0 <__NVIC_SetPriority>
}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	46bd      	mov	sp, r7
 800131a:	b004      	add	sp, #16
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	0018      	movs	r0, r3
 800132a:	f7ff ffbf 	bl	80012ac <SysTick_Config>
 800132e:	0003      	movs	r3, r0
}
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b002      	add	sp, #8
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800134e:	e155      	b.n	80015fc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4091      	lsls	r1, r2
 800135a:	000a      	movs	r2, r1
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d100      	bne.n	8001368 <HAL_GPIO_Init+0x30>
 8001366:	e146      	b.n	80015f6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2203      	movs	r2, #3
 800136e:	4013      	ands	r3, r2
 8001370:	2b01      	cmp	r3, #1
 8001372:	d005      	beq.n	8001380 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2203      	movs	r2, #3
 800137a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800137c:	2b02      	cmp	r3, #2
 800137e:	d130      	bne.n	80013e2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	409a      	lsls	r2, r3
 800138e:	0013      	movs	r3, r2
 8001390:	43da      	mvns	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4013      	ands	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	68da      	ldr	r2, [r3, #12]
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	409a      	lsls	r2, r3
 80013a2:	0013      	movs	r3, r2
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013b6:	2201      	movs	r2, #1
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
 80013bc:	0013      	movs	r3, r2
 80013be:	43da      	mvns	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	4013      	ands	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	2201      	movs	r2, #1
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
 80013d4:	0013      	movs	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d017      	beq.n	800141e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	2203      	movs	r2, #3
 80013fa:	409a      	lsls	r2, r3
 80013fc:	0013      	movs	r3, r2
 80013fe:	43da      	mvns	r2, r3
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	409a      	lsls	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2203      	movs	r2, #3
 8001424:	4013      	ands	r3, r2
 8001426:	2b02      	cmp	r3, #2
 8001428:	d123      	bne.n	8001472 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	0092      	lsls	r2, r2, #2
 8001434:	58d3      	ldr	r3, [r2, r3]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2207      	movs	r2, #7
 800143c:	4013      	ands	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	220f      	movs	r2, #15
 8001442:	409a      	lsls	r2, r3
 8001444:	0013      	movs	r3, r2
 8001446:	43da      	mvns	r2, r3
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	691a      	ldr	r2, [r3, #16]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2107      	movs	r1, #7
 8001456:	400b      	ands	r3, r1
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	409a      	lsls	r2, r3
 800145c:	0013      	movs	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4313      	orrs	r3, r2
 8001462:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	08da      	lsrs	r2, r3, #3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3208      	adds	r2, #8
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	6939      	ldr	r1, [r7, #16]
 8001470:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	409a      	lsls	r2, r3
 8001480:	0013      	movs	r3, r2
 8001482:	43da      	mvns	r2, r3
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2203      	movs	r2, #3
 8001490:	401a      	ands	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	23c0      	movs	r3, #192	; 0xc0
 80014ac:	029b      	lsls	r3, r3, #10
 80014ae:	4013      	ands	r3, r2
 80014b0:	d100      	bne.n	80014b4 <HAL_GPIO_Init+0x17c>
 80014b2:	e0a0      	b.n	80015f6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b4:	4b57      	ldr	r3, [pc, #348]	; (8001614 <HAL_GPIO_Init+0x2dc>)
 80014b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014b8:	4b56      	ldr	r3, [pc, #344]	; (8001614 <HAL_GPIO_Init+0x2dc>)
 80014ba:	2101      	movs	r1, #1
 80014bc:	430a      	orrs	r2, r1
 80014be:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c0:	4a55      	ldr	r2, [pc, #340]	; (8001618 <HAL_GPIO_Init+0x2e0>)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	589b      	ldr	r3, [r3, r2]
 80014cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	2203      	movs	r2, #3
 80014d2:	4013      	ands	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	409a      	lsls	r2, r3
 80014da:	0013      	movs	r3, r2
 80014dc:	43da      	mvns	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	23a0      	movs	r3, #160	; 0xa0
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d01f      	beq.n	800152e <HAL_GPIO_Init+0x1f6>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a4a      	ldr	r2, [pc, #296]	; (800161c <HAL_GPIO_Init+0x2e4>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d019      	beq.n	800152a <HAL_GPIO_Init+0x1f2>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a49      	ldr	r2, [pc, #292]	; (8001620 <HAL_GPIO_Init+0x2e8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d013      	beq.n	8001526 <HAL_GPIO_Init+0x1ee>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a48      	ldr	r2, [pc, #288]	; (8001624 <HAL_GPIO_Init+0x2ec>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d00d      	beq.n	8001522 <HAL_GPIO_Init+0x1ea>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a47      	ldr	r2, [pc, #284]	; (8001628 <HAL_GPIO_Init+0x2f0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d007      	beq.n	800151e <HAL_GPIO_Init+0x1e6>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a46      	ldr	r2, [pc, #280]	; (800162c <HAL_GPIO_Init+0x2f4>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d101      	bne.n	800151a <HAL_GPIO_Init+0x1e2>
 8001516:	2305      	movs	r3, #5
 8001518:	e00a      	b.n	8001530 <HAL_GPIO_Init+0x1f8>
 800151a:	2306      	movs	r3, #6
 800151c:	e008      	b.n	8001530 <HAL_GPIO_Init+0x1f8>
 800151e:	2304      	movs	r3, #4
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x1f8>
 8001522:	2303      	movs	r3, #3
 8001524:	e004      	b.n	8001530 <HAL_GPIO_Init+0x1f8>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_Init+0x1f8>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x1f8>
 800152e:	2300      	movs	r3, #0
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	2103      	movs	r1, #3
 8001534:	400a      	ands	r2, r1
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001540:	4935      	ldr	r1, [pc, #212]	; (8001618 <HAL_GPIO_Init+0x2e0>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800154e:	4b38      	ldr	r3, [pc, #224]	; (8001630 <HAL_GPIO_Init+0x2f8>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	035b      	lsls	r3, r3, #13
 8001566:	4013      	ands	r3, r2
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001572:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <HAL_GPIO_Init+0x2f8>)
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_GPIO_Init+0x2f8>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43da      	mvns	r2, r3
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	039b      	lsls	r3, r3, #14
 8001590:	4013      	ands	r3, r2
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <HAL_GPIO_Init+0x2f8>)
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_GPIO_Init+0x2f8>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43da      	mvns	r2, r3
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	2380      	movs	r3, #128	; 0x80
 80015b8:	029b      	lsls	r3, r3, #10
 80015ba:	4013      	ands	r3, r2
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <HAL_GPIO_Init+0x2f8>)
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_GPIO_Init+0x2f8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43da      	mvns	r2, r3
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	4013      	ands	r3, r2
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_GPIO_Init+0x2f8>)
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	40da      	lsrs	r2, r3
 8001604:	1e13      	subs	r3, r2, #0
 8001606:	d000      	beq.n	800160a <HAL_GPIO_Init+0x2d2>
 8001608:	e6a2      	b.n	8001350 <HAL_GPIO_Init+0x18>
  }
}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	46c0      	nop			; (mov r8, r8)
 800160e:	46bd      	mov	sp, r7
 8001610:	b006      	add	sp, #24
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	50000400 	.word	0x50000400
 8001620:	50000800 	.word	0x50000800
 8001624:	50000c00 	.word	0x50000c00
 8001628:	50001000 	.word	0x50001000
 800162c:	50001c00 	.word	0x50001c00
 8001630:	40010400 	.word	0x40010400

08001634 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001634:	b5b0      	push	{r4, r5, r7, lr}
 8001636:	b08a      	sub	sp, #40	; 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d102      	bne.n	8001648 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	f000 fbbf 	bl	8001dc6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001648:	4bc9      	ldr	r3, [pc, #804]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	220c      	movs	r2, #12
 800164e:	4013      	ands	r3, r2
 8001650:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001652:	4bc7      	ldr	r3, [pc, #796]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	025b      	lsls	r3, r3, #9
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	4013      	ands	r3, r2
 8001666:	d100      	bne.n	800166a <HAL_RCC_OscConfig+0x36>
 8001668:	e07e      	b.n	8001768 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	2b08      	cmp	r3, #8
 800166e:	d007      	beq.n	8001680 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0c      	cmp	r3, #12
 8001674:	d112      	bne.n	800169c <HAL_RCC_OscConfig+0x68>
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	429a      	cmp	r2, r3
 800167e:	d10d      	bne.n	800169c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	4bbb      	ldr	r3, [pc, #748]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	029b      	lsls	r3, r3, #10
 8001688:	4013      	ands	r3, r2
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x5a>
 800168c:	e06b      	b.n	8001766 <HAL_RCC_OscConfig+0x132>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d167      	bne.n	8001766 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	f000 fb95 	bl	8001dc6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	025b      	lsls	r3, r3, #9
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_OscConfig+0x84>
 80016a8:	4bb1      	ldr	r3, [pc, #708]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4bb0      	ldr	r3, [pc, #704]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	0249      	lsls	r1, r1, #9
 80016b2:	430a      	orrs	r2, r1
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	e027      	b.n	8001708 <HAL_RCC_OscConfig+0xd4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	23a0      	movs	r3, #160	; 0xa0
 80016be:	02db      	lsls	r3, r3, #11
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d10e      	bne.n	80016e2 <HAL_RCC_OscConfig+0xae>
 80016c4:	4baa      	ldr	r3, [pc, #680]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4ba9      	ldr	r3, [pc, #676]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	02c9      	lsls	r1, r1, #11
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	4ba7      	ldr	r3, [pc, #668]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4ba6      	ldr	r3, [pc, #664]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	0249      	lsls	r1, r1, #9
 80016dc:	430a      	orrs	r2, r1
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	e012      	b.n	8001708 <HAL_RCC_OscConfig+0xd4>
 80016e2:	4ba3      	ldr	r3, [pc, #652]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4ba2      	ldr	r3, [pc, #648]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016e8:	49a2      	ldr	r1, [pc, #648]	; (8001974 <HAL_RCC_OscConfig+0x340>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	4ba0      	ldr	r3, [pc, #640]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	025b      	lsls	r3, r3, #9
 80016f6:	4013      	ands	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	4b9c      	ldr	r3, [pc, #624]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b9b      	ldr	r3, [pc, #620]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001702:	499d      	ldr	r1, [pc, #628]	; (8001978 <HAL_RCC_OscConfig+0x344>)
 8001704:	400a      	ands	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d015      	beq.n	800173c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff f9b2 	bl	8000a78 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001718:	e009      	b.n	800172e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800171a:	f7ff f9ad 	bl	8000a78 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b64      	cmp	r3, #100	; 0x64
 8001726:	d902      	bls.n	800172e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	f000 fb4c 	bl	8001dc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800172e:	4b90      	ldr	r3, [pc, #576]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	029b      	lsls	r3, r3, #10
 8001736:	4013      	ands	r3, r2
 8001738:	d0ef      	beq.n	800171a <HAL_RCC_OscConfig+0xe6>
 800173a:	e015      	b.n	8001768 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff f99c 	bl	8000a78 <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001746:	f7ff f997 	bl	8000a78 <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b64      	cmp	r3, #100	; 0x64
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e336      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001758:	4b85      	ldr	r3, [pc, #532]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	029b      	lsls	r3, r3, #10
 8001760:	4013      	ands	r3, r2
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x112>
 8001764:	e000      	b.n	8001768 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001766:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2202      	movs	r2, #2
 800176e:	4013      	ands	r3, r2
 8001770:	d100      	bne.n	8001774 <HAL_RCC_OscConfig+0x140>
 8001772:	e099      	b.n	80018a8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	2220      	movs	r2, #32
 800177e:	4013      	ands	r3, r2
 8001780:	d009      	beq.n	8001796 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001782:	4b7b      	ldr	r3, [pc, #492]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001788:	2120      	movs	r1, #32
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	2220      	movs	r2, #32
 8001792:	4393      	bics	r3, r2
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	2b04      	cmp	r3, #4
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	2b0c      	cmp	r3, #12
 80017a0:	d13e      	bne.n	8001820 <HAL_RCC_OscConfig+0x1ec>
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d13b      	bne.n	8001820 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017a8:	4b71      	ldr	r3, [pc, #452]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2204      	movs	r2, #4
 80017ae:	4013      	ands	r3, r2
 80017b0:	d004      	beq.n	80017bc <HAL_RCC_OscConfig+0x188>
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e304      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	4b6c      	ldr	r3, [pc, #432]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	4a6e      	ldr	r2, [pc, #440]	; (800197c <HAL_RCC_OscConfig+0x348>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	021a      	lsls	r2, r3, #8
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80017ce:	430a      	orrs	r2, r1
 80017d0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017d2:	4b67      	ldr	r3, [pc, #412]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2209      	movs	r2, #9
 80017d8:	4393      	bics	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	4b64      	ldr	r3, [pc, #400]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80017de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017e4:	f000 fc42 	bl	800206c <HAL_RCC_GetSysClockFreq>
 80017e8:	0001      	movs	r1, r0
 80017ea:	4b61      	ldr	r3, [pc, #388]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	220f      	movs	r2, #15
 80017f2:	4013      	ands	r3, r2
 80017f4:	4a62      	ldr	r2, [pc, #392]	; (8001980 <HAL_RCC_OscConfig+0x34c>)
 80017f6:	5cd3      	ldrb	r3, [r2, r3]
 80017f8:	000a      	movs	r2, r1
 80017fa:	40da      	lsrs	r2, r3
 80017fc:	4b61      	ldr	r3, [pc, #388]	; (8001984 <HAL_RCC_OscConfig+0x350>)
 80017fe:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001800:	4b61      	ldr	r3, [pc, #388]	; (8001988 <HAL_RCC_OscConfig+0x354>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2513      	movs	r5, #19
 8001806:	197c      	adds	r4, r7, r5
 8001808:	0018      	movs	r0, r3
 800180a:	f7ff f8ef 	bl	80009ec <HAL_InitTick>
 800180e:	0003      	movs	r3, r0
 8001810:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001812:	197b      	adds	r3, r7, r5
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d046      	beq.n	80018a8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800181a:	197b      	adds	r3, r7, r5
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	e2d2      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	2b00      	cmp	r3, #0
 8001824:	d027      	beq.n	8001876 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001826:	4b52      	ldr	r3, [pc, #328]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2209      	movs	r2, #9
 800182c:	4393      	bics	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	4b4f      	ldr	r3, [pc, #316]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff f91e 	bl	8000a78 <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001842:	f7ff f919 	bl	8000a78 <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e2b8      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001854:	4b46      	ldr	r3, [pc, #280]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2204      	movs	r2, #4
 800185a:	4013      	ands	r3, r2
 800185c:	d0f1      	beq.n	8001842 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	4b44      	ldr	r3, [pc, #272]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4a46      	ldr	r2, [pc, #280]	; (800197c <HAL_RCC_OscConfig+0x348>)
 8001864:	4013      	ands	r3, r2
 8001866:	0019      	movs	r1, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	021a      	lsls	r2, r3, #8
 800186e:	4b40      	ldr	r3, [pc, #256]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	e018      	b.n	80018a8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001876:	4b3e      	ldr	r3, [pc, #248]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b3d      	ldr	r3, [pc, #244]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 800187c:	2101      	movs	r1, #1
 800187e:	438a      	bics	r2, r1
 8001880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001882:	f7ff f8f9 	bl	8000a78 <HAL_GetTick>
 8001886:	0003      	movs	r3, r0
 8001888:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800188a:	e008      	b.n	800189e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188c:	f7ff f8f4 	bl	8000a78 <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	2b02      	cmp	r3, #2
 8001898:	d901      	bls.n	800189e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800189a:	2303      	movs	r3, #3
 800189c:	e293      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800189e:	4b34      	ldr	r3, [pc, #208]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2204      	movs	r2, #4
 80018a4:	4013      	ands	r3, r2
 80018a6:	d1f1      	bne.n	800188c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2210      	movs	r2, #16
 80018ae:	4013      	ands	r3, r2
 80018b0:	d100      	bne.n	80018b4 <HAL_RCC_OscConfig+0x280>
 80018b2:	e0a2      	b.n	80019fa <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d140      	bne.n	800193c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	d005      	beq.n	80018d2 <HAL_RCC_OscConfig+0x29e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e279      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a2d      	ldr	r2, [pc, #180]	; (800198c <HAL_RCC_OscConfig+0x358>)
 80018d8:	4013      	ands	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018e0:	4b23      	ldr	r3, [pc, #140]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018e6:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	0a19      	lsrs	r1, r3, #8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	061a      	lsls	r2, r3, #24
 80018f4:	4b1e      	ldr	r3, [pc, #120]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	0b5b      	lsrs	r3, r3, #13
 8001900:	3301      	adds	r3, #1
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	0212      	lsls	r2, r2, #8
 8001906:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	210f      	movs	r1, #15
 8001910:	400b      	ands	r3, r1
 8001912:	491b      	ldr	r1, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x34c>)
 8001914:	5ccb      	ldrb	r3, [r1, r3]
 8001916:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001918:	4b1a      	ldr	r3, [pc, #104]	; (8001984 <HAL_RCC_OscConfig+0x350>)
 800191a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_RCC_OscConfig+0x354>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2513      	movs	r5, #19
 8001922:	197c      	adds	r4, r7, r5
 8001924:	0018      	movs	r0, r3
 8001926:	f7ff f861 	bl	80009ec <HAL_InitTick>
 800192a:	0003      	movs	r3, r0
 800192c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800192e:	197b      	adds	r3, r7, r5
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d061      	beq.n	80019fa <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001936:	197b      	adds	r3, r7, r5
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	e244      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d040      	beq.n	80019c6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RCC_OscConfig+0x33c>)
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	0049      	lsls	r1, r1, #1
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff f891 	bl	8000a78 <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800195a:	e019      	b.n	8001990 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800195c:	f7ff f88c 	bl	8000a78 <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d912      	bls.n	8001990 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e22b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
 800196e:	46c0      	nop			; (mov r8, r8)
 8001970:	40021000 	.word	0x40021000
 8001974:	fffeffff 	.word	0xfffeffff
 8001978:	fffbffff 	.word	0xfffbffff
 800197c:	ffffe0ff 	.word	0xffffe0ff
 8001980:	080039d4 	.word	0x080039d4
 8001984:	20000000 	.word	0x20000000
 8001988:	20000004 	.word	0x20000004
 800198c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001990:	4bca      	ldr	r3, [pc, #808]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4013      	ands	r3, r2
 800199a:	d0df      	beq.n	800195c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800199c:	4bc7      	ldr	r3, [pc, #796]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4ac7      	ldr	r2, [pc, #796]	; (8001cc0 <HAL_RCC_OscConfig+0x68c>)
 80019a2:	4013      	ands	r3, r2
 80019a4:	0019      	movs	r1, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019aa:	4bc4      	ldr	r3, [pc, #784]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 80019ac:	430a      	orrs	r2, r1
 80019ae:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b0:	4bc2      	ldr	r3, [pc, #776]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	0a19      	lsrs	r1, r3, #8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	061a      	lsls	r2, r3, #24
 80019be:	4bbf      	ldr	r3, [pc, #764]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 80019c0:	430a      	orrs	r2, r1
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	e019      	b.n	80019fa <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019c6:	4bbd      	ldr	r3, [pc, #756]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4bbc      	ldr	r3, [pc, #752]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 80019cc:	49bd      	ldr	r1, [pc, #756]	; (8001cc4 <HAL_RCC_OscConfig+0x690>)
 80019ce:	400a      	ands	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d2:	f7ff f851 	bl	8000a78 <HAL_GetTick>
 80019d6:	0003      	movs	r3, r0
 80019d8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019dc:	f7ff f84c 	bl	8000a78 <HAL_GetTick>
 80019e0:	0002      	movs	r2, r0
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e1eb      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019ee:	4bb3      	ldr	r3, [pc, #716]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2380      	movs	r3, #128	; 0x80
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4013      	ands	r3, r2
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2208      	movs	r2, #8
 8001a00:	4013      	ands	r3, r2
 8001a02:	d036      	beq.n	8001a72 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d019      	beq.n	8001a40 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0c:	4bab      	ldr	r3, [pc, #684]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001a0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a10:	4baa      	ldr	r3, [pc, #680]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001a12:	2101      	movs	r1, #1
 8001a14:	430a      	orrs	r2, r1
 8001a16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a18:	f7ff f82e 	bl	8000a78 <HAL_GetTick>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a22:	f7ff f829 	bl	8000a78 <HAL_GetTick>
 8001a26:	0002      	movs	r2, r0
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e1c8      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a34:	4ba1      	ldr	r3, [pc, #644]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d0f1      	beq.n	8001a22 <HAL_RCC_OscConfig+0x3ee>
 8001a3e:	e018      	b.n	8001a72 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a40:	4b9e      	ldr	r3, [pc, #632]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001a42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a44:	4b9d      	ldr	r3, [pc, #628]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	438a      	bics	r2, r1
 8001a4a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4c:	f7ff f814 	bl	8000a78 <HAL_GetTick>
 8001a50:	0003      	movs	r3, r0
 8001a52:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a56:	f7ff f80f 	bl	8000a78 <HAL_GetTick>
 8001a5a:	0002      	movs	r2, r0
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e1ae      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a68:	4b94      	ldr	r3, [pc, #592]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d1f1      	bne.n	8001a56 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2204      	movs	r2, #4
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <HAL_RCC_OscConfig+0x44a>
 8001a7c:	e0ae      	b.n	8001bdc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7e:	2023      	movs	r0, #35	; 0x23
 8001a80:	183b      	adds	r3, r7, r0
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b8d      	ldr	r3, [pc, #564]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	055b      	lsls	r3, r3, #21
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b8a      	ldr	r3, [pc, #552]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001a98:	2180      	movs	r1, #128	; 0x80
 8001a9a:	0549      	lsls	r1, r1, #21
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001aa0:	183b      	adds	r3, r7, r0
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <HAL_RCC_OscConfig+0x694>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d11a      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab2:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <HAL_RCC_OscConfig+0x694>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	4b84      	ldr	r3, [pc, #528]	; (8001cc8 <HAL_RCC_OscConfig+0x694>)
 8001ab8:	2180      	movs	r1, #128	; 0x80
 8001aba:	0049      	lsls	r1, r1, #1
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac0:	f7fe ffda 	bl	8000a78 <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7fe ffd5 	bl	8000a78 <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b64      	cmp	r3, #100	; 0x64
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e174      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	4b7a      	ldr	r3, [pc, #488]	; (8001cc8 <HAL_RCC_OscConfig+0x694>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4d0>
 8001af4:	4b71      	ldr	r3, [pc, #452]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001af6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001af8:	4b70      	ldr	r3, [pc, #448]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	0049      	lsls	r1, r1, #1
 8001afe:	430a      	orrs	r2, r1
 8001b00:	651a      	str	r2, [r3, #80]	; 0x50
 8001b02:	e031      	b.n	8001b68 <HAL_RCC_OscConfig+0x534>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10c      	bne.n	8001b26 <HAL_RCC_OscConfig+0x4f2>
 8001b0c:	4b6b      	ldr	r3, [pc, #428]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b10:	4b6a      	ldr	r3, [pc, #424]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b12:	496c      	ldr	r1, [pc, #432]	; (8001cc4 <HAL_RCC_OscConfig+0x690>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	651a      	str	r2, [r3, #80]	; 0x50
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b1c:	4b67      	ldr	r3, [pc, #412]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b1e:	496b      	ldr	r1, [pc, #428]	; (8001ccc <HAL_RCC_OscConfig+0x698>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	651a      	str	r2, [r3, #80]	; 0x50
 8001b24:	e020      	b.n	8001b68 <HAL_RCC_OscConfig+0x534>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	23a0      	movs	r3, #160	; 0xa0
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d10e      	bne.n	8001b50 <HAL_RCC_OscConfig+0x51c>
 8001b32:	4b62      	ldr	r3, [pc, #392]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b36:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b38:	2180      	movs	r1, #128	; 0x80
 8001b3a:	00c9      	lsls	r1, r1, #3
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	651a      	str	r2, [r3, #80]	; 0x50
 8001b40:	4b5e      	ldr	r3, [pc, #376]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b44:	4b5d      	ldr	r3, [pc, #372]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	0049      	lsls	r1, r1, #1
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b4e:	e00b      	b.n	8001b68 <HAL_RCC_OscConfig+0x534>
 8001b50:	4b5a      	ldr	r3, [pc, #360]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b54:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b56:	495b      	ldr	r1, [pc, #364]	; (8001cc4 <HAL_RCC_OscConfig+0x690>)
 8001b58:	400a      	ands	r2, r1
 8001b5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b5c:	4b57      	ldr	r3, [pc, #348]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b60:	4b56      	ldr	r3, [pc, #344]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b62:	495a      	ldr	r1, [pc, #360]	; (8001ccc <HAL_RCC_OscConfig+0x698>)
 8001b64:	400a      	ands	r2, r1
 8001b66:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d015      	beq.n	8001b9c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b70:	f7fe ff82 	bl	8000a78 <HAL_GetTick>
 8001b74:	0003      	movs	r3, r0
 8001b76:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b78:	e009      	b.n	8001b8e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b7a:	f7fe ff7d 	bl	8000a78 <HAL_GetTick>
 8001b7e:	0002      	movs	r2, r0
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <HAL_RCC_OscConfig+0x69c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e11b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b8e:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001b90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4013      	ands	r3, r2
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x546>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7fe ff6c 	bl	8000a78 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ba4:	e009      	b.n	8001bba <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7fe ff67 	bl	8000a78 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4a47      	ldr	r2, [pc, #284]	; (8001cd0 <HAL_RCC_OscConfig+0x69c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e105      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bba:	4b40      	ldr	r3, [pc, #256]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d1ef      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bc6:	2323      	movs	r3, #35	; 0x23
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bd4:	4b39      	ldr	r3, [pc, #228]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001bd6:	493f      	ldr	r1, [pc, #252]	; (8001cd4 <HAL_RCC_OscConfig+0x6a0>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2220      	movs	r2, #32
 8001be2:	4013      	ands	r3, r2
 8001be4:	d049      	beq.n	8001c7a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d026      	beq.n	8001c3c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	4b30      	ldr	r3, [pc, #192]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bfe:	4b2f      	ldr	r3, [pc, #188]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001c00:	2101      	movs	r1, #1
 8001c02:	430a      	orrs	r2, r1
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_OscConfig+0x6a4>)
 8001c08:	6a1a      	ldr	r2, [r3, #32]
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <HAL_RCC_OscConfig+0x6a4>)
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	0189      	lsls	r1, r1, #6
 8001c10:	430a      	orrs	r2, r1
 8001c12:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7fe ff30 	bl	8000a78 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c1e:	f7fe ff2b 	bl	8000a78 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0ca      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c30:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2202      	movs	r2, #2
 8001c36:	4013      	ands	r3, r2
 8001c38:	d0f1      	beq.n	8001c1e <HAL_RCC_OscConfig+0x5ea>
 8001c3a:	e01e      	b.n	8001c7a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001c42:	2101      	movs	r1, #1
 8001c44:	438a      	bics	r2, r1
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <HAL_RCC_OscConfig+0x6a4>)
 8001c4a:	6a1a      	ldr	r2, [r3, #32]
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_RCC_OscConfig+0x6a4>)
 8001c4e:	4923      	ldr	r1, [pc, #140]	; (8001cdc <HAL_RCC_OscConfig+0x6a8>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7fe ff10 	bl	8000a78 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c5e:	f7fe ff0b 	bl	8000a78 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e0aa      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2202      	movs	r2, #2
 8001c76:	4013      	ands	r3, r2
 8001c78:	d1f1      	bne.n	8001c5e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d100      	bne.n	8001c84 <HAL_RCC_OscConfig+0x650>
 8001c82:	e09f      	b.n	8001dc4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b0c      	cmp	r3, #12
 8001c88:	d100      	bne.n	8001c8c <HAL_RCC_OscConfig+0x658>
 8001c8a:	e078      	b.n	8001d7e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d159      	bne.n	8001d48 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <HAL_RCC_OscConfig+0x688>)
 8001c9a:	4911      	ldr	r1, [pc, #68]	; (8001ce0 <HAL_RCC_OscConfig+0x6ac>)
 8001c9c:	400a      	ands	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca0:	f7fe feea 	bl	8000a78 <HAL_GetTick>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ca8:	e01c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001caa:	f7fe fee5 	bl	8000a78 <HAL_GetTick>
 8001cae:	0002      	movs	r2, r0
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d915      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e084      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	ffff1fff 	.word	0xffff1fff
 8001cc4:	fffffeff 	.word	0xfffffeff
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	fffffbff 	.word	0xfffffbff
 8001cd0:	00001388 	.word	0x00001388
 8001cd4:	efffffff 	.word	0xefffffff
 8001cd8:	40010000 	.word	0x40010000
 8001cdc:	ffffdfff 	.word	0xffffdfff
 8001ce0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ce4:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_RCC_OscConfig+0x79c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	049b      	lsls	r3, r3, #18
 8001cec:	4013      	ands	r3, r2
 8001cee:	d1dc      	bne.n	8001caa <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf0:	4b37      	ldr	r3, [pc, #220]	; (8001dd0 <HAL_RCC_OscConfig+0x79c>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	4a37      	ldr	r2, [pc, #220]	; (8001dd4 <HAL_RCC_OscConfig+0x7a0>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	4b31      	ldr	r3, [pc, #196]	; (8001dd0 <HAL_RCC_OscConfig+0x79c>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_RCC_OscConfig+0x79c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <HAL_RCC_OscConfig+0x79c>)
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	0449      	lsls	r1, r1, #17
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1e:	f7fe feab 	bl	8000a78 <HAL_GetTick>
 8001d22:	0003      	movs	r3, r0
 8001d24:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe fea6 	bl	8000a78 <HAL_GetTick>
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e045      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <HAL_RCC_OscConfig+0x79c>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	2380      	movs	r3, #128	; 0x80
 8001d40:	049b      	lsls	r3, r3, #18
 8001d42:	4013      	ands	r3, r2
 8001d44:	d0f0      	beq.n	8001d28 <HAL_RCC_OscConfig+0x6f4>
 8001d46:	e03d      	b.n	8001dc4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d48:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_OscConfig+0x79c>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_RCC_OscConfig+0x79c>)
 8001d4e:	4922      	ldr	r1, [pc, #136]	; (8001dd8 <HAL_RCC_OscConfig+0x7a4>)
 8001d50:	400a      	ands	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d54:	f7fe fe90 	bl	8000a78 <HAL_GetTick>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d5e:	f7fe fe8b 	bl	8000a78 <HAL_GetTick>
 8001d62:	0002      	movs	r2, r0
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e02a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_RCC_OscConfig+0x79c>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	049b      	lsls	r3, r3, #18
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d1f0      	bne.n	8001d5e <HAL_RCC_OscConfig+0x72a>
 8001d7c:	e022      	b.n	8001dc4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e01d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_OscConfig+0x79c>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	025b      	lsls	r3, r3, #9
 8001d96:	401a      	ands	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10f      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	23f0      	movs	r3, #240	; 0xf0
 8001da4:	039b      	lsls	r3, r3, #14
 8001da6:	401a      	ands	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	23c0      	movs	r3, #192	; 0xc0
 8001db4:	041b      	lsls	r3, r3, #16
 8001db6:	401a      	ands	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b00a      	add	sp, #40	; 0x28
 8001dcc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	ff02ffff 	.word	0xff02ffff
 8001dd8:	feffffff 	.word	0xfeffffff

08001ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b5b0      	push	{r4, r5, r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e128      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b96      	ldr	r3, [pc, #600]	; (800204c <HAL_RCC_ClockConfig+0x270>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2201      	movs	r2, #1
 8001df6:	4013      	ands	r3, r2
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d91e      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b93      	ldr	r3, [pc, #588]	; (800204c <HAL_RCC_ClockConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2201      	movs	r2, #1
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	4b90      	ldr	r3, [pc, #576]	; (800204c <HAL_RCC_ClockConfig+0x270>)
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e10:	f7fe fe32 	bl	8000a78 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1a:	f7fe fe2d 	bl	8000a78 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a8a      	ldr	r2, [pc, #552]	; (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e109      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2e:	4b87      	ldr	r3, [pc, #540]	; (800204c <HAL_RCC_ClockConfig+0x270>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2201      	movs	r2, #1
 8001e34:	4013      	ands	r3, r2
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1ee      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2202      	movs	r2, #2
 8001e42:	4013      	ands	r3, r2
 8001e44:	d009      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e46:	4b83      	ldr	r3, [pc, #524]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	22f0      	movs	r2, #240	; 0xf0
 8001e4c:	4393      	bics	r3, r2
 8001e4e:	0019      	movs	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4b7f      	ldr	r3, [pc, #508]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001e56:	430a      	orrs	r2, r1
 8001e58:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	4013      	ands	r3, r2
 8001e62:	d100      	bne.n	8001e66 <HAL_RCC_ClockConfig+0x8a>
 8001e64:	e089      	b.n	8001f7a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e6e:	4b79      	ldr	r3, [pc, #484]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	029b      	lsls	r3, r3, #10
 8001e76:	4013      	ands	r3, r2
 8001e78:	d120      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0e1      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e86:	4b73      	ldr	r3, [pc, #460]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	049b      	lsls	r3, r3, #18
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d114      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e0d5      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d106      	bne.n	8001eac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e9e:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d109      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0ca      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001eac:	4b69      	ldr	r3, [pc, #420]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0c2      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ebc:	4b65      	ldr	r3, [pc, #404]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2203      	movs	r2, #3
 8001ec2:	4393      	bics	r3, r2
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	4b62      	ldr	r3, [pc, #392]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed0:	f7fe fdd2 	bl	8000a78 <HAL_GetTick>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d111      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee0:	e009      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee2:	f7fe fdc9 	bl	8000a78 <HAL_GetTick>
 8001ee6:	0002      	movs	r2, r0
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0a5      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef6:	4b57      	ldr	r3, [pc, #348]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	220c      	movs	r2, #12
 8001efc:	4013      	ands	r3, r2
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d1ef      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x106>
 8001f02:	e03a      	b.n	8001f7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d111      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0c:	e009      	b.n	8001f22 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0e:	f7fe fdb3 	bl	8000a78 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	4a4d      	ldr	r2, [pc, #308]	; (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e08f      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f22:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	220c      	movs	r2, #12
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d1ef      	bne.n	8001f0e <HAL_RCC_ClockConfig+0x132>
 8001f2e:	e024      	b.n	8001f7a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d11b      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f38:	e009      	b.n	8001f4e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3a:	f7fe fd9d 	bl	8000a78 <HAL_GetTick>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	4a42      	ldr	r2, [pc, #264]	; (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e079      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4e:	4b41      	ldr	r3, [pc, #260]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	220c      	movs	r2, #12
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b04      	cmp	r3, #4
 8001f58:	d1ef      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x15e>
 8001f5a:	e00e      	b.n	8001f7a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7fe fd8c 	bl	8000a78 <HAL_GetTick>
 8001f60:	0002      	movs	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	4a3a      	ldr	r2, [pc, #232]	; (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e068      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f70:	4b38      	ldr	r3, [pc, #224]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	220c      	movs	r2, #12
 8001f76:	4013      	ands	r3, r2
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7a:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCC_ClockConfig+0x270>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d21e      	bcs.n	8001fc6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f88:	4b30      	ldr	r3, [pc, #192]	; (800204c <HAL_RCC_ClockConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	4393      	bics	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	4b2e      	ldr	r3, [pc, #184]	; (800204c <HAL_RCC_ClockConfig+0x270>)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f9a:	f7fe fd6d 	bl	8000a78 <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	e009      	b.n	8001fb8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa4:	f7fe fd68 	bl	8000a78 <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	4a28      	ldr	r2, [pc, #160]	; (8002050 <HAL_RCC_ClockConfig+0x274>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e044      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb8:	4b24      	ldr	r3, [pc, #144]	; (800204c <HAL_RCC_ClockConfig+0x270>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d1ee      	bne.n	8001fa4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d009      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <HAL_RCC_ClockConfig+0x27c>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	4b1d      	ldr	r3, [pc, #116]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2208      	movs	r2, #8
 8001fea:	4013      	ands	r3, r2
 8001fec:	d00a      	beq.n	8002004 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fee:	4b19      	ldr	r3, [pc, #100]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_RCC_ClockConfig+0x280>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	00da      	lsls	r2, r3, #3
 8001ffe:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 8002000:	430a      	orrs	r2, r1
 8002002:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002004:	f000 f832 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002008:	0001      	movs	r1, r0
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_RCC_ClockConfig+0x278>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	091b      	lsrs	r3, r3, #4
 8002010:	220f      	movs	r2, #15
 8002012:	4013      	ands	r3, r2
 8002014:	4a12      	ldr	r2, [pc, #72]	; (8002060 <HAL_RCC_ClockConfig+0x284>)
 8002016:	5cd3      	ldrb	r3, [r2, r3]
 8002018:	000a      	movs	r2, r1
 800201a:	40da      	lsrs	r2, r3
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_RCC_ClockConfig+0x288>)
 800201e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_RCC_ClockConfig+0x28c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	250b      	movs	r5, #11
 8002026:	197c      	adds	r4, r7, r5
 8002028:	0018      	movs	r0, r3
 800202a:	f7fe fcdf 	bl	80009ec <HAL_InitTick>
 800202e:	0003      	movs	r3, r0
 8002030:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002032:	197b      	adds	r3, r7, r5
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800203a:	197b      	adds	r3, r7, r5
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	e000      	b.n	8002042 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b004      	add	sp, #16
 8002048:	bdb0      	pop	{r4, r5, r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	40022000 	.word	0x40022000
 8002050:	00001388 	.word	0x00001388
 8002054:	40021000 	.word	0x40021000
 8002058:	fffff8ff 	.word	0xfffff8ff
 800205c:	ffffc7ff 	.word	0xffffc7ff
 8002060:	080039d4 	.word	0x080039d4
 8002064:	20000000 	.word	0x20000000
 8002068:	20000004 	.word	0x20000004

0800206c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	b5b0      	push	{r4, r5, r7, lr}
 800206e:	b08e      	sub	sp, #56	; 0x38
 8002070:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002072:	4b4c      	ldr	r3, [pc, #304]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800207a:	230c      	movs	r3, #12
 800207c:	4013      	ands	r3, r2
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d014      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x40>
 8002082:	d900      	bls.n	8002086 <HAL_RCC_GetSysClockFreq+0x1a>
 8002084:	e07b      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x112>
 8002086:	2b04      	cmp	r3, #4
 8002088:	d002      	beq.n	8002090 <HAL_RCC_GetSysClockFreq+0x24>
 800208a:	2b08      	cmp	r3, #8
 800208c:	d00b      	beq.n	80020a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800208e:	e076      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002090:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2210      	movs	r2, #16
 8002096:	4013      	ands	r3, r2
 8002098:	d002      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800209a:	4b43      	ldr	r3, [pc, #268]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800209e:	e07c      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80020a0:	4b42      	ldr	r3, [pc, #264]	; (80021ac <HAL_RCC_GetSysClockFreq+0x140>)
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020a4:	e079      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a6:	4b42      	ldr	r3, [pc, #264]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020aa:	e076      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80020ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ae:	0c9a      	lsrs	r2, r3, #18
 80020b0:	230f      	movs	r3, #15
 80020b2:	401a      	ands	r2, r3
 80020b4:	4b3f      	ldr	r3, [pc, #252]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x148>)
 80020b6:	5c9b      	ldrb	r3, [r3, r2]
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80020ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020bc:	0d9a      	lsrs	r2, r3, #22
 80020be:	2303      	movs	r3, #3
 80020c0:	4013      	ands	r3, r2
 80020c2:	3301      	adds	r3, #1
 80020c4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c6:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x138>)
 80020c8:	68da      	ldr	r2, [r3, #12]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	025b      	lsls	r3, r3, #9
 80020ce:	4013      	ands	r3, r2
 80020d0:	d01a      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
 80020da:	4a35      	ldr	r2, [pc, #212]	; (80021b0 <HAL_RCC_GetSysClockFreq+0x144>)
 80020dc:	2300      	movs	r3, #0
 80020de:	69b8      	ldr	r0, [r7, #24]
 80020e0:	69f9      	ldr	r1, [r7, #28]
 80020e2:	f7fe f8c7 	bl	8000274 <__aeabi_lmul>
 80020e6:	0002      	movs	r2, r0
 80020e8:	000b      	movs	r3, r1
 80020ea:	0010      	movs	r0, r2
 80020ec:	0019      	movs	r1, r3
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f7fe f89b 	bl	8000234 <__aeabi_uldivmod>
 80020fe:	0002      	movs	r2, r0
 8002100:	000b      	movs	r3, r1
 8002102:	0013      	movs	r3, r2
 8002104:	637b      	str	r3, [r7, #52]	; 0x34
 8002106:	e037      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x138>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2210      	movs	r2, #16
 800210e:	4013      	ands	r3, r2
 8002110:	d01a      	beq.n	8002148 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	4a23      	ldr	r2, [pc, #140]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800211c:	2300      	movs	r3, #0
 800211e:	68b8      	ldr	r0, [r7, #8]
 8002120:	68f9      	ldr	r1, [r7, #12]
 8002122:	f7fe f8a7 	bl	8000274 <__aeabi_lmul>
 8002126:	0002      	movs	r2, r0
 8002128:	000b      	movs	r3, r1
 800212a:	0010      	movs	r0, r2
 800212c:	0019      	movs	r1, r3
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f7fe f87b 	bl	8000234 <__aeabi_uldivmod>
 800213e:	0002      	movs	r2, r0
 8002140:	000b      	movs	r3, r1
 8002142:	0013      	movs	r3, r2
 8002144:	637b      	str	r3, [r7, #52]	; 0x34
 8002146:	e017      	b.n	8002178 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	0018      	movs	r0, r3
 800214c:	2300      	movs	r3, #0
 800214e:	0019      	movs	r1, r3
 8002150:	4a16      	ldr	r2, [pc, #88]	; (80021ac <HAL_RCC_GetSysClockFreq+0x140>)
 8002152:	2300      	movs	r3, #0
 8002154:	f7fe f88e 	bl	8000274 <__aeabi_lmul>
 8002158:	0002      	movs	r2, r0
 800215a:	000b      	movs	r3, r1
 800215c:	0010      	movs	r0, r2
 800215e:	0019      	movs	r1, r3
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	001c      	movs	r4, r3
 8002164:	2300      	movs	r3, #0
 8002166:	001d      	movs	r5, r3
 8002168:	0022      	movs	r2, r4
 800216a:	002b      	movs	r3, r5
 800216c:	f7fe f862 	bl	8000234 <__aeabi_uldivmod>
 8002170:	0002      	movs	r2, r0
 8002172:	000b      	movs	r3, r1
 8002174:	0013      	movs	r3, r2
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800217c:	e00d      	b.n	800219a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x138>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0b5b      	lsrs	r3, r3, #13
 8002184:	2207      	movs	r2, #7
 8002186:	4013      	ands	r3, r2
 8002188:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	3301      	adds	r3, #1
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	0212      	lsls	r2, r2, #8
 8002192:	409a      	lsls	r2, r3
 8002194:	0013      	movs	r3, r2
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002198:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800219a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800219c:	0018      	movs	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	b00e      	add	sp, #56	; 0x38
 80021a2:	bdb0      	pop	{r4, r5, r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	003d0900 	.word	0x003d0900
 80021ac:	00f42400 	.word	0x00f42400
 80021b0:	007a1200 	.word	0x007a1200
 80021b4:	080039ec 	.word	0x080039ec

080021b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80021be:	681b      	ldr	r3, [r3, #0]
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	20000000 	.word	0x20000000

080021cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021d0:	f7ff fff2 	bl	80021b8 <HAL_RCC_GetHCLKFreq>
 80021d4:	0001      	movs	r1, r0
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	2207      	movs	r2, #7
 80021de:	4013      	ands	r3, r2
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021e2:	5cd3      	ldrb	r3, [r2, r3]
 80021e4:	40d9      	lsrs	r1, r3
 80021e6:	000b      	movs	r3, r1
}
 80021e8:	0018      	movs	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	40021000 	.word	0x40021000
 80021f4:	080039e4 	.word	0x080039e4

080021f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021fc:	f7ff ffdc 	bl	80021b8 <HAL_RCC_GetHCLKFreq>
 8002200:	0001      	movs	r1, r0
 8002202:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	0adb      	lsrs	r3, r3, #11
 8002208:	2207      	movs	r2, #7
 800220a:	4013      	ands	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_RCC_GetPCLK2Freq+0x28>)
 800220e:	5cd3      	ldrb	r3, [r2, r3]
 8002210:	40d9      	lsrs	r1, r3
 8002212:	000b      	movs	r3, r1
}
 8002214:	0018      	movs	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	40021000 	.word	0x40021000
 8002220:	080039e4 	.word	0x080039e4

08002224 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800222c:	2017      	movs	r0, #23
 800222e:	183b      	adds	r3, r7, r0
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2220      	movs	r2, #32
 800223a:	4013      	ands	r3, r2
 800223c:	d100      	bne.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800223e:	e0c7      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002240:	4b9b      	ldr	r3, [pc, #620]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	055b      	lsls	r3, r3, #21
 8002248:	4013      	ands	r3, r2
 800224a:	d109      	bne.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800224c:	4b98      	ldr	r3, [pc, #608]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800224e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002250:	4b97      	ldr	r3, [pc, #604]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0549      	lsls	r1, r1, #21
 8002256:	430a      	orrs	r2, r1
 8002258:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800225a:	183b      	adds	r3, r7, r0
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	4b94      	ldr	r3, [pc, #592]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	4013      	ands	r3, r2
 800226a:	d11a      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226c:	4b91      	ldr	r3, [pc, #580]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b90      	ldr	r3, [pc, #576]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002272:	2180      	movs	r1, #128	; 0x80
 8002274:	0049      	lsls	r1, r1, #1
 8002276:	430a      	orrs	r2, r1
 8002278:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227a:	f7fe fbfd 	bl	8000a78 <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002282:	e008      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002284:	f7fe fbf8 	bl	8000a78 <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b64      	cmp	r3, #100	; 0x64
 8002290:	d901      	bls.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e107      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002296:	4b87      	ldr	r3, [pc, #540]	; (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	d0f0      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80022a2:	4b83      	ldr	r3, [pc, #524]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	23c0      	movs	r3, #192	; 0xc0
 80022a8:	039b      	lsls	r3, r3, #14
 80022aa:	4013      	ands	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	23c0      	movs	r3, #192	; 0xc0
 80022b4:	039b      	lsls	r3, r3, #14
 80022b6:	4013      	ands	r3, r2
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d013      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	23c0      	movs	r3, #192	; 0xc0
 80022c4:	029b      	lsls	r3, r3, #10
 80022c6:	401a      	ands	r2, r3
 80022c8:	23c0      	movs	r3, #192	; 0xc0
 80022ca:	029b      	lsls	r3, r3, #10
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d10a      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80022d0:	4b77      	ldr	r3, [pc, #476]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	029b      	lsls	r3, r3, #10
 80022d8:	401a      	ands	r2, r3
 80022da:	2380      	movs	r3, #128	; 0x80
 80022dc:	029b      	lsls	r3, r3, #10
 80022de:	429a      	cmp	r2, r3
 80022e0:	d101      	bne.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0df      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80022e6:	4b72      	ldr	r3, [pc, #456]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80022e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	029b      	lsls	r3, r3, #10
 80022ee:	4013      	ands	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d03b      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	23c0      	movs	r3, #192	; 0xc0
 80022fe:	029b      	lsls	r3, r3, #10
 8002300:	4013      	ands	r3, r2
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	429a      	cmp	r2, r3
 8002306:	d033      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2220      	movs	r2, #32
 800230e:	4013      	ands	r3, r2
 8002310:	d02e      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002312:	4b67      	ldr	r3, [pc, #412]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002316:	4a68      	ldr	r2, [pc, #416]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800231c:	4b64      	ldr	r3, [pc, #400]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800231e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002320:	4b63      	ldr	r3, [pc, #396]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002322:	2180      	movs	r1, #128	; 0x80
 8002324:	0309      	lsls	r1, r1, #12
 8002326:	430a      	orrs	r2, r1
 8002328:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800232a:	4b61      	ldr	r3, [pc, #388]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800232c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800232e:	4b60      	ldr	r3, [pc, #384]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002330:	4962      	ldr	r1, [pc, #392]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002332:	400a      	ands	r2, r1
 8002334:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002336:	4b5e      	ldr	r3, [pc, #376]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4013      	ands	r3, r2
 8002344:	d014      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7fe fb97 	bl	8000a78 <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800234e:	e009      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7fe fb92 	bl	8000a78 <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	4a59      	ldr	r2, [pc, #356]	; (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e0a0      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002364:	4b52      	ldr	r3, [pc, #328]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4013      	ands	r3, r2
 800236e:	d0ef      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2220      	movs	r2, #32
 8002376:	4013      	ands	r3, r2
 8002378:	d01f      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	23c0      	movs	r3, #192	; 0xc0
 8002380:	029b      	lsls	r3, r3, #10
 8002382:	401a      	ands	r2, r3
 8002384:	23c0      	movs	r3, #192	; 0xc0
 8002386:	029b      	lsls	r3, r3, #10
 8002388:	429a      	cmp	r2, r3
 800238a:	d10c      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800238c:	4b48      	ldr	r3, [pc, #288]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	23c0      	movs	r3, #192	; 0xc0
 800239c:	039b      	lsls	r3, r3, #14
 800239e:	401a      	ands	r2, r3
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	4b42      	ldr	r3, [pc, #264]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	23c0      	movs	r3, #192	; 0xc0
 80023b0:	029b      	lsls	r3, r3, #10
 80023b2:	401a      	ands	r2, r3
 80023b4:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023ba:	2317      	movs	r3, #23
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d105      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c4:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023c8:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023ca:	493f      	ldr	r1, [pc, #252]	; (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80023cc:	400a      	ands	r2, r1
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2201      	movs	r2, #1
 80023d6:	4013      	ands	r3, r2
 80023d8:	d009      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023da:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	2203      	movs	r2, #3
 80023e0:	4393      	bics	r3, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023ea:	430a      	orrs	r2, r1
 80023ec:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d009      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f8:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80023fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fc:	220c      	movs	r2, #12
 80023fe:	4393      	bics	r3, r2
 8002400:	0019      	movs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002408:	430a      	orrs	r2, r1
 800240a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2204      	movs	r2, #4
 8002412:	4013      	ands	r3, r2
 8002414:	d009      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002416:	4b26      	ldr	r3, [pc, #152]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	4a2c      	ldr	r2, [pc, #176]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002426:	430a      	orrs	r2, r1
 8002428:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2208      	movs	r2, #8
 8002430:	4013      	ands	r3, r2
 8002432:	d009      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002434:	4b1e      	ldr	r3, [pc, #120]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002438:	4a25      	ldr	r2, [pc, #148]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800243a:	4013      	ands	r3, r2
 800243c:	0019      	movs	r1, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	4b1b      	ldr	r3, [pc, #108]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002444:	430a      	orrs	r2, r1
 8002446:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4013      	ands	r3, r2
 8002452:	d009      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002454:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	4a17      	ldr	r2, [pc, #92]	; (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800245a:	4013      	ands	r3, r2
 800245c:	0019      	movs	r1, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002464:	430a      	orrs	r2, r1
 8002466:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2240      	movs	r2, #64	; 0x40
 800246e:	4013      	ands	r3, r2
 8002470:	d009      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002478:	4013      	ands	r3, r2
 800247a:	0019      	movs	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1a      	ldr	r2, [r3, #32]
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002482:	430a      	orrs	r2, r1
 8002484:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2280      	movs	r2, #128	; 0x80
 800248c:	4013      	ands	r3, r2
 800248e:	d009      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8002492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002494:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002496:	4013      	ands	r3, r2
 8002498:	0019      	movs	r1, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69da      	ldr	r2, [r3, #28]
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80024a0:	430a      	orrs	r2, r1
 80024a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	0018      	movs	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b006      	add	sp, #24
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
 80024b8:	fffcffff 	.word	0xfffcffff
 80024bc:	fff7ffff 	.word	0xfff7ffff
 80024c0:	00001388 	.word	0x00001388
 80024c4:	ffcfffff 	.word	0xffcfffff
 80024c8:	efffffff 	.word	0xefffffff
 80024cc:	fffff3ff 	.word	0xfffff3ff
 80024d0:	ffffcfff 	.word	0xffffcfff
 80024d4:	fbffffff 	.word	0xfbffffff
 80024d8:	fff3ffff 	.word	0xfff3ffff

080024dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e044      	b.n	8002578 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d107      	bne.n	8002506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2278      	movs	r2, #120	; 0x78
 80024fa:	2100      	movs	r1, #0
 80024fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	0018      	movs	r0, r3
 8002502:	f7fe f98f 	bl	8000824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2224      	movs	r2, #36	; 0x24
 800250a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2101      	movs	r1, #1
 8002518:	438a      	bics	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	0018      	movs	r0, r3
 8002520:	f000 f8d0 	bl	80026c4 <UART_SetConfig>
 8002524:	0003      	movs	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d101      	bne.n	800252e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e024      	b.n	8002578 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0018      	movs	r0, r3
 800253a:	f000 fb61 	bl	8002c00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	490d      	ldr	r1, [pc, #52]	; (8002580 <HAL_UART_Init+0xa4>)
 800254a:	400a      	ands	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	212a      	movs	r1, #42	; 0x2a
 800255a:	438a      	bics	r2, r1
 800255c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2101      	movs	r1, #1
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	0018      	movs	r0, r3
 8002572:	f000 fbf9 	bl	8002d68 <UART_CheckIdleState>
 8002576:	0003      	movs	r3, r0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}
 8002580:	ffffb7ff 	.word	0xffffb7ff

08002584 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b08a      	sub	sp, #40	; 0x28
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	603b      	str	r3, [r7, #0]
 8002590:	1dbb      	adds	r3, r7, #6
 8002592:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002598:	2b20      	cmp	r3, #32
 800259a:	d000      	beq.n	800259e <HAL_UART_Transmit+0x1a>
 800259c:	e08c      	b.n	80026b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_UART_Transmit+0x28>
 80025a4:	1dbb      	adds	r3, r7, #6
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e084      	b.n	80026ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	015b      	lsls	r3, r3, #5
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d109      	bne.n	80025d0 <HAL_UART_Transmit+0x4c>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d105      	bne.n	80025d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2201      	movs	r2, #1
 80025c8:	4013      	ands	r3, r2
 80025ca:	d001      	beq.n	80025d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e074      	b.n	80026ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2284      	movs	r2, #132	; 0x84
 80025d4:	2100      	movs	r1, #0
 80025d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2221      	movs	r2, #33	; 0x21
 80025dc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025de:	f7fe fa4b 	bl	8000a78 <HAL_GetTick>
 80025e2:	0003      	movs	r3, r0
 80025e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1dba      	adds	r2, r7, #6
 80025ea:	2150      	movs	r1, #80	; 0x50
 80025ec:	8812      	ldrh	r2, [r2, #0]
 80025ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1dba      	adds	r2, r7, #6
 80025f4:	2152      	movs	r1, #82	; 0x52
 80025f6:	8812      	ldrh	r2, [r2, #0]
 80025f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	015b      	lsls	r3, r3, #5
 8002602:	429a      	cmp	r2, r3
 8002604:	d108      	bne.n	8002618 <HAL_UART_Transmit+0x94>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d104      	bne.n	8002618 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	e003      	b.n	8002620 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002620:	e02f      	b.n	8002682 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	0013      	movs	r3, r2
 800262c:	2200      	movs	r2, #0
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	f000 fc42 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002634:	1e03      	subs	r3, r0, #0
 8002636:	d004      	beq.n	8002642 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e03b      	b.n	80026ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10b      	bne.n	8002660 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	001a      	movs	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	05d2      	lsls	r2, r2, #23
 8002654:	0dd2      	lsrs	r2, r2, #23
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	3302      	adds	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
 800265e:	e007      	b.n	8002670 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	781a      	ldrb	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3301      	adds	r3, #1
 800266e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2252      	movs	r2, #82	; 0x52
 8002674:	5a9b      	ldrh	r3, [r3, r2]
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b299      	uxth	r1, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2252      	movs	r2, #82	; 0x52
 8002680:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2252      	movs	r2, #82	; 0x52
 8002686:	5a9b      	ldrh	r3, [r3, r2]
 8002688:	b29b      	uxth	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1c9      	bne.n	8002622 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	0013      	movs	r3, r2
 8002698:	2200      	movs	r2, #0
 800269a:	2140      	movs	r1, #64	; 0x40
 800269c:	f000 fc0c 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 80026a0:	1e03      	subs	r3, r0, #0
 80026a2:	d004      	beq.n	80026ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2220      	movs	r2, #32
 80026a8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e005      	b.n	80026ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	e000      	b.n	80026ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80026b8:	2302      	movs	r3, #2
  }
}
 80026ba:	0018      	movs	r0, r3
 80026bc:	46bd      	mov	sp, r7
 80026be:	b008      	add	sp, #32
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c4:	b5b0      	push	{r4, r5, r7, lr}
 80026c6:	b08e      	sub	sp, #56	; 0x38
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026cc:	231a      	movs	r3, #26
 80026ce:	2218      	movs	r2, #24
 80026d0:	189b      	adds	r3, r3, r2
 80026d2:	19db      	adds	r3, r3, r7
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4ac3      	ldr	r2, [pc, #780]	; (8002a04 <UART_SetConfig+0x340>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	0019      	movs	r1, r3
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002702:	430a      	orrs	r2, r1
 8002704:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4abe      	ldr	r2, [pc, #760]	; (8002a08 <UART_SetConfig+0x344>)
 800270e:	4013      	ands	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4ab8      	ldr	r2, [pc, #736]	; (8002a0c <UART_SetConfig+0x348>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d004      	beq.n	8002738 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002734:	4313      	orrs	r3, r2
 8002736:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	4ab4      	ldr	r2, [pc, #720]	; (8002a10 <UART_SetConfig+0x34c>)
 8002740:	4013      	ands	r3, r2
 8002742:	0019      	movs	r1, r3
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800274a:	430a      	orrs	r2, r1
 800274c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4ab0      	ldr	r2, [pc, #704]	; (8002a14 <UART_SetConfig+0x350>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d131      	bne.n	80027bc <UART_SetConfig+0xf8>
 8002758:	4baf      	ldr	r3, [pc, #700]	; (8002a18 <UART_SetConfig+0x354>)
 800275a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275c:	2203      	movs	r2, #3
 800275e:	4013      	ands	r3, r2
 8002760:	2b03      	cmp	r3, #3
 8002762:	d01d      	beq.n	80027a0 <UART_SetConfig+0xdc>
 8002764:	d823      	bhi.n	80027ae <UART_SetConfig+0xea>
 8002766:	2b02      	cmp	r3, #2
 8002768:	d00c      	beq.n	8002784 <UART_SetConfig+0xc0>
 800276a:	d820      	bhi.n	80027ae <UART_SetConfig+0xea>
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <UART_SetConfig+0xb2>
 8002770:	2b01      	cmp	r3, #1
 8002772:	d00e      	beq.n	8002792 <UART_SetConfig+0xce>
 8002774:	e01b      	b.n	80027ae <UART_SetConfig+0xea>
 8002776:	231b      	movs	r3, #27
 8002778:	2218      	movs	r2, #24
 800277a:	189b      	adds	r3, r3, r2
 800277c:	19db      	adds	r3, r3, r7
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]
 8002782:	e0b4      	b.n	80028ee <UART_SetConfig+0x22a>
 8002784:	231b      	movs	r3, #27
 8002786:	2218      	movs	r2, #24
 8002788:	189b      	adds	r3, r3, r2
 800278a:	19db      	adds	r3, r3, r7
 800278c:	2202      	movs	r2, #2
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e0ad      	b.n	80028ee <UART_SetConfig+0x22a>
 8002792:	231b      	movs	r3, #27
 8002794:	2218      	movs	r2, #24
 8002796:	189b      	adds	r3, r3, r2
 8002798:	19db      	adds	r3, r3, r7
 800279a:	2204      	movs	r2, #4
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	e0a6      	b.n	80028ee <UART_SetConfig+0x22a>
 80027a0:	231b      	movs	r3, #27
 80027a2:	2218      	movs	r2, #24
 80027a4:	189b      	adds	r3, r3, r2
 80027a6:	19db      	adds	r3, r3, r7
 80027a8:	2208      	movs	r2, #8
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e09f      	b.n	80028ee <UART_SetConfig+0x22a>
 80027ae:	231b      	movs	r3, #27
 80027b0:	2218      	movs	r2, #24
 80027b2:	189b      	adds	r3, r3, r2
 80027b4:	19db      	adds	r3, r3, r7
 80027b6:	2210      	movs	r2, #16
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e098      	b.n	80028ee <UART_SetConfig+0x22a>
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a96      	ldr	r2, [pc, #600]	; (8002a1c <UART_SetConfig+0x358>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d131      	bne.n	800282a <UART_SetConfig+0x166>
 80027c6:	4b94      	ldr	r3, [pc, #592]	; (8002a18 <UART_SetConfig+0x354>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	220c      	movs	r2, #12
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b0c      	cmp	r3, #12
 80027d0:	d01d      	beq.n	800280e <UART_SetConfig+0x14a>
 80027d2:	d823      	bhi.n	800281c <UART_SetConfig+0x158>
 80027d4:	2b08      	cmp	r3, #8
 80027d6:	d00c      	beq.n	80027f2 <UART_SetConfig+0x12e>
 80027d8:	d820      	bhi.n	800281c <UART_SetConfig+0x158>
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <UART_SetConfig+0x120>
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d00e      	beq.n	8002800 <UART_SetConfig+0x13c>
 80027e2:	e01b      	b.n	800281c <UART_SetConfig+0x158>
 80027e4:	231b      	movs	r3, #27
 80027e6:	2218      	movs	r2, #24
 80027e8:	189b      	adds	r3, r3, r2
 80027ea:	19db      	adds	r3, r3, r7
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	e07d      	b.n	80028ee <UART_SetConfig+0x22a>
 80027f2:	231b      	movs	r3, #27
 80027f4:	2218      	movs	r2, #24
 80027f6:	189b      	adds	r3, r3, r2
 80027f8:	19db      	adds	r3, r3, r7
 80027fa:	2202      	movs	r2, #2
 80027fc:	701a      	strb	r2, [r3, #0]
 80027fe:	e076      	b.n	80028ee <UART_SetConfig+0x22a>
 8002800:	231b      	movs	r3, #27
 8002802:	2218      	movs	r2, #24
 8002804:	189b      	adds	r3, r3, r2
 8002806:	19db      	adds	r3, r3, r7
 8002808:	2204      	movs	r2, #4
 800280a:	701a      	strb	r2, [r3, #0]
 800280c:	e06f      	b.n	80028ee <UART_SetConfig+0x22a>
 800280e:	231b      	movs	r3, #27
 8002810:	2218      	movs	r2, #24
 8002812:	189b      	adds	r3, r3, r2
 8002814:	19db      	adds	r3, r3, r7
 8002816:	2208      	movs	r2, #8
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	e068      	b.n	80028ee <UART_SetConfig+0x22a>
 800281c:	231b      	movs	r3, #27
 800281e:	2218      	movs	r2, #24
 8002820:	189b      	adds	r3, r3, r2
 8002822:	19db      	adds	r3, r3, r7
 8002824:	2210      	movs	r2, #16
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	e061      	b.n	80028ee <UART_SetConfig+0x22a>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a7c      	ldr	r2, [pc, #496]	; (8002a20 <UART_SetConfig+0x35c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d106      	bne.n	8002842 <UART_SetConfig+0x17e>
 8002834:	231b      	movs	r3, #27
 8002836:	2218      	movs	r2, #24
 8002838:	189b      	adds	r3, r3, r2
 800283a:	19db      	adds	r3, r3, r7
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e055      	b.n	80028ee <UART_SetConfig+0x22a>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a77      	ldr	r2, [pc, #476]	; (8002a24 <UART_SetConfig+0x360>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d106      	bne.n	800285a <UART_SetConfig+0x196>
 800284c:	231b      	movs	r3, #27
 800284e:	2218      	movs	r2, #24
 8002850:	189b      	adds	r3, r3, r2
 8002852:	19db      	adds	r3, r3, r7
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e049      	b.n	80028ee <UART_SetConfig+0x22a>
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a6b      	ldr	r2, [pc, #428]	; (8002a0c <UART_SetConfig+0x348>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d13e      	bne.n	80028e2 <UART_SetConfig+0x21e>
 8002864:	4b6c      	ldr	r3, [pc, #432]	; (8002a18 <UART_SetConfig+0x354>)
 8002866:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002868:	23c0      	movs	r3, #192	; 0xc0
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	4013      	ands	r3, r2
 800286e:	22c0      	movs	r2, #192	; 0xc0
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	4293      	cmp	r3, r2
 8002874:	d027      	beq.n	80028c6 <UART_SetConfig+0x202>
 8002876:	22c0      	movs	r2, #192	; 0xc0
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	4293      	cmp	r3, r2
 800287c:	d82a      	bhi.n	80028d4 <UART_SetConfig+0x210>
 800287e:	2280      	movs	r2, #128	; 0x80
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	4293      	cmp	r3, r2
 8002884:	d011      	beq.n	80028aa <UART_SetConfig+0x1e6>
 8002886:	2280      	movs	r2, #128	; 0x80
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	4293      	cmp	r3, r2
 800288c:	d822      	bhi.n	80028d4 <UART_SetConfig+0x210>
 800288e:	2b00      	cmp	r3, #0
 8002890:	d004      	beq.n	800289c <UART_SetConfig+0x1d8>
 8002892:	2280      	movs	r2, #128	; 0x80
 8002894:	00d2      	lsls	r2, r2, #3
 8002896:	4293      	cmp	r3, r2
 8002898:	d00e      	beq.n	80028b8 <UART_SetConfig+0x1f4>
 800289a:	e01b      	b.n	80028d4 <UART_SetConfig+0x210>
 800289c:	231b      	movs	r3, #27
 800289e:	2218      	movs	r2, #24
 80028a0:	189b      	adds	r3, r3, r2
 80028a2:	19db      	adds	r3, r3, r7
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	e021      	b.n	80028ee <UART_SetConfig+0x22a>
 80028aa:	231b      	movs	r3, #27
 80028ac:	2218      	movs	r2, #24
 80028ae:	189b      	adds	r3, r3, r2
 80028b0:	19db      	adds	r3, r3, r7
 80028b2:	2202      	movs	r2, #2
 80028b4:	701a      	strb	r2, [r3, #0]
 80028b6:	e01a      	b.n	80028ee <UART_SetConfig+0x22a>
 80028b8:	231b      	movs	r3, #27
 80028ba:	2218      	movs	r2, #24
 80028bc:	189b      	adds	r3, r3, r2
 80028be:	19db      	adds	r3, r3, r7
 80028c0:	2204      	movs	r2, #4
 80028c2:	701a      	strb	r2, [r3, #0]
 80028c4:	e013      	b.n	80028ee <UART_SetConfig+0x22a>
 80028c6:	231b      	movs	r3, #27
 80028c8:	2218      	movs	r2, #24
 80028ca:	189b      	adds	r3, r3, r2
 80028cc:	19db      	adds	r3, r3, r7
 80028ce:	2208      	movs	r2, #8
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e00c      	b.n	80028ee <UART_SetConfig+0x22a>
 80028d4:	231b      	movs	r3, #27
 80028d6:	2218      	movs	r2, #24
 80028d8:	189b      	adds	r3, r3, r2
 80028da:	19db      	adds	r3, r3, r7
 80028dc:	2210      	movs	r2, #16
 80028de:	701a      	strb	r2, [r3, #0]
 80028e0:	e005      	b.n	80028ee <UART_SetConfig+0x22a>
 80028e2:	231b      	movs	r3, #27
 80028e4:	2218      	movs	r2, #24
 80028e6:	189b      	adds	r3, r3, r2
 80028e8:	19db      	adds	r3, r3, r7
 80028ea:	2210      	movs	r2, #16
 80028ec:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a46      	ldr	r2, [pc, #280]	; (8002a0c <UART_SetConfig+0x348>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d000      	beq.n	80028fa <UART_SetConfig+0x236>
 80028f8:	e09a      	b.n	8002a30 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80028fa:	231b      	movs	r3, #27
 80028fc:	2218      	movs	r2, #24
 80028fe:	189b      	adds	r3, r3, r2
 8002900:	19db      	adds	r3, r3, r7
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b08      	cmp	r3, #8
 8002906:	d01d      	beq.n	8002944 <UART_SetConfig+0x280>
 8002908:	dc20      	bgt.n	800294c <UART_SetConfig+0x288>
 800290a:	2b04      	cmp	r3, #4
 800290c:	d015      	beq.n	800293a <UART_SetConfig+0x276>
 800290e:	dc1d      	bgt.n	800294c <UART_SetConfig+0x288>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d002      	beq.n	800291a <UART_SetConfig+0x256>
 8002914:	2b02      	cmp	r3, #2
 8002916:	d005      	beq.n	8002924 <UART_SetConfig+0x260>
 8002918:	e018      	b.n	800294c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800291a:	f7ff fc57 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 800291e:	0003      	movs	r3, r0
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002922:	e01c      	b.n	800295e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002924:	4b3c      	ldr	r3, [pc, #240]	; (8002a18 <UART_SetConfig+0x354>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2210      	movs	r2, #16
 800292a:	4013      	ands	r3, r2
 800292c:	d002      	beq.n	8002934 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800292e:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <UART_SetConfig+0x364>)
 8002930:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002932:	e014      	b.n	800295e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002934:	4b3d      	ldr	r3, [pc, #244]	; (8002a2c <UART_SetConfig+0x368>)
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002938:	e011      	b.n	800295e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800293a:	f7ff fb97 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800293e:	0003      	movs	r3, r0
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002942:	e00c      	b.n	800295e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	021b      	lsls	r3, r3, #8
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800294a:	e008      	b.n	800295e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002950:	231a      	movs	r3, #26
 8002952:	2218      	movs	r2, #24
 8002954:	189b      	adds	r3, r3, r2
 8002956:	19db      	adds	r3, r3, r7
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
        break;
 800295c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	2b00      	cmp	r3, #0
 8002962:	d100      	bne.n	8002966 <UART_SetConfig+0x2a2>
 8002964:	e133      	b.n	8002bce <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	0013      	movs	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	189b      	adds	r3, r3, r2
 8002970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002972:	429a      	cmp	r2, r3
 8002974:	d305      	bcc.n	8002982 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800297c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800297e:	429a      	cmp	r2, r3
 8002980:	d906      	bls.n	8002990 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002982:	231a      	movs	r3, #26
 8002984:	2218      	movs	r2, #24
 8002986:	189b      	adds	r3, r3, r2
 8002988:	19db      	adds	r3, r3, r7
 800298a:	2201      	movs	r2, #1
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	e11e      	b.n	8002bce <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	6939      	ldr	r1, [r7, #16]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	000b      	movs	r3, r1
 800299e:	0e1b      	lsrs	r3, r3, #24
 80029a0:	0010      	movs	r0, r2
 80029a2:	0205      	lsls	r5, r0, #8
 80029a4:	431d      	orrs	r5, r3
 80029a6:	000b      	movs	r3, r1
 80029a8:	021c      	lsls	r4, r3, #8
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	68b8      	ldr	r0, [r7, #8]
 80029b8:	68f9      	ldr	r1, [r7, #12]
 80029ba:	1900      	adds	r0, r0, r4
 80029bc:	4169      	adcs	r1, r5
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	2300      	movs	r3, #0
 80029c6:	607b      	str	r3, [r7, #4]
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f7fd fc32 	bl	8000234 <__aeabi_uldivmod>
 80029d0:	0002      	movs	r2, r0
 80029d2:	000b      	movs	r3, r1
 80029d4:	0013      	movs	r3, r2
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029da:	23c0      	movs	r3, #192	; 0xc0
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	429a      	cmp	r2, r3
 80029e0:	d309      	bcc.n	80029f6 <UART_SetConfig+0x332>
 80029e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	035b      	lsls	r3, r3, #13
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d204      	bcs.n	80029f6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	e0eb      	b.n	8002bce <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80029f6:	231a      	movs	r3, #26
 80029f8:	2218      	movs	r2, #24
 80029fa:	189b      	adds	r3, r3, r2
 80029fc:	19db      	adds	r3, r3, r7
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e0e4      	b.n	8002bce <UART_SetConfig+0x50a>
 8002a04:	efff69f3 	.word	0xefff69f3
 8002a08:	ffffcfff 	.word	0xffffcfff
 8002a0c:	40004800 	.word	0x40004800
 8002a10:	fffff4ff 	.word	0xfffff4ff
 8002a14:	40013800 	.word	0x40013800
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40004400 	.word	0x40004400
 8002a20:	40004c00 	.word	0x40004c00
 8002a24:	40005000 	.word	0x40005000
 8002a28:	003d0900 	.word	0x003d0900
 8002a2c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	021b      	lsls	r3, r3, #8
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d000      	beq.n	8002a3e <UART_SetConfig+0x37a>
 8002a3c:	e070      	b.n	8002b20 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8002a3e:	231b      	movs	r3, #27
 8002a40:	2218      	movs	r2, #24
 8002a42:	189b      	adds	r3, r3, r2
 8002a44:	19db      	adds	r3, r3, r7
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d822      	bhi.n	8002a92 <UART_SetConfig+0x3ce>
 8002a4c:	009a      	lsls	r2, r3, #2
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <UART_SetConfig+0x528>)
 8002a50:	18d3      	adds	r3, r2, r3
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a56:	f7ff fbb9 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 8002a5a:	0003      	movs	r3, r0
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a5e:	e021      	b.n	8002aa4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a60:	f7ff fbca 	bl	80021f8 <HAL_RCC_GetPCLK2Freq>
 8002a64:	0003      	movs	r3, r0
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a68:	e01c      	b.n	8002aa4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a6a:	4b61      	ldr	r3, [pc, #388]	; (8002bf0 <UART_SetConfig+0x52c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2210      	movs	r2, #16
 8002a70:	4013      	ands	r3, r2
 8002a72:	d002      	beq.n	8002a7a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002a74:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <UART_SetConfig+0x530>)
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002a78:	e014      	b.n	8002aa4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8002a7a:	4b5f      	ldr	r3, [pc, #380]	; (8002bf8 <UART_SetConfig+0x534>)
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a7e:	e011      	b.n	8002aa4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a80:	f7ff faf4 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002a84:	0003      	movs	r3, r0
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a88:	e00c      	b.n	8002aa4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	021b      	lsls	r3, r3, #8
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002a90:	e008      	b.n	8002aa4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002a96:	231a      	movs	r3, #26
 8002a98:	2218      	movs	r2, #24
 8002a9a:	189b      	adds	r3, r3, r2
 8002a9c:	19db      	adds	r3, r3, r7
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
        break;
 8002aa2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d100      	bne.n	8002aac <UART_SetConfig+0x3e8>
 8002aaa:	e090      	b.n	8002bce <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aae:	005a      	lsls	r2, r3, #1
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	085b      	lsrs	r3, r3, #1
 8002ab6:	18d2      	adds	r2, r2, r3
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	0019      	movs	r1, r3
 8002abe:	0010      	movs	r0, r2
 8002ac0:	f7fd fb2c 	bl	800011c <__udivsi3>
 8002ac4:	0003      	movs	r3, r0
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aca:	2b0f      	cmp	r3, #15
 8002acc:	d921      	bls.n	8002b12 <UART_SetConfig+0x44e>
 8002ace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	025b      	lsls	r3, r3, #9
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d21c      	bcs.n	8002b12 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	200e      	movs	r0, #14
 8002ade:	2418      	movs	r4, #24
 8002ae0:	1903      	adds	r3, r0, r4
 8002ae2:	19db      	adds	r3, r3, r7
 8002ae4:	210f      	movs	r1, #15
 8002ae6:	438a      	bics	r2, r1
 8002ae8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aec:	085b      	lsrs	r3, r3, #1
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2207      	movs	r2, #7
 8002af2:	4013      	ands	r3, r2
 8002af4:	b299      	uxth	r1, r3
 8002af6:	1903      	adds	r3, r0, r4
 8002af8:	19db      	adds	r3, r3, r7
 8002afa:	1902      	adds	r2, r0, r4
 8002afc:	19d2      	adds	r2, r2, r7
 8002afe:	8812      	ldrh	r2, [r2, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1902      	adds	r2, r0, r4
 8002b0a:	19d2      	adds	r2, r2, r7
 8002b0c:	8812      	ldrh	r2, [r2, #0]
 8002b0e:	60da      	str	r2, [r3, #12]
 8002b10:	e05d      	b.n	8002bce <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002b12:	231a      	movs	r3, #26
 8002b14:	2218      	movs	r2, #24
 8002b16:	189b      	adds	r3, r3, r2
 8002b18:	19db      	adds	r3, r3, r7
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	701a      	strb	r2, [r3, #0]
 8002b1e:	e056      	b.n	8002bce <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b20:	231b      	movs	r3, #27
 8002b22:	2218      	movs	r2, #24
 8002b24:	189b      	adds	r3, r3, r2
 8002b26:	19db      	adds	r3, r3, r7
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d822      	bhi.n	8002b74 <UART_SetConfig+0x4b0>
 8002b2e:	009a      	lsls	r2, r3, #2
 8002b30:	4b32      	ldr	r3, [pc, #200]	; (8002bfc <UART_SetConfig+0x538>)
 8002b32:	18d3      	adds	r3, r2, r3
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b38:	f7ff fb48 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b40:	e021      	b.n	8002b86 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b42:	f7ff fb59 	bl	80021f8 <HAL_RCC_GetPCLK2Freq>
 8002b46:	0003      	movs	r3, r0
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b4a:	e01c      	b.n	8002b86 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b4c:	4b28      	ldr	r3, [pc, #160]	; (8002bf0 <UART_SetConfig+0x52c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2210      	movs	r2, #16
 8002b52:	4013      	ands	r3, r2
 8002b54:	d002      	beq.n	8002b5c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002b56:	4b27      	ldr	r3, [pc, #156]	; (8002bf4 <UART_SetConfig+0x530>)
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002b5a:	e014      	b.n	8002b86 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8002b5c:	4b26      	ldr	r3, [pc, #152]	; (8002bf8 <UART_SetConfig+0x534>)
 8002b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b60:	e011      	b.n	8002b86 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b62:	f7ff fa83 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002b66:	0003      	movs	r3, r0
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b6a:	e00c      	b.n	8002b86 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002b72:	e008      	b.n	8002b86 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8002b74:	2300      	movs	r3, #0
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002b78:	231a      	movs	r3, #26
 8002b7a:	2218      	movs	r2, #24
 8002b7c:	189b      	adds	r3, r3, r2
 8002b7e:	19db      	adds	r3, r3, r7
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
        break;
 8002b84:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d020      	beq.n	8002bce <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	085a      	lsrs	r2, r3, #1
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	18d2      	adds	r2, r2, r3
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	0019      	movs	r1, r3
 8002b9c:	0010      	movs	r0, r2
 8002b9e:	f7fd fabd 	bl	800011c <__udivsi3>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba8:	2b0f      	cmp	r3, #15
 8002baa:	d90a      	bls.n	8002bc2 <UART_SetConfig+0x4fe>
 8002bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bae:	2380      	movs	r3, #128	; 0x80
 8002bb0:	025b      	lsls	r3, r3, #9
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d205      	bcs.n	8002bc2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	e005      	b.n	8002bce <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8002bc2:	231a      	movs	r3, #26
 8002bc4:	2218      	movs	r2, #24
 8002bc6:	189b      	adds	r3, r3, r2
 8002bc8:	19db      	adds	r3, r3, r7
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002bda:	231a      	movs	r3, #26
 8002bdc:	2218      	movs	r2, #24
 8002bde:	189b      	adds	r3, r3, r2
 8002be0:	19db      	adds	r3, r3, r7
 8002be2:	781b      	ldrb	r3, [r3, #0]
}
 8002be4:	0018      	movs	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	b00e      	add	sp, #56	; 0x38
 8002bea:	bdb0      	pop	{r4, r5, r7, pc}
 8002bec:	080039f8 	.word	0x080039f8
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	003d0900 	.word	0x003d0900
 8002bf8:	00f42400 	.word	0x00f42400
 8002bfc:	08003a1c 	.word	0x08003a1c

08002c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d00b      	beq.n	8002c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4a4a      	ldr	r2, [pc, #296]	; (8002d44 <UART_AdvFeatureConfig+0x144>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	0019      	movs	r1, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	2202      	movs	r2, #2
 8002c30:	4013      	ands	r3, r2
 8002c32:	d00b      	beq.n	8002c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	4a43      	ldr	r2, [pc, #268]	; (8002d48 <UART_AdvFeatureConfig+0x148>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2204      	movs	r2, #4
 8002c52:	4013      	ands	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a3b      	ldr	r2, [pc, #236]	; (8002d4c <UART_AdvFeatureConfig+0x14c>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	0019      	movs	r1, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	2208      	movs	r2, #8
 8002c74:	4013      	ands	r3, r2
 8002c76:	d00b      	beq.n	8002c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a34      	ldr	r2, [pc, #208]	; (8002d50 <UART_AdvFeatureConfig+0x150>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	0019      	movs	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	2210      	movs	r2, #16
 8002c96:	4013      	ands	r3, r2
 8002c98:	d00b      	beq.n	8002cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	4a2c      	ldr	r2, [pc, #176]	; (8002d54 <UART_AdvFeatureConfig+0x154>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	0019      	movs	r1, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d00b      	beq.n	8002cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	4a25      	ldr	r2, [pc, #148]	; (8002d58 <UART_AdvFeatureConfig+0x158>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd8:	2240      	movs	r2, #64	; 0x40
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d01d      	beq.n	8002d1a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <UART_AdvFeatureConfig+0x15c>)
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	0019      	movs	r1, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cfa:	2380      	movs	r3, #128	; 0x80
 8002cfc:	035b      	lsls	r3, r3, #13
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d10b      	bne.n	8002d1a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	4a15      	ldr	r2, [pc, #84]	; (8002d60 <UART_AdvFeatureConfig+0x160>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	2280      	movs	r2, #128	; 0x80
 8002d20:	4013      	ands	r3, r2
 8002d22:	d00b      	beq.n	8002d3c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	4a0e      	ldr	r2, [pc, #56]	; (8002d64 <UART_AdvFeatureConfig+0x164>)
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	0019      	movs	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	605a      	str	r2, [r3, #4]
  }
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	fffdffff 	.word	0xfffdffff
 8002d48:	fffeffff 	.word	0xfffeffff
 8002d4c:	fffbffff 	.word	0xfffbffff
 8002d50:	ffff7fff 	.word	0xffff7fff
 8002d54:	ffffefff 	.word	0xffffefff
 8002d58:	ffffdfff 	.word	0xffffdfff
 8002d5c:	ffefffff 	.word	0xffefffff
 8002d60:	ff9fffff 	.word	0xff9fffff
 8002d64:	fff7ffff 	.word	0xfff7ffff

08002d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b092      	sub	sp, #72	; 0x48
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2284      	movs	r2, #132	; 0x84
 8002d74:	2100      	movs	r1, #0
 8002d76:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d78:	f7fd fe7e 	bl	8000a78 <HAL_GetTick>
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2208      	movs	r2, #8
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d12c      	bne.n	8002de8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	0391      	lsls	r1, r2, #14
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4a46      	ldr	r2, [pc, #280]	; (8002eb0 <UART_CheckIdleState+0x148>)
 8002d98:	9200      	str	r2, [sp, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f000 f88c 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002da0:	1e03      	subs	r3, r0, #0
 8002da2:	d021      	beq.n	8002de8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da4:	f3ef 8310 	mrs	r3, PRIMASK
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002dac:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dae:	2301      	movs	r3, #1
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db4:	f383 8810 	msr	PRIMASK, r3
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	438a      	bics	r2, r1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	f383 8810 	msr	PRIMASK, r3
}
 8002dd4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2278      	movs	r2, #120	; 0x78
 8002de0:	2100      	movs	r1, #0
 8002de2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e05f      	b.n	8002ea8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2204      	movs	r2, #4
 8002df0:	4013      	ands	r3, r2
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d146      	bne.n	8002e84 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df8:	2280      	movs	r2, #128	; 0x80
 8002dfa:	03d1      	lsls	r1, r2, #15
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4a2c      	ldr	r2, [pc, #176]	; (8002eb0 <UART_CheckIdleState+0x148>)
 8002e00:	9200      	str	r2, [sp, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f000 f858 	bl	8002eb8 <UART_WaitOnFlagUntilTimeout>
 8002e08:	1e03      	subs	r3, r0, #0
 8002e0a:	d03b      	beq.n	8002e84 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002e10:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e12:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e14:	637b      	str	r3, [r7, #52]	; 0x34
 8002e16:	2301      	movs	r3, #1
 8002e18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f383 8810 	msr	PRIMASK, r3
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4921      	ldr	r1, [pc, #132]	; (8002eb4 <UART_CheckIdleState+0x14c>)
 8002e2e:	400a      	ands	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f383 8810 	msr	PRIMASK, r3
}
 8002e3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e42:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e44:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e46:	633b      	str	r3, [r7, #48]	; 0x30
 8002e48:	2301      	movs	r3, #1
 8002e4a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f383 8810 	msr	PRIMASK, r3
}
 8002e52:	46c0      	nop			; (mov r8, r8)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689a      	ldr	r2, [r3, #8]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2101      	movs	r1, #1
 8002e60:	438a      	bics	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e66:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	2120      	movs	r1, #32
 8002e76:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2278      	movs	r2, #120	; 0x78
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e011      	b.n	8002ea8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	2120      	movs	r1, #32
 8002e90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2278      	movs	r2, #120	; 0x78
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b010      	add	sp, #64	; 0x40
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	01ffffff 	.word	0x01ffffff
 8002eb4:	fffffedf 	.word	0xfffffedf

08002eb8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	1dfb      	adds	r3, r7, #7
 8002ec6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ec8:	e04b      	b.n	8002f62 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	d048      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed0:	f7fd fdd2 	bl	8000a78 <HAL_GetTick>
 8002ed4:	0002      	movs	r2, r0
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e04b      	b.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2204      	movs	r2, #4
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d035      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2208      	movs	r2, #8
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d111      	bne.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2208      	movs	r2, #8
 8002f0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f000 f83c 	bl	8002f8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2284      	movs	r2, #132	; 0x84
 8002f18:	2108      	movs	r1, #8
 8002f1a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2278      	movs	r2, #120	; 0x78
 8002f20:	2100      	movs	r1, #0
 8002f22:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e02c      	b.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69da      	ldr	r2, [r3, #28]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	401a      	ands	r2, r3
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d112      	bne.n	8002f62 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2280      	movs	r2, #128	; 0x80
 8002f42:	0112      	lsls	r2, r2, #4
 8002f44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 f81f 	bl	8002f8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2284      	movs	r2, #132	; 0x84
 8002f52:	2120      	movs	r1, #32
 8002f54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2278      	movs	r2, #120	; 0x78
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e00f      	b.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	425a      	negs	r2, r3
 8002f72:	4153      	adcs	r3, r2
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	001a      	movs	r2, r3
 8002f78:	1dfb      	adds	r3, r7, #7
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d0a4      	beq.n	8002eca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b004      	add	sp, #16
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08e      	sub	sp, #56	; 0x38
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f94:	f3ef 8310 	mrs	r3, PRIMASK
 8002f98:	617b      	str	r3, [r7, #20]
  return(result);
 8002f9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f383 8810 	msr	PRIMASK, r3
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4926      	ldr	r1, [pc, #152]	; (8003050 <UART_EndRxTransfer+0xc4>)
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f383 8810 	msr	PRIMASK, r3
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fca:	623b      	str	r3, [r7, #32]
  return(result);
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	f383 8810 	msr	PRIMASK, r3
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	438a      	bics	r2, r1
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	f383 8810 	msr	PRIMASK, r3
}
 8002ff6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d118      	bne.n	8003032 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003000:	f3ef 8310 	mrs	r3, PRIMASK
 8003004:	60bb      	str	r3, [r7, #8]
  return(result);
 8003006:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300a:	2301      	movs	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2110      	movs	r1, #16
 8003022:	438a      	bics	r2, r1
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f383 8810 	msr	PRIMASK, r3
}
 8003030:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	2120      	movs	r1, #32
 8003038:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b00e      	add	sp, #56	; 0x38
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	fffffedf 	.word	0xfffffedf

08003054 <__errno>:
 8003054:	4b01      	ldr	r3, [pc, #4]	; (800305c <__errno+0x8>)
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	4770      	bx	lr
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	2000000c 	.word	0x2000000c

08003060 <__libc_init_array>:
 8003060:	b570      	push	{r4, r5, r6, lr}
 8003062:	2600      	movs	r6, #0
 8003064:	4d0c      	ldr	r5, [pc, #48]	; (8003098 <__libc_init_array+0x38>)
 8003066:	4c0d      	ldr	r4, [pc, #52]	; (800309c <__libc_init_array+0x3c>)
 8003068:	1b64      	subs	r4, r4, r5
 800306a:	10a4      	asrs	r4, r4, #2
 800306c:	42a6      	cmp	r6, r4
 800306e:	d109      	bne.n	8003084 <__libc_init_array+0x24>
 8003070:	2600      	movs	r6, #0
 8003072:	f000 fc9f 	bl	80039b4 <_init>
 8003076:	4d0a      	ldr	r5, [pc, #40]	; (80030a0 <__libc_init_array+0x40>)
 8003078:	4c0a      	ldr	r4, [pc, #40]	; (80030a4 <__libc_init_array+0x44>)
 800307a:	1b64      	subs	r4, r4, r5
 800307c:	10a4      	asrs	r4, r4, #2
 800307e:	42a6      	cmp	r6, r4
 8003080:	d105      	bne.n	800308e <__libc_init_array+0x2e>
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	00b3      	lsls	r3, r6, #2
 8003086:	58eb      	ldr	r3, [r5, r3]
 8003088:	4798      	blx	r3
 800308a:	3601      	adds	r6, #1
 800308c:	e7ee      	b.n	800306c <__libc_init_array+0xc>
 800308e:	00b3      	lsls	r3, r6, #2
 8003090:	58eb      	ldr	r3, [r5, r3]
 8003092:	4798      	blx	r3
 8003094:	3601      	adds	r6, #1
 8003096:	e7f2      	b.n	800307e <__libc_init_array+0x1e>
 8003098:	08003a7c 	.word	0x08003a7c
 800309c:	08003a7c 	.word	0x08003a7c
 80030a0:	08003a7c 	.word	0x08003a7c
 80030a4:	08003a80 	.word	0x08003a80

080030a8 <memset>:
 80030a8:	0003      	movs	r3, r0
 80030aa:	1882      	adds	r2, r0, r2
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d100      	bne.n	80030b2 <memset+0xa>
 80030b0:	4770      	bx	lr
 80030b2:	7019      	strb	r1, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	e7f9      	b.n	80030ac <memset+0x4>

080030b8 <sniprintf>:
 80030b8:	b40c      	push	{r2, r3}
 80030ba:	b530      	push	{r4, r5, lr}
 80030bc:	4b17      	ldr	r3, [pc, #92]	; (800311c <sniprintf+0x64>)
 80030be:	000c      	movs	r4, r1
 80030c0:	681d      	ldr	r5, [r3, #0]
 80030c2:	b09d      	sub	sp, #116	; 0x74
 80030c4:	2900      	cmp	r1, #0
 80030c6:	da08      	bge.n	80030da <sniprintf+0x22>
 80030c8:	238b      	movs	r3, #139	; 0x8b
 80030ca:	2001      	movs	r0, #1
 80030cc:	602b      	str	r3, [r5, #0]
 80030ce:	4240      	negs	r0, r0
 80030d0:	b01d      	add	sp, #116	; 0x74
 80030d2:	bc30      	pop	{r4, r5}
 80030d4:	bc08      	pop	{r3}
 80030d6:	b002      	add	sp, #8
 80030d8:	4718      	bx	r3
 80030da:	2382      	movs	r3, #130	; 0x82
 80030dc:	466a      	mov	r2, sp
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	8293      	strh	r3, [r2, #20]
 80030e2:	2300      	movs	r3, #0
 80030e4:	9002      	str	r0, [sp, #8]
 80030e6:	9006      	str	r0, [sp, #24]
 80030e8:	4299      	cmp	r1, r3
 80030ea:	d000      	beq.n	80030ee <sniprintf+0x36>
 80030ec:	1e4b      	subs	r3, r1, #1
 80030ee:	9304      	str	r3, [sp, #16]
 80030f0:	9307      	str	r3, [sp, #28]
 80030f2:	2301      	movs	r3, #1
 80030f4:	466a      	mov	r2, sp
 80030f6:	425b      	negs	r3, r3
 80030f8:	82d3      	strh	r3, [r2, #22]
 80030fa:	0028      	movs	r0, r5
 80030fc:	ab21      	add	r3, sp, #132	; 0x84
 80030fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003100:	a902      	add	r1, sp, #8
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	f000 f86e 	bl	80031e4 <_svfiprintf_r>
 8003108:	1c43      	adds	r3, r0, #1
 800310a:	da01      	bge.n	8003110 <sniprintf+0x58>
 800310c:	238b      	movs	r3, #139	; 0x8b
 800310e:	602b      	str	r3, [r5, #0]
 8003110:	2c00      	cmp	r4, #0
 8003112:	d0dd      	beq.n	80030d0 <sniprintf+0x18>
 8003114:	2300      	movs	r3, #0
 8003116:	9a02      	ldr	r2, [sp, #8]
 8003118:	7013      	strb	r3, [r2, #0]
 800311a:	e7d9      	b.n	80030d0 <sniprintf+0x18>
 800311c:	2000000c 	.word	0x2000000c

08003120 <__ssputs_r>:
 8003120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003122:	688e      	ldr	r6, [r1, #8]
 8003124:	b085      	sub	sp, #20
 8003126:	0007      	movs	r7, r0
 8003128:	000c      	movs	r4, r1
 800312a:	9203      	str	r2, [sp, #12]
 800312c:	9301      	str	r3, [sp, #4]
 800312e:	429e      	cmp	r6, r3
 8003130:	d83c      	bhi.n	80031ac <__ssputs_r+0x8c>
 8003132:	2390      	movs	r3, #144	; 0x90
 8003134:	898a      	ldrh	r2, [r1, #12]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	421a      	tst	r2, r3
 800313a:	d034      	beq.n	80031a6 <__ssputs_r+0x86>
 800313c:	6909      	ldr	r1, [r1, #16]
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	6960      	ldr	r0, [r4, #20]
 8003142:	1a5b      	subs	r3, r3, r1
 8003144:	9302      	str	r3, [sp, #8]
 8003146:	2303      	movs	r3, #3
 8003148:	4343      	muls	r3, r0
 800314a:	0fdd      	lsrs	r5, r3, #31
 800314c:	18ed      	adds	r5, r5, r3
 800314e:	9b01      	ldr	r3, [sp, #4]
 8003150:	9802      	ldr	r0, [sp, #8]
 8003152:	3301      	adds	r3, #1
 8003154:	181b      	adds	r3, r3, r0
 8003156:	106d      	asrs	r5, r5, #1
 8003158:	42ab      	cmp	r3, r5
 800315a:	d900      	bls.n	800315e <__ssputs_r+0x3e>
 800315c:	001d      	movs	r5, r3
 800315e:	0553      	lsls	r3, r2, #21
 8003160:	d532      	bpl.n	80031c8 <__ssputs_r+0xa8>
 8003162:	0029      	movs	r1, r5
 8003164:	0038      	movs	r0, r7
 8003166:	f000 fb53 	bl	8003810 <_malloc_r>
 800316a:	1e06      	subs	r6, r0, #0
 800316c:	d109      	bne.n	8003182 <__ssputs_r+0x62>
 800316e:	230c      	movs	r3, #12
 8003170:	603b      	str	r3, [r7, #0]
 8003172:	2340      	movs	r3, #64	; 0x40
 8003174:	2001      	movs	r0, #1
 8003176:	89a2      	ldrh	r2, [r4, #12]
 8003178:	4240      	negs	r0, r0
 800317a:	4313      	orrs	r3, r2
 800317c:	81a3      	strh	r3, [r4, #12]
 800317e:	b005      	add	sp, #20
 8003180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003182:	9a02      	ldr	r2, [sp, #8]
 8003184:	6921      	ldr	r1, [r4, #16]
 8003186:	f000 faba 	bl	80036fe <memcpy>
 800318a:	89a3      	ldrh	r3, [r4, #12]
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <__ssputs_r+0xc0>)
 800318e:	401a      	ands	r2, r3
 8003190:	2380      	movs	r3, #128	; 0x80
 8003192:	4313      	orrs	r3, r2
 8003194:	81a3      	strh	r3, [r4, #12]
 8003196:	9b02      	ldr	r3, [sp, #8]
 8003198:	6126      	str	r6, [r4, #16]
 800319a:	18f6      	adds	r6, r6, r3
 800319c:	6026      	str	r6, [r4, #0]
 800319e:	6165      	str	r5, [r4, #20]
 80031a0:	9e01      	ldr	r6, [sp, #4]
 80031a2:	1aed      	subs	r5, r5, r3
 80031a4:	60a5      	str	r5, [r4, #8]
 80031a6:	9b01      	ldr	r3, [sp, #4]
 80031a8:	429e      	cmp	r6, r3
 80031aa:	d900      	bls.n	80031ae <__ssputs_r+0x8e>
 80031ac:	9e01      	ldr	r6, [sp, #4]
 80031ae:	0032      	movs	r2, r6
 80031b0:	9903      	ldr	r1, [sp, #12]
 80031b2:	6820      	ldr	r0, [r4, #0]
 80031b4:	f000 faac 	bl	8003710 <memmove>
 80031b8:	68a3      	ldr	r3, [r4, #8]
 80031ba:	2000      	movs	r0, #0
 80031bc:	1b9b      	subs	r3, r3, r6
 80031be:	60a3      	str	r3, [r4, #8]
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	199e      	adds	r6, r3, r6
 80031c4:	6026      	str	r6, [r4, #0]
 80031c6:	e7da      	b.n	800317e <__ssputs_r+0x5e>
 80031c8:	002a      	movs	r2, r5
 80031ca:	0038      	movs	r0, r7
 80031cc:	f000 fb96 	bl	80038fc <_realloc_r>
 80031d0:	1e06      	subs	r6, r0, #0
 80031d2:	d1e0      	bne.n	8003196 <__ssputs_r+0x76>
 80031d4:	0038      	movs	r0, r7
 80031d6:	6921      	ldr	r1, [r4, #16]
 80031d8:	f000 faae 	bl	8003738 <_free_r>
 80031dc:	e7c7      	b.n	800316e <__ssputs_r+0x4e>
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	fffffb7f 	.word	0xfffffb7f

080031e4 <_svfiprintf_r>:
 80031e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e6:	b0a1      	sub	sp, #132	; 0x84
 80031e8:	9003      	str	r0, [sp, #12]
 80031ea:	001d      	movs	r5, r3
 80031ec:	898b      	ldrh	r3, [r1, #12]
 80031ee:	000f      	movs	r7, r1
 80031f0:	0016      	movs	r6, r2
 80031f2:	061b      	lsls	r3, r3, #24
 80031f4:	d511      	bpl.n	800321a <_svfiprintf_r+0x36>
 80031f6:	690b      	ldr	r3, [r1, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10e      	bne.n	800321a <_svfiprintf_r+0x36>
 80031fc:	2140      	movs	r1, #64	; 0x40
 80031fe:	f000 fb07 	bl	8003810 <_malloc_r>
 8003202:	6038      	str	r0, [r7, #0]
 8003204:	6138      	str	r0, [r7, #16]
 8003206:	2800      	cmp	r0, #0
 8003208:	d105      	bne.n	8003216 <_svfiprintf_r+0x32>
 800320a:	230c      	movs	r3, #12
 800320c:	9a03      	ldr	r2, [sp, #12]
 800320e:	3801      	subs	r0, #1
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	b021      	add	sp, #132	; 0x84
 8003214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003216:	2340      	movs	r3, #64	; 0x40
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	2300      	movs	r3, #0
 800321c:	ac08      	add	r4, sp, #32
 800321e:	6163      	str	r3, [r4, #20]
 8003220:	3320      	adds	r3, #32
 8003222:	7663      	strb	r3, [r4, #25]
 8003224:	3310      	adds	r3, #16
 8003226:	76a3      	strb	r3, [r4, #26]
 8003228:	9507      	str	r5, [sp, #28]
 800322a:	0035      	movs	r5, r6
 800322c:	782b      	ldrb	r3, [r5, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <_svfiprintf_r+0x52>
 8003232:	2b25      	cmp	r3, #37	; 0x25
 8003234:	d147      	bne.n	80032c6 <_svfiprintf_r+0xe2>
 8003236:	1bab      	subs	r3, r5, r6
 8003238:	9305      	str	r3, [sp, #20]
 800323a:	42b5      	cmp	r5, r6
 800323c:	d00c      	beq.n	8003258 <_svfiprintf_r+0x74>
 800323e:	0032      	movs	r2, r6
 8003240:	0039      	movs	r1, r7
 8003242:	9803      	ldr	r0, [sp, #12]
 8003244:	f7ff ff6c 	bl	8003120 <__ssputs_r>
 8003248:	1c43      	adds	r3, r0, #1
 800324a:	d100      	bne.n	800324e <_svfiprintf_r+0x6a>
 800324c:	e0ae      	b.n	80033ac <_svfiprintf_r+0x1c8>
 800324e:	6962      	ldr	r2, [r4, #20]
 8003250:	9b05      	ldr	r3, [sp, #20]
 8003252:	4694      	mov	ip, r2
 8003254:	4463      	add	r3, ip
 8003256:	6163      	str	r3, [r4, #20]
 8003258:	782b      	ldrb	r3, [r5, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d100      	bne.n	8003260 <_svfiprintf_r+0x7c>
 800325e:	e0a5      	b.n	80033ac <_svfiprintf_r+0x1c8>
 8003260:	2201      	movs	r2, #1
 8003262:	2300      	movs	r3, #0
 8003264:	4252      	negs	r2, r2
 8003266:	6062      	str	r2, [r4, #4]
 8003268:	a904      	add	r1, sp, #16
 800326a:	3254      	adds	r2, #84	; 0x54
 800326c:	1852      	adds	r2, r2, r1
 800326e:	1c6e      	adds	r6, r5, #1
 8003270:	6023      	str	r3, [r4, #0]
 8003272:	60e3      	str	r3, [r4, #12]
 8003274:	60a3      	str	r3, [r4, #8]
 8003276:	7013      	strb	r3, [r2, #0]
 8003278:	65a3      	str	r3, [r4, #88]	; 0x58
 800327a:	2205      	movs	r2, #5
 800327c:	7831      	ldrb	r1, [r6, #0]
 800327e:	4854      	ldr	r0, [pc, #336]	; (80033d0 <_svfiprintf_r+0x1ec>)
 8003280:	f000 fa32 	bl	80036e8 <memchr>
 8003284:	1c75      	adds	r5, r6, #1
 8003286:	2800      	cmp	r0, #0
 8003288:	d11f      	bne.n	80032ca <_svfiprintf_r+0xe6>
 800328a:	6822      	ldr	r2, [r4, #0]
 800328c:	06d3      	lsls	r3, r2, #27
 800328e:	d504      	bpl.n	800329a <_svfiprintf_r+0xb6>
 8003290:	2353      	movs	r3, #83	; 0x53
 8003292:	a904      	add	r1, sp, #16
 8003294:	185b      	adds	r3, r3, r1
 8003296:	2120      	movs	r1, #32
 8003298:	7019      	strb	r1, [r3, #0]
 800329a:	0713      	lsls	r3, r2, #28
 800329c:	d504      	bpl.n	80032a8 <_svfiprintf_r+0xc4>
 800329e:	2353      	movs	r3, #83	; 0x53
 80032a0:	a904      	add	r1, sp, #16
 80032a2:	185b      	adds	r3, r3, r1
 80032a4:	212b      	movs	r1, #43	; 0x2b
 80032a6:	7019      	strb	r1, [r3, #0]
 80032a8:	7833      	ldrb	r3, [r6, #0]
 80032aa:	2b2a      	cmp	r3, #42	; 0x2a
 80032ac:	d016      	beq.n	80032dc <_svfiprintf_r+0xf8>
 80032ae:	0035      	movs	r5, r6
 80032b0:	2100      	movs	r1, #0
 80032b2:	200a      	movs	r0, #10
 80032b4:	68e3      	ldr	r3, [r4, #12]
 80032b6:	782a      	ldrb	r2, [r5, #0]
 80032b8:	1c6e      	adds	r6, r5, #1
 80032ba:	3a30      	subs	r2, #48	; 0x30
 80032bc:	2a09      	cmp	r2, #9
 80032be:	d94e      	bls.n	800335e <_svfiprintf_r+0x17a>
 80032c0:	2900      	cmp	r1, #0
 80032c2:	d111      	bne.n	80032e8 <_svfiprintf_r+0x104>
 80032c4:	e017      	b.n	80032f6 <_svfiprintf_r+0x112>
 80032c6:	3501      	adds	r5, #1
 80032c8:	e7b0      	b.n	800322c <_svfiprintf_r+0x48>
 80032ca:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <_svfiprintf_r+0x1ec>)
 80032cc:	6822      	ldr	r2, [r4, #0]
 80032ce:	1ac0      	subs	r0, r0, r3
 80032d0:	2301      	movs	r3, #1
 80032d2:	4083      	lsls	r3, r0
 80032d4:	4313      	orrs	r3, r2
 80032d6:	002e      	movs	r6, r5
 80032d8:	6023      	str	r3, [r4, #0]
 80032da:	e7ce      	b.n	800327a <_svfiprintf_r+0x96>
 80032dc:	9b07      	ldr	r3, [sp, #28]
 80032de:	1d19      	adds	r1, r3, #4
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	9107      	str	r1, [sp, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	db01      	blt.n	80032ec <_svfiprintf_r+0x108>
 80032e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80032ea:	e004      	b.n	80032f6 <_svfiprintf_r+0x112>
 80032ec:	425b      	negs	r3, r3
 80032ee:	60e3      	str	r3, [r4, #12]
 80032f0:	2302      	movs	r3, #2
 80032f2:	4313      	orrs	r3, r2
 80032f4:	6023      	str	r3, [r4, #0]
 80032f6:	782b      	ldrb	r3, [r5, #0]
 80032f8:	2b2e      	cmp	r3, #46	; 0x2e
 80032fa:	d10a      	bne.n	8003312 <_svfiprintf_r+0x12e>
 80032fc:	786b      	ldrb	r3, [r5, #1]
 80032fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003300:	d135      	bne.n	800336e <_svfiprintf_r+0x18a>
 8003302:	9b07      	ldr	r3, [sp, #28]
 8003304:	3502      	adds	r5, #2
 8003306:	1d1a      	adds	r2, r3, #4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	9207      	str	r2, [sp, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	db2b      	blt.n	8003368 <_svfiprintf_r+0x184>
 8003310:	9309      	str	r3, [sp, #36]	; 0x24
 8003312:	4e30      	ldr	r6, [pc, #192]	; (80033d4 <_svfiprintf_r+0x1f0>)
 8003314:	2203      	movs	r2, #3
 8003316:	0030      	movs	r0, r6
 8003318:	7829      	ldrb	r1, [r5, #0]
 800331a:	f000 f9e5 	bl	80036e8 <memchr>
 800331e:	2800      	cmp	r0, #0
 8003320:	d006      	beq.n	8003330 <_svfiprintf_r+0x14c>
 8003322:	2340      	movs	r3, #64	; 0x40
 8003324:	1b80      	subs	r0, r0, r6
 8003326:	4083      	lsls	r3, r0
 8003328:	6822      	ldr	r2, [r4, #0]
 800332a:	3501      	adds	r5, #1
 800332c:	4313      	orrs	r3, r2
 800332e:	6023      	str	r3, [r4, #0]
 8003330:	7829      	ldrb	r1, [r5, #0]
 8003332:	2206      	movs	r2, #6
 8003334:	4828      	ldr	r0, [pc, #160]	; (80033d8 <_svfiprintf_r+0x1f4>)
 8003336:	1c6e      	adds	r6, r5, #1
 8003338:	7621      	strb	r1, [r4, #24]
 800333a:	f000 f9d5 	bl	80036e8 <memchr>
 800333e:	2800      	cmp	r0, #0
 8003340:	d03c      	beq.n	80033bc <_svfiprintf_r+0x1d8>
 8003342:	4b26      	ldr	r3, [pc, #152]	; (80033dc <_svfiprintf_r+0x1f8>)
 8003344:	2b00      	cmp	r3, #0
 8003346:	d125      	bne.n	8003394 <_svfiprintf_r+0x1b0>
 8003348:	2207      	movs	r2, #7
 800334a:	9b07      	ldr	r3, [sp, #28]
 800334c:	3307      	adds	r3, #7
 800334e:	4393      	bics	r3, r2
 8003350:	3308      	adds	r3, #8
 8003352:	9307      	str	r3, [sp, #28]
 8003354:	6963      	ldr	r3, [r4, #20]
 8003356:	9a04      	ldr	r2, [sp, #16]
 8003358:	189b      	adds	r3, r3, r2
 800335a:	6163      	str	r3, [r4, #20]
 800335c:	e765      	b.n	800322a <_svfiprintf_r+0x46>
 800335e:	4343      	muls	r3, r0
 8003360:	0035      	movs	r5, r6
 8003362:	2101      	movs	r1, #1
 8003364:	189b      	adds	r3, r3, r2
 8003366:	e7a6      	b.n	80032b6 <_svfiprintf_r+0xd2>
 8003368:	2301      	movs	r3, #1
 800336a:	425b      	negs	r3, r3
 800336c:	e7d0      	b.n	8003310 <_svfiprintf_r+0x12c>
 800336e:	2300      	movs	r3, #0
 8003370:	200a      	movs	r0, #10
 8003372:	001a      	movs	r2, r3
 8003374:	3501      	adds	r5, #1
 8003376:	6063      	str	r3, [r4, #4]
 8003378:	7829      	ldrb	r1, [r5, #0]
 800337a:	1c6e      	adds	r6, r5, #1
 800337c:	3930      	subs	r1, #48	; 0x30
 800337e:	2909      	cmp	r1, #9
 8003380:	d903      	bls.n	800338a <_svfiprintf_r+0x1a6>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0c5      	beq.n	8003312 <_svfiprintf_r+0x12e>
 8003386:	9209      	str	r2, [sp, #36]	; 0x24
 8003388:	e7c3      	b.n	8003312 <_svfiprintf_r+0x12e>
 800338a:	4342      	muls	r2, r0
 800338c:	0035      	movs	r5, r6
 800338e:	2301      	movs	r3, #1
 8003390:	1852      	adds	r2, r2, r1
 8003392:	e7f1      	b.n	8003378 <_svfiprintf_r+0x194>
 8003394:	ab07      	add	r3, sp, #28
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	003a      	movs	r2, r7
 800339a:	0021      	movs	r1, r4
 800339c:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <_svfiprintf_r+0x1fc>)
 800339e:	9803      	ldr	r0, [sp, #12]
 80033a0:	e000      	b.n	80033a4 <_svfiprintf_r+0x1c0>
 80033a2:	bf00      	nop
 80033a4:	9004      	str	r0, [sp, #16]
 80033a6:	9b04      	ldr	r3, [sp, #16]
 80033a8:	3301      	adds	r3, #1
 80033aa:	d1d3      	bne.n	8003354 <_svfiprintf_r+0x170>
 80033ac:	89bb      	ldrh	r3, [r7, #12]
 80033ae:	980d      	ldr	r0, [sp, #52]	; 0x34
 80033b0:	065b      	lsls	r3, r3, #25
 80033b2:	d400      	bmi.n	80033b6 <_svfiprintf_r+0x1d2>
 80033b4:	e72d      	b.n	8003212 <_svfiprintf_r+0x2e>
 80033b6:	2001      	movs	r0, #1
 80033b8:	4240      	negs	r0, r0
 80033ba:	e72a      	b.n	8003212 <_svfiprintf_r+0x2e>
 80033bc:	ab07      	add	r3, sp, #28
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	003a      	movs	r2, r7
 80033c2:	0021      	movs	r1, r4
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <_svfiprintf_r+0x1fc>)
 80033c6:	9803      	ldr	r0, [sp, #12]
 80033c8:	f000 f87c 	bl	80034c4 <_printf_i>
 80033cc:	e7ea      	b.n	80033a4 <_svfiprintf_r+0x1c0>
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	08003a40 	.word	0x08003a40
 80033d4:	08003a46 	.word	0x08003a46
 80033d8:	08003a4a 	.word	0x08003a4a
 80033dc:	00000000 	.word	0x00000000
 80033e0:	08003121 	.word	0x08003121

080033e4 <_printf_common>:
 80033e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033e6:	0015      	movs	r5, r2
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	688a      	ldr	r2, [r1, #8]
 80033ec:	690b      	ldr	r3, [r1, #16]
 80033ee:	000c      	movs	r4, r1
 80033f0:	9000      	str	r0, [sp, #0]
 80033f2:	4293      	cmp	r3, r2
 80033f4:	da00      	bge.n	80033f8 <_printf_common+0x14>
 80033f6:	0013      	movs	r3, r2
 80033f8:	0022      	movs	r2, r4
 80033fa:	602b      	str	r3, [r5, #0]
 80033fc:	3243      	adds	r2, #67	; 0x43
 80033fe:	7812      	ldrb	r2, [r2, #0]
 8003400:	2a00      	cmp	r2, #0
 8003402:	d001      	beq.n	8003408 <_printf_common+0x24>
 8003404:	3301      	adds	r3, #1
 8003406:	602b      	str	r3, [r5, #0]
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	069b      	lsls	r3, r3, #26
 800340c:	d502      	bpl.n	8003414 <_printf_common+0x30>
 800340e:	682b      	ldr	r3, [r5, #0]
 8003410:	3302      	adds	r3, #2
 8003412:	602b      	str	r3, [r5, #0]
 8003414:	6822      	ldr	r2, [r4, #0]
 8003416:	2306      	movs	r3, #6
 8003418:	0017      	movs	r7, r2
 800341a:	401f      	ands	r7, r3
 800341c:	421a      	tst	r2, r3
 800341e:	d027      	beq.n	8003470 <_printf_common+0x8c>
 8003420:	0023      	movs	r3, r4
 8003422:	3343      	adds	r3, #67	; 0x43
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	1e5a      	subs	r2, r3, #1
 8003428:	4193      	sbcs	r3, r2
 800342a:	6822      	ldr	r2, [r4, #0]
 800342c:	0692      	lsls	r2, r2, #26
 800342e:	d430      	bmi.n	8003492 <_printf_common+0xae>
 8003430:	0022      	movs	r2, r4
 8003432:	9901      	ldr	r1, [sp, #4]
 8003434:	9800      	ldr	r0, [sp, #0]
 8003436:	9e08      	ldr	r6, [sp, #32]
 8003438:	3243      	adds	r2, #67	; 0x43
 800343a:	47b0      	blx	r6
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d025      	beq.n	800348c <_printf_common+0xa8>
 8003440:	2306      	movs	r3, #6
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	682a      	ldr	r2, [r5, #0]
 8003446:	68e1      	ldr	r1, [r4, #12]
 8003448:	2500      	movs	r5, #0
 800344a:	4003      	ands	r3, r0
 800344c:	2b04      	cmp	r3, #4
 800344e:	d103      	bne.n	8003458 <_printf_common+0x74>
 8003450:	1a8d      	subs	r5, r1, r2
 8003452:	43eb      	mvns	r3, r5
 8003454:	17db      	asrs	r3, r3, #31
 8003456:	401d      	ands	r5, r3
 8003458:	68a3      	ldr	r3, [r4, #8]
 800345a:	6922      	ldr	r2, [r4, #16]
 800345c:	4293      	cmp	r3, r2
 800345e:	dd01      	ble.n	8003464 <_printf_common+0x80>
 8003460:	1a9b      	subs	r3, r3, r2
 8003462:	18ed      	adds	r5, r5, r3
 8003464:	2700      	movs	r7, #0
 8003466:	42bd      	cmp	r5, r7
 8003468:	d120      	bne.n	80034ac <_printf_common+0xc8>
 800346a:	2000      	movs	r0, #0
 800346c:	e010      	b.n	8003490 <_printf_common+0xac>
 800346e:	3701      	adds	r7, #1
 8003470:	68e3      	ldr	r3, [r4, #12]
 8003472:	682a      	ldr	r2, [r5, #0]
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	42bb      	cmp	r3, r7
 8003478:	ddd2      	ble.n	8003420 <_printf_common+0x3c>
 800347a:	0022      	movs	r2, r4
 800347c:	2301      	movs	r3, #1
 800347e:	9901      	ldr	r1, [sp, #4]
 8003480:	9800      	ldr	r0, [sp, #0]
 8003482:	9e08      	ldr	r6, [sp, #32]
 8003484:	3219      	adds	r2, #25
 8003486:	47b0      	blx	r6
 8003488:	1c43      	adds	r3, r0, #1
 800348a:	d1f0      	bne.n	800346e <_printf_common+0x8a>
 800348c:	2001      	movs	r0, #1
 800348e:	4240      	negs	r0, r0
 8003490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003492:	2030      	movs	r0, #48	; 0x30
 8003494:	18e1      	adds	r1, r4, r3
 8003496:	3143      	adds	r1, #67	; 0x43
 8003498:	7008      	strb	r0, [r1, #0]
 800349a:	0021      	movs	r1, r4
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	3145      	adds	r1, #69	; 0x45
 80034a0:	7809      	ldrb	r1, [r1, #0]
 80034a2:	18a2      	adds	r2, r4, r2
 80034a4:	3243      	adds	r2, #67	; 0x43
 80034a6:	3302      	adds	r3, #2
 80034a8:	7011      	strb	r1, [r2, #0]
 80034aa:	e7c1      	b.n	8003430 <_printf_common+0x4c>
 80034ac:	0022      	movs	r2, r4
 80034ae:	2301      	movs	r3, #1
 80034b0:	9901      	ldr	r1, [sp, #4]
 80034b2:	9800      	ldr	r0, [sp, #0]
 80034b4:	9e08      	ldr	r6, [sp, #32]
 80034b6:	321a      	adds	r2, #26
 80034b8:	47b0      	blx	r6
 80034ba:	1c43      	adds	r3, r0, #1
 80034bc:	d0e6      	beq.n	800348c <_printf_common+0xa8>
 80034be:	3701      	adds	r7, #1
 80034c0:	e7d1      	b.n	8003466 <_printf_common+0x82>
	...

080034c4 <_printf_i>:
 80034c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034c6:	b08b      	sub	sp, #44	; 0x2c
 80034c8:	9206      	str	r2, [sp, #24]
 80034ca:	000a      	movs	r2, r1
 80034cc:	3243      	adds	r2, #67	; 0x43
 80034ce:	9307      	str	r3, [sp, #28]
 80034d0:	9005      	str	r0, [sp, #20]
 80034d2:	9204      	str	r2, [sp, #16]
 80034d4:	7e0a      	ldrb	r2, [r1, #24]
 80034d6:	000c      	movs	r4, r1
 80034d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034da:	2a78      	cmp	r2, #120	; 0x78
 80034dc:	d807      	bhi.n	80034ee <_printf_i+0x2a>
 80034de:	2a62      	cmp	r2, #98	; 0x62
 80034e0:	d809      	bhi.n	80034f6 <_printf_i+0x32>
 80034e2:	2a00      	cmp	r2, #0
 80034e4:	d100      	bne.n	80034e8 <_printf_i+0x24>
 80034e6:	e0c1      	b.n	800366c <_printf_i+0x1a8>
 80034e8:	2a58      	cmp	r2, #88	; 0x58
 80034ea:	d100      	bne.n	80034ee <_printf_i+0x2a>
 80034ec:	e08c      	b.n	8003608 <_printf_i+0x144>
 80034ee:	0026      	movs	r6, r4
 80034f0:	3642      	adds	r6, #66	; 0x42
 80034f2:	7032      	strb	r2, [r6, #0]
 80034f4:	e022      	b.n	800353c <_printf_i+0x78>
 80034f6:	0010      	movs	r0, r2
 80034f8:	3863      	subs	r0, #99	; 0x63
 80034fa:	2815      	cmp	r0, #21
 80034fc:	d8f7      	bhi.n	80034ee <_printf_i+0x2a>
 80034fe:	f7fc fe03 	bl	8000108 <__gnu_thumb1_case_shi>
 8003502:	0016      	.short	0x0016
 8003504:	fff6001f 	.word	0xfff6001f
 8003508:	fff6fff6 	.word	0xfff6fff6
 800350c:	001ffff6 	.word	0x001ffff6
 8003510:	fff6fff6 	.word	0xfff6fff6
 8003514:	fff6fff6 	.word	0xfff6fff6
 8003518:	003600a8 	.word	0x003600a8
 800351c:	fff6009a 	.word	0xfff6009a
 8003520:	00b9fff6 	.word	0x00b9fff6
 8003524:	0036fff6 	.word	0x0036fff6
 8003528:	fff6fff6 	.word	0xfff6fff6
 800352c:	009e      	.short	0x009e
 800352e:	0026      	movs	r6, r4
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	3642      	adds	r6, #66	; 0x42
 8003534:	1d11      	adds	r1, r2, #4
 8003536:	6019      	str	r1, [r3, #0]
 8003538:	6813      	ldr	r3, [r2, #0]
 800353a:	7033      	strb	r3, [r6, #0]
 800353c:	2301      	movs	r3, #1
 800353e:	e0a7      	b.n	8003690 <_printf_i+0x1cc>
 8003540:	6808      	ldr	r0, [r1, #0]
 8003542:	6819      	ldr	r1, [r3, #0]
 8003544:	1d0a      	adds	r2, r1, #4
 8003546:	0605      	lsls	r5, r0, #24
 8003548:	d50b      	bpl.n	8003562 <_printf_i+0x9e>
 800354a:	680d      	ldr	r5, [r1, #0]
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	2d00      	cmp	r5, #0
 8003550:	da03      	bge.n	800355a <_printf_i+0x96>
 8003552:	232d      	movs	r3, #45	; 0x2d
 8003554:	9a04      	ldr	r2, [sp, #16]
 8003556:	426d      	negs	r5, r5
 8003558:	7013      	strb	r3, [r2, #0]
 800355a:	4b61      	ldr	r3, [pc, #388]	; (80036e0 <_printf_i+0x21c>)
 800355c:	270a      	movs	r7, #10
 800355e:	9303      	str	r3, [sp, #12]
 8003560:	e01b      	b.n	800359a <_printf_i+0xd6>
 8003562:	680d      	ldr	r5, [r1, #0]
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	0641      	lsls	r1, r0, #25
 8003568:	d5f1      	bpl.n	800354e <_printf_i+0x8a>
 800356a:	b22d      	sxth	r5, r5
 800356c:	e7ef      	b.n	800354e <_printf_i+0x8a>
 800356e:	680d      	ldr	r5, [r1, #0]
 8003570:	6819      	ldr	r1, [r3, #0]
 8003572:	1d08      	adds	r0, r1, #4
 8003574:	6018      	str	r0, [r3, #0]
 8003576:	062e      	lsls	r6, r5, #24
 8003578:	d501      	bpl.n	800357e <_printf_i+0xba>
 800357a:	680d      	ldr	r5, [r1, #0]
 800357c:	e003      	b.n	8003586 <_printf_i+0xc2>
 800357e:	066d      	lsls	r5, r5, #25
 8003580:	d5fb      	bpl.n	800357a <_printf_i+0xb6>
 8003582:	680d      	ldr	r5, [r1, #0]
 8003584:	b2ad      	uxth	r5, r5
 8003586:	4b56      	ldr	r3, [pc, #344]	; (80036e0 <_printf_i+0x21c>)
 8003588:	2708      	movs	r7, #8
 800358a:	9303      	str	r3, [sp, #12]
 800358c:	2a6f      	cmp	r2, #111	; 0x6f
 800358e:	d000      	beq.n	8003592 <_printf_i+0xce>
 8003590:	3702      	adds	r7, #2
 8003592:	0023      	movs	r3, r4
 8003594:	2200      	movs	r2, #0
 8003596:	3343      	adds	r3, #67	; 0x43
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	6863      	ldr	r3, [r4, #4]
 800359c:	60a3      	str	r3, [r4, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	db03      	blt.n	80035aa <_printf_i+0xe6>
 80035a2:	2204      	movs	r2, #4
 80035a4:	6821      	ldr	r1, [r4, #0]
 80035a6:	4391      	bics	r1, r2
 80035a8:	6021      	str	r1, [r4, #0]
 80035aa:	2d00      	cmp	r5, #0
 80035ac:	d102      	bne.n	80035b4 <_printf_i+0xf0>
 80035ae:	9e04      	ldr	r6, [sp, #16]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00c      	beq.n	80035ce <_printf_i+0x10a>
 80035b4:	9e04      	ldr	r6, [sp, #16]
 80035b6:	0028      	movs	r0, r5
 80035b8:	0039      	movs	r1, r7
 80035ba:	f7fc fe35 	bl	8000228 <__aeabi_uidivmod>
 80035be:	9b03      	ldr	r3, [sp, #12]
 80035c0:	3e01      	subs	r6, #1
 80035c2:	5c5b      	ldrb	r3, [r3, r1]
 80035c4:	7033      	strb	r3, [r6, #0]
 80035c6:	002b      	movs	r3, r5
 80035c8:	0005      	movs	r5, r0
 80035ca:	429f      	cmp	r7, r3
 80035cc:	d9f3      	bls.n	80035b6 <_printf_i+0xf2>
 80035ce:	2f08      	cmp	r7, #8
 80035d0:	d109      	bne.n	80035e6 <_printf_i+0x122>
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	07db      	lsls	r3, r3, #31
 80035d6:	d506      	bpl.n	80035e6 <_printf_i+0x122>
 80035d8:	6863      	ldr	r3, [r4, #4]
 80035da:	6922      	ldr	r2, [r4, #16]
 80035dc:	4293      	cmp	r3, r2
 80035de:	dc02      	bgt.n	80035e6 <_printf_i+0x122>
 80035e0:	2330      	movs	r3, #48	; 0x30
 80035e2:	3e01      	subs	r6, #1
 80035e4:	7033      	strb	r3, [r6, #0]
 80035e6:	9b04      	ldr	r3, [sp, #16]
 80035e8:	1b9b      	subs	r3, r3, r6
 80035ea:	6123      	str	r3, [r4, #16]
 80035ec:	9b07      	ldr	r3, [sp, #28]
 80035ee:	0021      	movs	r1, r4
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	9805      	ldr	r0, [sp, #20]
 80035f4:	9b06      	ldr	r3, [sp, #24]
 80035f6:	aa09      	add	r2, sp, #36	; 0x24
 80035f8:	f7ff fef4 	bl	80033e4 <_printf_common>
 80035fc:	1c43      	adds	r3, r0, #1
 80035fe:	d14c      	bne.n	800369a <_printf_i+0x1d6>
 8003600:	2001      	movs	r0, #1
 8003602:	4240      	negs	r0, r0
 8003604:	b00b      	add	sp, #44	; 0x2c
 8003606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003608:	3145      	adds	r1, #69	; 0x45
 800360a:	700a      	strb	r2, [r1, #0]
 800360c:	4a34      	ldr	r2, [pc, #208]	; (80036e0 <_printf_i+0x21c>)
 800360e:	9203      	str	r2, [sp, #12]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	6821      	ldr	r1, [r4, #0]
 8003614:	ca20      	ldmia	r2!, {r5}
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	0608      	lsls	r0, r1, #24
 800361a:	d516      	bpl.n	800364a <_printf_i+0x186>
 800361c:	07cb      	lsls	r3, r1, #31
 800361e:	d502      	bpl.n	8003626 <_printf_i+0x162>
 8003620:	2320      	movs	r3, #32
 8003622:	4319      	orrs	r1, r3
 8003624:	6021      	str	r1, [r4, #0]
 8003626:	2710      	movs	r7, #16
 8003628:	2d00      	cmp	r5, #0
 800362a:	d1b2      	bne.n	8003592 <_printf_i+0xce>
 800362c:	2320      	movs	r3, #32
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	439a      	bics	r2, r3
 8003632:	6022      	str	r2, [r4, #0]
 8003634:	e7ad      	b.n	8003592 <_printf_i+0xce>
 8003636:	2220      	movs	r2, #32
 8003638:	6809      	ldr	r1, [r1, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	6022      	str	r2, [r4, #0]
 800363e:	0022      	movs	r2, r4
 8003640:	2178      	movs	r1, #120	; 0x78
 8003642:	3245      	adds	r2, #69	; 0x45
 8003644:	7011      	strb	r1, [r2, #0]
 8003646:	4a27      	ldr	r2, [pc, #156]	; (80036e4 <_printf_i+0x220>)
 8003648:	e7e1      	b.n	800360e <_printf_i+0x14a>
 800364a:	0648      	lsls	r0, r1, #25
 800364c:	d5e6      	bpl.n	800361c <_printf_i+0x158>
 800364e:	b2ad      	uxth	r5, r5
 8003650:	e7e4      	b.n	800361c <_printf_i+0x158>
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	680d      	ldr	r5, [r1, #0]
 8003656:	1d10      	adds	r0, r2, #4
 8003658:	6949      	ldr	r1, [r1, #20]
 800365a:	6018      	str	r0, [r3, #0]
 800365c:	6813      	ldr	r3, [r2, #0]
 800365e:	062e      	lsls	r6, r5, #24
 8003660:	d501      	bpl.n	8003666 <_printf_i+0x1a2>
 8003662:	6019      	str	r1, [r3, #0]
 8003664:	e002      	b.n	800366c <_printf_i+0x1a8>
 8003666:	066d      	lsls	r5, r5, #25
 8003668:	d5fb      	bpl.n	8003662 <_printf_i+0x19e>
 800366a:	8019      	strh	r1, [r3, #0]
 800366c:	2300      	movs	r3, #0
 800366e:	9e04      	ldr	r6, [sp, #16]
 8003670:	6123      	str	r3, [r4, #16]
 8003672:	e7bb      	b.n	80035ec <_printf_i+0x128>
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	1d11      	adds	r1, r2, #4
 8003678:	6019      	str	r1, [r3, #0]
 800367a:	6816      	ldr	r6, [r2, #0]
 800367c:	2100      	movs	r1, #0
 800367e:	0030      	movs	r0, r6
 8003680:	6862      	ldr	r2, [r4, #4]
 8003682:	f000 f831 	bl	80036e8 <memchr>
 8003686:	2800      	cmp	r0, #0
 8003688:	d001      	beq.n	800368e <_printf_i+0x1ca>
 800368a:	1b80      	subs	r0, r0, r6
 800368c:	6060      	str	r0, [r4, #4]
 800368e:	6863      	ldr	r3, [r4, #4]
 8003690:	6123      	str	r3, [r4, #16]
 8003692:	2300      	movs	r3, #0
 8003694:	9a04      	ldr	r2, [sp, #16]
 8003696:	7013      	strb	r3, [r2, #0]
 8003698:	e7a8      	b.n	80035ec <_printf_i+0x128>
 800369a:	6923      	ldr	r3, [r4, #16]
 800369c:	0032      	movs	r2, r6
 800369e:	9906      	ldr	r1, [sp, #24]
 80036a0:	9805      	ldr	r0, [sp, #20]
 80036a2:	9d07      	ldr	r5, [sp, #28]
 80036a4:	47a8      	blx	r5
 80036a6:	1c43      	adds	r3, r0, #1
 80036a8:	d0aa      	beq.n	8003600 <_printf_i+0x13c>
 80036aa:	6823      	ldr	r3, [r4, #0]
 80036ac:	079b      	lsls	r3, r3, #30
 80036ae:	d415      	bmi.n	80036dc <_printf_i+0x218>
 80036b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036b2:	68e0      	ldr	r0, [r4, #12]
 80036b4:	4298      	cmp	r0, r3
 80036b6:	daa5      	bge.n	8003604 <_printf_i+0x140>
 80036b8:	0018      	movs	r0, r3
 80036ba:	e7a3      	b.n	8003604 <_printf_i+0x140>
 80036bc:	0022      	movs	r2, r4
 80036be:	2301      	movs	r3, #1
 80036c0:	9906      	ldr	r1, [sp, #24]
 80036c2:	9805      	ldr	r0, [sp, #20]
 80036c4:	9e07      	ldr	r6, [sp, #28]
 80036c6:	3219      	adds	r2, #25
 80036c8:	47b0      	blx	r6
 80036ca:	1c43      	adds	r3, r0, #1
 80036cc:	d098      	beq.n	8003600 <_printf_i+0x13c>
 80036ce:	3501      	adds	r5, #1
 80036d0:	68e3      	ldr	r3, [r4, #12]
 80036d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	42ab      	cmp	r3, r5
 80036d8:	dcf0      	bgt.n	80036bc <_printf_i+0x1f8>
 80036da:	e7e9      	b.n	80036b0 <_printf_i+0x1ec>
 80036dc:	2500      	movs	r5, #0
 80036de:	e7f7      	b.n	80036d0 <_printf_i+0x20c>
 80036e0:	08003a51 	.word	0x08003a51
 80036e4:	08003a62 	.word	0x08003a62

080036e8 <memchr>:
 80036e8:	b2c9      	uxtb	r1, r1
 80036ea:	1882      	adds	r2, r0, r2
 80036ec:	4290      	cmp	r0, r2
 80036ee:	d101      	bne.n	80036f4 <memchr+0xc>
 80036f0:	2000      	movs	r0, #0
 80036f2:	4770      	bx	lr
 80036f4:	7803      	ldrb	r3, [r0, #0]
 80036f6:	428b      	cmp	r3, r1
 80036f8:	d0fb      	beq.n	80036f2 <memchr+0xa>
 80036fa:	3001      	adds	r0, #1
 80036fc:	e7f6      	b.n	80036ec <memchr+0x4>

080036fe <memcpy>:
 80036fe:	2300      	movs	r3, #0
 8003700:	b510      	push	{r4, lr}
 8003702:	429a      	cmp	r2, r3
 8003704:	d100      	bne.n	8003708 <memcpy+0xa>
 8003706:	bd10      	pop	{r4, pc}
 8003708:	5ccc      	ldrb	r4, [r1, r3]
 800370a:	54c4      	strb	r4, [r0, r3]
 800370c:	3301      	adds	r3, #1
 800370e:	e7f8      	b.n	8003702 <memcpy+0x4>

08003710 <memmove>:
 8003710:	b510      	push	{r4, lr}
 8003712:	4288      	cmp	r0, r1
 8003714:	d902      	bls.n	800371c <memmove+0xc>
 8003716:	188b      	adds	r3, r1, r2
 8003718:	4298      	cmp	r0, r3
 800371a:	d303      	bcc.n	8003724 <memmove+0x14>
 800371c:	2300      	movs	r3, #0
 800371e:	e007      	b.n	8003730 <memmove+0x20>
 8003720:	5c8b      	ldrb	r3, [r1, r2]
 8003722:	5483      	strb	r3, [r0, r2]
 8003724:	3a01      	subs	r2, #1
 8003726:	d2fb      	bcs.n	8003720 <memmove+0x10>
 8003728:	bd10      	pop	{r4, pc}
 800372a:	5ccc      	ldrb	r4, [r1, r3]
 800372c:	54c4      	strb	r4, [r0, r3]
 800372e:	3301      	adds	r3, #1
 8003730:	429a      	cmp	r2, r3
 8003732:	d1fa      	bne.n	800372a <memmove+0x1a>
 8003734:	e7f8      	b.n	8003728 <memmove+0x18>
	...

08003738 <_free_r>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	0005      	movs	r5, r0
 800373c:	2900      	cmp	r1, #0
 800373e:	d010      	beq.n	8003762 <_free_r+0x2a>
 8003740:	1f0c      	subs	r4, r1, #4
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	da00      	bge.n	800374a <_free_r+0x12>
 8003748:	18e4      	adds	r4, r4, r3
 800374a:	0028      	movs	r0, r5
 800374c:	f000 f918 	bl	8003980 <__malloc_lock>
 8003750:	4a1d      	ldr	r2, [pc, #116]	; (80037c8 <_free_r+0x90>)
 8003752:	6813      	ldr	r3, [r2, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d105      	bne.n	8003764 <_free_r+0x2c>
 8003758:	6063      	str	r3, [r4, #4]
 800375a:	6014      	str	r4, [r2, #0]
 800375c:	0028      	movs	r0, r5
 800375e:	f000 f917 	bl	8003990 <__malloc_unlock>
 8003762:	bd70      	pop	{r4, r5, r6, pc}
 8003764:	42a3      	cmp	r3, r4
 8003766:	d908      	bls.n	800377a <_free_r+0x42>
 8003768:	6821      	ldr	r1, [r4, #0]
 800376a:	1860      	adds	r0, r4, r1
 800376c:	4283      	cmp	r3, r0
 800376e:	d1f3      	bne.n	8003758 <_free_r+0x20>
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	1841      	adds	r1, r0, r1
 8003776:	6021      	str	r1, [r4, #0]
 8003778:	e7ee      	b.n	8003758 <_free_r+0x20>
 800377a:	001a      	movs	r2, r3
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <_free_r+0x4e>
 8003782:	42a3      	cmp	r3, r4
 8003784:	d9f9      	bls.n	800377a <_free_r+0x42>
 8003786:	6811      	ldr	r1, [r2, #0]
 8003788:	1850      	adds	r0, r2, r1
 800378a:	42a0      	cmp	r0, r4
 800378c:	d10b      	bne.n	80037a6 <_free_r+0x6e>
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	1809      	adds	r1, r1, r0
 8003792:	1850      	adds	r0, r2, r1
 8003794:	6011      	str	r1, [r2, #0]
 8003796:	4283      	cmp	r3, r0
 8003798:	d1e0      	bne.n	800375c <_free_r+0x24>
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	1841      	adds	r1, r0, r1
 80037a0:	6011      	str	r1, [r2, #0]
 80037a2:	6053      	str	r3, [r2, #4]
 80037a4:	e7da      	b.n	800375c <_free_r+0x24>
 80037a6:	42a0      	cmp	r0, r4
 80037a8:	d902      	bls.n	80037b0 <_free_r+0x78>
 80037aa:	230c      	movs	r3, #12
 80037ac:	602b      	str	r3, [r5, #0]
 80037ae:	e7d5      	b.n	800375c <_free_r+0x24>
 80037b0:	6821      	ldr	r1, [r4, #0]
 80037b2:	1860      	adds	r0, r4, r1
 80037b4:	4283      	cmp	r3, r0
 80037b6:	d103      	bne.n	80037c0 <_free_r+0x88>
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	1841      	adds	r1, r0, r1
 80037be:	6021      	str	r1, [r4, #0]
 80037c0:	6063      	str	r3, [r4, #4]
 80037c2:	6054      	str	r4, [r2, #4]
 80037c4:	e7ca      	b.n	800375c <_free_r+0x24>
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	20000178 	.word	0x20000178

080037cc <sbrk_aligned>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	4e0f      	ldr	r6, [pc, #60]	; (800380c <sbrk_aligned+0x40>)
 80037d0:	000d      	movs	r5, r1
 80037d2:	6831      	ldr	r1, [r6, #0]
 80037d4:	0004      	movs	r4, r0
 80037d6:	2900      	cmp	r1, #0
 80037d8:	d102      	bne.n	80037e0 <sbrk_aligned+0x14>
 80037da:	f000 f8bf 	bl	800395c <_sbrk_r>
 80037de:	6030      	str	r0, [r6, #0]
 80037e0:	0029      	movs	r1, r5
 80037e2:	0020      	movs	r0, r4
 80037e4:	f000 f8ba 	bl	800395c <_sbrk_r>
 80037e8:	1c43      	adds	r3, r0, #1
 80037ea:	d00a      	beq.n	8003802 <sbrk_aligned+0x36>
 80037ec:	2303      	movs	r3, #3
 80037ee:	1cc5      	adds	r5, r0, #3
 80037f0:	439d      	bics	r5, r3
 80037f2:	42a8      	cmp	r0, r5
 80037f4:	d007      	beq.n	8003806 <sbrk_aligned+0x3a>
 80037f6:	1a29      	subs	r1, r5, r0
 80037f8:	0020      	movs	r0, r4
 80037fa:	f000 f8af 	bl	800395c <_sbrk_r>
 80037fe:	1c43      	adds	r3, r0, #1
 8003800:	d101      	bne.n	8003806 <sbrk_aligned+0x3a>
 8003802:	2501      	movs	r5, #1
 8003804:	426d      	negs	r5, r5
 8003806:	0028      	movs	r0, r5
 8003808:	bd70      	pop	{r4, r5, r6, pc}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	2000017c 	.word	0x2000017c

08003810 <_malloc_r>:
 8003810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003812:	2203      	movs	r2, #3
 8003814:	1ccb      	adds	r3, r1, #3
 8003816:	4393      	bics	r3, r2
 8003818:	3308      	adds	r3, #8
 800381a:	0006      	movs	r6, r0
 800381c:	001f      	movs	r7, r3
 800381e:	2b0c      	cmp	r3, #12
 8003820:	d232      	bcs.n	8003888 <_malloc_r+0x78>
 8003822:	270c      	movs	r7, #12
 8003824:	42b9      	cmp	r1, r7
 8003826:	d831      	bhi.n	800388c <_malloc_r+0x7c>
 8003828:	0030      	movs	r0, r6
 800382a:	f000 f8a9 	bl	8003980 <__malloc_lock>
 800382e:	4d32      	ldr	r5, [pc, #200]	; (80038f8 <_malloc_r+0xe8>)
 8003830:	682b      	ldr	r3, [r5, #0]
 8003832:	001c      	movs	r4, r3
 8003834:	2c00      	cmp	r4, #0
 8003836:	d12e      	bne.n	8003896 <_malloc_r+0x86>
 8003838:	0039      	movs	r1, r7
 800383a:	0030      	movs	r0, r6
 800383c:	f7ff ffc6 	bl	80037cc <sbrk_aligned>
 8003840:	0004      	movs	r4, r0
 8003842:	1c43      	adds	r3, r0, #1
 8003844:	d11e      	bne.n	8003884 <_malloc_r+0x74>
 8003846:	682c      	ldr	r4, [r5, #0]
 8003848:	0025      	movs	r5, r4
 800384a:	2d00      	cmp	r5, #0
 800384c:	d14a      	bne.n	80038e4 <_malloc_r+0xd4>
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	0029      	movs	r1, r5
 8003852:	18e3      	adds	r3, r4, r3
 8003854:	0030      	movs	r0, r6
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	f000 f880 	bl	800395c <_sbrk_r>
 800385c:	9b01      	ldr	r3, [sp, #4]
 800385e:	4283      	cmp	r3, r0
 8003860:	d143      	bne.n	80038ea <_malloc_r+0xda>
 8003862:	6823      	ldr	r3, [r4, #0]
 8003864:	3703      	adds	r7, #3
 8003866:	1aff      	subs	r7, r7, r3
 8003868:	2303      	movs	r3, #3
 800386a:	439f      	bics	r7, r3
 800386c:	3708      	adds	r7, #8
 800386e:	2f0c      	cmp	r7, #12
 8003870:	d200      	bcs.n	8003874 <_malloc_r+0x64>
 8003872:	270c      	movs	r7, #12
 8003874:	0039      	movs	r1, r7
 8003876:	0030      	movs	r0, r6
 8003878:	f7ff ffa8 	bl	80037cc <sbrk_aligned>
 800387c:	1c43      	adds	r3, r0, #1
 800387e:	d034      	beq.n	80038ea <_malloc_r+0xda>
 8003880:	6823      	ldr	r3, [r4, #0]
 8003882:	19df      	adds	r7, r3, r7
 8003884:	6027      	str	r7, [r4, #0]
 8003886:	e013      	b.n	80038b0 <_malloc_r+0xa0>
 8003888:	2b00      	cmp	r3, #0
 800388a:	dacb      	bge.n	8003824 <_malloc_r+0x14>
 800388c:	230c      	movs	r3, #12
 800388e:	2500      	movs	r5, #0
 8003890:	6033      	str	r3, [r6, #0]
 8003892:	0028      	movs	r0, r5
 8003894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	1bd1      	subs	r1, r2, r7
 800389a:	d420      	bmi.n	80038de <_malloc_r+0xce>
 800389c:	290b      	cmp	r1, #11
 800389e:	d917      	bls.n	80038d0 <_malloc_r+0xc0>
 80038a0:	19e2      	adds	r2, r4, r7
 80038a2:	6027      	str	r7, [r4, #0]
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	d111      	bne.n	80038cc <_malloc_r+0xbc>
 80038a8:	602a      	str	r2, [r5, #0]
 80038aa:	6863      	ldr	r3, [r4, #4]
 80038ac:	6011      	str	r1, [r2, #0]
 80038ae:	6053      	str	r3, [r2, #4]
 80038b0:	0030      	movs	r0, r6
 80038b2:	0025      	movs	r5, r4
 80038b4:	f000 f86c 	bl	8003990 <__malloc_unlock>
 80038b8:	2207      	movs	r2, #7
 80038ba:	350b      	adds	r5, #11
 80038bc:	1d23      	adds	r3, r4, #4
 80038be:	4395      	bics	r5, r2
 80038c0:	1aea      	subs	r2, r5, r3
 80038c2:	429d      	cmp	r5, r3
 80038c4:	d0e5      	beq.n	8003892 <_malloc_r+0x82>
 80038c6:	1b5b      	subs	r3, r3, r5
 80038c8:	50a3      	str	r3, [r4, r2]
 80038ca:	e7e2      	b.n	8003892 <_malloc_r+0x82>
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	e7ec      	b.n	80038aa <_malloc_r+0x9a>
 80038d0:	6862      	ldr	r2, [r4, #4]
 80038d2:	42a3      	cmp	r3, r4
 80038d4:	d101      	bne.n	80038da <_malloc_r+0xca>
 80038d6:	602a      	str	r2, [r5, #0]
 80038d8:	e7ea      	b.n	80038b0 <_malloc_r+0xa0>
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	e7e8      	b.n	80038b0 <_malloc_r+0xa0>
 80038de:	0023      	movs	r3, r4
 80038e0:	6864      	ldr	r4, [r4, #4]
 80038e2:	e7a7      	b.n	8003834 <_malloc_r+0x24>
 80038e4:	002c      	movs	r4, r5
 80038e6:	686d      	ldr	r5, [r5, #4]
 80038e8:	e7af      	b.n	800384a <_malloc_r+0x3a>
 80038ea:	230c      	movs	r3, #12
 80038ec:	0030      	movs	r0, r6
 80038ee:	6033      	str	r3, [r6, #0]
 80038f0:	f000 f84e 	bl	8003990 <__malloc_unlock>
 80038f4:	e7cd      	b.n	8003892 <_malloc_r+0x82>
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	20000178 	.word	0x20000178

080038fc <_realloc_r>:
 80038fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038fe:	0007      	movs	r7, r0
 8003900:	000e      	movs	r6, r1
 8003902:	0014      	movs	r4, r2
 8003904:	2900      	cmp	r1, #0
 8003906:	d105      	bne.n	8003914 <_realloc_r+0x18>
 8003908:	0011      	movs	r1, r2
 800390a:	f7ff ff81 	bl	8003810 <_malloc_r>
 800390e:	0005      	movs	r5, r0
 8003910:	0028      	movs	r0, r5
 8003912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003914:	2a00      	cmp	r2, #0
 8003916:	d103      	bne.n	8003920 <_realloc_r+0x24>
 8003918:	f7ff ff0e 	bl	8003738 <_free_r>
 800391c:	0025      	movs	r5, r4
 800391e:	e7f7      	b.n	8003910 <_realloc_r+0x14>
 8003920:	f000 f83e 	bl	80039a0 <_malloc_usable_size_r>
 8003924:	9001      	str	r0, [sp, #4]
 8003926:	4284      	cmp	r4, r0
 8003928:	d803      	bhi.n	8003932 <_realloc_r+0x36>
 800392a:	0035      	movs	r5, r6
 800392c:	0843      	lsrs	r3, r0, #1
 800392e:	42a3      	cmp	r3, r4
 8003930:	d3ee      	bcc.n	8003910 <_realloc_r+0x14>
 8003932:	0021      	movs	r1, r4
 8003934:	0038      	movs	r0, r7
 8003936:	f7ff ff6b 	bl	8003810 <_malloc_r>
 800393a:	1e05      	subs	r5, r0, #0
 800393c:	d0e8      	beq.n	8003910 <_realloc_r+0x14>
 800393e:	9b01      	ldr	r3, [sp, #4]
 8003940:	0022      	movs	r2, r4
 8003942:	429c      	cmp	r4, r3
 8003944:	d900      	bls.n	8003948 <_realloc_r+0x4c>
 8003946:	001a      	movs	r2, r3
 8003948:	0031      	movs	r1, r6
 800394a:	0028      	movs	r0, r5
 800394c:	f7ff fed7 	bl	80036fe <memcpy>
 8003950:	0031      	movs	r1, r6
 8003952:	0038      	movs	r0, r7
 8003954:	f7ff fef0 	bl	8003738 <_free_r>
 8003958:	e7da      	b.n	8003910 <_realloc_r+0x14>
	...

0800395c <_sbrk_r>:
 800395c:	2300      	movs	r3, #0
 800395e:	b570      	push	{r4, r5, r6, lr}
 8003960:	4d06      	ldr	r5, [pc, #24]	; (800397c <_sbrk_r+0x20>)
 8003962:	0004      	movs	r4, r0
 8003964:	0008      	movs	r0, r1
 8003966:	602b      	str	r3, [r5, #0]
 8003968:	f7fc ffba 	bl	80008e0 <_sbrk>
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	d103      	bne.n	8003978 <_sbrk_r+0x1c>
 8003970:	682b      	ldr	r3, [r5, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d000      	beq.n	8003978 <_sbrk_r+0x1c>
 8003976:	6023      	str	r3, [r4, #0]
 8003978:	bd70      	pop	{r4, r5, r6, pc}
 800397a:	46c0      	nop			; (mov r8, r8)
 800397c:	20000180 	.word	0x20000180

08003980 <__malloc_lock>:
 8003980:	b510      	push	{r4, lr}
 8003982:	4802      	ldr	r0, [pc, #8]	; (800398c <__malloc_lock+0xc>)
 8003984:	f000 f814 	bl	80039b0 <__retarget_lock_acquire_recursive>
 8003988:	bd10      	pop	{r4, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	20000184 	.word	0x20000184

08003990 <__malloc_unlock>:
 8003990:	b510      	push	{r4, lr}
 8003992:	4802      	ldr	r0, [pc, #8]	; (800399c <__malloc_unlock+0xc>)
 8003994:	f000 f80d 	bl	80039b2 <__retarget_lock_release_recursive>
 8003998:	bd10      	pop	{r4, pc}
 800399a:	46c0      	nop			; (mov r8, r8)
 800399c:	20000184 	.word	0x20000184

080039a0 <_malloc_usable_size_r>:
 80039a0:	1f0b      	subs	r3, r1, #4
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	1f18      	subs	r0, r3, #4
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da01      	bge.n	80039ae <_malloc_usable_size_r+0xe>
 80039aa:	580b      	ldr	r3, [r1, r0]
 80039ac:	18c0      	adds	r0, r0, r3
 80039ae:	4770      	bx	lr

080039b0 <__retarget_lock_acquire_recursive>:
 80039b0:	4770      	bx	lr

080039b2 <__retarget_lock_release_recursive>:
 80039b2:	4770      	bx	lr

080039b4 <_init>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr

080039c0 <_fini>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr
