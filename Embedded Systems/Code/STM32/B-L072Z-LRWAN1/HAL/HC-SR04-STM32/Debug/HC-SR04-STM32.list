
HC-SR04-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008384  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  08008448  08008448  00018448  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008924  08008924  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800892c  0800892c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800892c  0800892c  0001892c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008930  08008930  00018930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200001dc  08008b10  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08008b10  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5dd  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a8b  00000000  00000000  0002c7e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002e270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac0  00000000  00000000  0002ede8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158a0  00000000  00000000  0002f8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8c2  00000000  00000000  00045148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084952  00000000  00000000  00052a0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d735c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b54  00000000  00000000  000d73ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800842c 	.word	0x0800842c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800842c 	.word	0x0800842c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa07 	bl	8001850 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f957 	bl	8001700 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9f9 	bl	8001850 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9ef 	bl	8001850 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f97f 	bl	8001784 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f975 	bl	8001784 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f834 	bl	8000544 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	46ce      	mov	lr, r9
 80004ec:	4647      	mov	r7, r8
 80004ee:	b580      	push	{r7, lr}
 80004f0:	0007      	movs	r7, r0
 80004f2:	4699      	mov	r9, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	469c      	mov	ip, r3
 80004f8:	0413      	lsls	r3, r2, #16
 80004fa:	0c1b      	lsrs	r3, r3, #16
 80004fc:	001d      	movs	r5, r3
 80004fe:	000e      	movs	r6, r1
 8000500:	4661      	mov	r1, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0c14      	lsrs	r4, r2, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	4345      	muls	r5, r0
 800050a:	434b      	muls	r3, r1
 800050c:	4360      	muls	r0, r4
 800050e:	4361      	muls	r1, r4
 8000510:	18c0      	adds	r0, r0, r3
 8000512:	0c2c      	lsrs	r4, r5, #16
 8000514:	1820      	adds	r0, r4, r0
 8000516:	468c      	mov	ip, r1
 8000518:	4283      	cmp	r3, r0
 800051a:	d903      	bls.n	8000524 <__aeabi_lmul+0x3c>
 800051c:	2380      	movs	r3, #128	; 0x80
 800051e:	025b      	lsls	r3, r3, #9
 8000520:	4698      	mov	r8, r3
 8000522:	44c4      	add	ip, r8
 8000524:	4649      	mov	r1, r9
 8000526:	4379      	muls	r1, r7
 8000528:	4372      	muls	r2, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	4463      	add	r3, ip
 800052e:	042d      	lsls	r5, r5, #16
 8000530:	0c2d      	lsrs	r5, r5, #16
 8000532:	18c9      	adds	r1, r1, r3
 8000534:	0400      	lsls	r0, r0, #16
 8000536:	1940      	adds	r0, r0, r5
 8000538:	1889      	adds	r1, r1, r2
 800053a:	bcc0      	pop	{r6, r7}
 800053c:	46b9      	mov	r9, r7
 800053e:	46b0      	mov	r8, r6
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__udivmoddi4>:
 8000544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000546:	4657      	mov	r7, sl
 8000548:	464e      	mov	r6, r9
 800054a:	4645      	mov	r5, r8
 800054c:	46de      	mov	lr, fp
 800054e:	b5e0      	push	{r5, r6, r7, lr}
 8000550:	0004      	movs	r4, r0
 8000552:	000d      	movs	r5, r1
 8000554:	4692      	mov	sl, r2
 8000556:	4699      	mov	r9, r3
 8000558:	b083      	sub	sp, #12
 800055a:	428b      	cmp	r3, r1
 800055c:	d830      	bhi.n	80005c0 <__udivmoddi4+0x7c>
 800055e:	d02d      	beq.n	80005bc <__udivmoddi4+0x78>
 8000560:	4649      	mov	r1, r9
 8000562:	4650      	mov	r0, sl
 8000564:	f002 f96e 	bl	8002844 <__clzdi2>
 8000568:	0029      	movs	r1, r5
 800056a:	0006      	movs	r6, r0
 800056c:	0020      	movs	r0, r4
 800056e:	f002 f969 	bl	8002844 <__clzdi2>
 8000572:	1a33      	subs	r3, r6, r0
 8000574:	4698      	mov	r8, r3
 8000576:	3b20      	subs	r3, #32
 8000578:	469b      	mov	fp, r3
 800057a:	d433      	bmi.n	80005e4 <__udivmoddi4+0xa0>
 800057c:	465a      	mov	r2, fp
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	4642      	mov	r2, r8
 8000584:	001f      	movs	r7, r3
 8000586:	4653      	mov	r3, sl
 8000588:	4093      	lsls	r3, r2
 800058a:	001e      	movs	r6, r3
 800058c:	42af      	cmp	r7, r5
 800058e:	d83a      	bhi.n	8000606 <__udivmoddi4+0xc2>
 8000590:	42af      	cmp	r7, r5
 8000592:	d100      	bne.n	8000596 <__udivmoddi4+0x52>
 8000594:	e078      	b.n	8000688 <__udivmoddi4+0x144>
 8000596:	465b      	mov	r3, fp
 8000598:	1ba4      	subs	r4, r4, r6
 800059a:	41bd      	sbcs	r5, r7
 800059c:	2b00      	cmp	r3, #0
 800059e:	da00      	bge.n	80005a2 <__udivmoddi4+0x5e>
 80005a0:	e075      	b.n	800068e <__udivmoddi4+0x14a>
 80005a2:	2200      	movs	r2, #0
 80005a4:	2300      	movs	r3, #0
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	465a      	mov	r2, fp
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	2301      	movs	r3, #1
 80005b4:	4642      	mov	r2, r8
 80005b6:	4093      	lsls	r3, r2
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	e028      	b.n	800060e <__udivmoddi4+0xca>
 80005bc:	4282      	cmp	r2, r0
 80005be:	d9cf      	bls.n	8000560 <__udivmoddi4+0x1c>
 80005c0:	2200      	movs	r2, #0
 80005c2:	2300      	movs	r3, #0
 80005c4:	9200      	str	r2, [sp, #0]
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <__udivmoddi4+0x8e>
 80005ce:	601c      	str	r4, [r3, #0]
 80005d0:	605d      	str	r5, [r3, #4]
 80005d2:	9800      	ldr	r0, [sp, #0]
 80005d4:	9901      	ldr	r1, [sp, #4]
 80005d6:	b003      	add	sp, #12
 80005d8:	bcf0      	pop	{r4, r5, r6, r7}
 80005da:	46bb      	mov	fp, r7
 80005dc:	46b2      	mov	sl, r6
 80005de:	46a9      	mov	r9, r5
 80005e0:	46a0      	mov	r8, r4
 80005e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e4:	4642      	mov	r2, r8
 80005e6:	2320      	movs	r3, #32
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4652      	mov	r2, sl
 80005ec:	40da      	lsrs	r2, r3
 80005ee:	4641      	mov	r1, r8
 80005f0:	0013      	movs	r3, r2
 80005f2:	464a      	mov	r2, r9
 80005f4:	408a      	lsls	r2, r1
 80005f6:	0017      	movs	r7, r2
 80005f8:	4642      	mov	r2, r8
 80005fa:	431f      	orrs	r7, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	4093      	lsls	r3, r2
 8000600:	001e      	movs	r6, r3
 8000602:	42af      	cmp	r7, r5
 8000604:	d9c4      	bls.n	8000590 <__udivmoddi4+0x4c>
 8000606:	2200      	movs	r2, #0
 8000608:	2300      	movs	r3, #0
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	4643      	mov	r3, r8
 8000610:	2b00      	cmp	r3, #0
 8000612:	d0d9      	beq.n	80005c8 <__udivmoddi4+0x84>
 8000614:	07fb      	lsls	r3, r7, #31
 8000616:	0872      	lsrs	r2, r6, #1
 8000618:	431a      	orrs	r2, r3
 800061a:	4646      	mov	r6, r8
 800061c:	087b      	lsrs	r3, r7, #1
 800061e:	e00e      	b.n	800063e <__udivmoddi4+0xfa>
 8000620:	42ab      	cmp	r3, r5
 8000622:	d101      	bne.n	8000628 <__udivmoddi4+0xe4>
 8000624:	42a2      	cmp	r2, r4
 8000626:	d80c      	bhi.n	8000642 <__udivmoddi4+0xfe>
 8000628:	1aa4      	subs	r4, r4, r2
 800062a:	419d      	sbcs	r5, r3
 800062c:	2001      	movs	r0, #1
 800062e:	1924      	adds	r4, r4, r4
 8000630:	416d      	adcs	r5, r5
 8000632:	2100      	movs	r1, #0
 8000634:	3e01      	subs	r6, #1
 8000636:	1824      	adds	r4, r4, r0
 8000638:	414d      	adcs	r5, r1
 800063a:	2e00      	cmp	r6, #0
 800063c:	d006      	beq.n	800064c <__udivmoddi4+0x108>
 800063e:	42ab      	cmp	r3, r5
 8000640:	d9ee      	bls.n	8000620 <__udivmoddi4+0xdc>
 8000642:	3e01      	subs	r6, #1
 8000644:	1924      	adds	r4, r4, r4
 8000646:	416d      	adcs	r5, r5
 8000648:	2e00      	cmp	r6, #0
 800064a:	d1f8      	bne.n	800063e <__udivmoddi4+0xfa>
 800064c:	9800      	ldr	r0, [sp, #0]
 800064e:	9901      	ldr	r1, [sp, #4]
 8000650:	465b      	mov	r3, fp
 8000652:	1900      	adds	r0, r0, r4
 8000654:	4169      	adcs	r1, r5
 8000656:	2b00      	cmp	r3, #0
 8000658:	db24      	blt.n	80006a4 <__udivmoddi4+0x160>
 800065a:	002b      	movs	r3, r5
 800065c:	465a      	mov	r2, fp
 800065e:	4644      	mov	r4, r8
 8000660:	40d3      	lsrs	r3, r2
 8000662:	002a      	movs	r2, r5
 8000664:	40e2      	lsrs	r2, r4
 8000666:	001c      	movs	r4, r3
 8000668:	465b      	mov	r3, fp
 800066a:	0015      	movs	r5, r2
 800066c:	2b00      	cmp	r3, #0
 800066e:	db2a      	blt.n	80006c6 <__udivmoddi4+0x182>
 8000670:	0026      	movs	r6, r4
 8000672:	409e      	lsls	r6, r3
 8000674:	0033      	movs	r3, r6
 8000676:	0026      	movs	r6, r4
 8000678:	4647      	mov	r7, r8
 800067a:	40be      	lsls	r6, r7
 800067c:	0032      	movs	r2, r6
 800067e:	1a80      	subs	r0, r0, r2
 8000680:	4199      	sbcs	r1, r3
 8000682:	9000      	str	r0, [sp, #0]
 8000684:	9101      	str	r1, [sp, #4]
 8000686:	e79f      	b.n	80005c8 <__udivmoddi4+0x84>
 8000688:	42a3      	cmp	r3, r4
 800068a:	d8bc      	bhi.n	8000606 <__udivmoddi4+0xc2>
 800068c:	e783      	b.n	8000596 <__udivmoddi4+0x52>
 800068e:	4642      	mov	r2, r8
 8000690:	2320      	movs	r3, #32
 8000692:	2100      	movs	r1, #0
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	2200      	movs	r2, #0
 8000698:	9100      	str	r1, [sp, #0]
 800069a:	9201      	str	r2, [sp, #4]
 800069c:	2201      	movs	r2, #1
 800069e:	40da      	lsrs	r2, r3
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	e786      	b.n	80005b2 <__udivmoddi4+0x6e>
 80006a4:	4642      	mov	r2, r8
 80006a6:	2320      	movs	r3, #32
 80006a8:	1a9b      	subs	r3, r3, r2
 80006aa:	002a      	movs	r2, r5
 80006ac:	4646      	mov	r6, r8
 80006ae:	409a      	lsls	r2, r3
 80006b0:	0023      	movs	r3, r4
 80006b2:	40f3      	lsrs	r3, r6
 80006b4:	4644      	mov	r4, r8
 80006b6:	4313      	orrs	r3, r2
 80006b8:	002a      	movs	r2, r5
 80006ba:	40e2      	lsrs	r2, r4
 80006bc:	001c      	movs	r4, r3
 80006be:	465b      	mov	r3, fp
 80006c0:	0015      	movs	r5, r2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dad4      	bge.n	8000670 <__udivmoddi4+0x12c>
 80006c6:	4642      	mov	r2, r8
 80006c8:	002f      	movs	r7, r5
 80006ca:	2320      	movs	r3, #32
 80006cc:	0026      	movs	r6, r4
 80006ce:	4097      	lsls	r7, r2
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	40de      	lsrs	r6, r3
 80006d4:	003b      	movs	r3, r7
 80006d6:	4333      	orrs	r3, r6
 80006d8:	e7cd      	b.n	8000676 <__udivmoddi4+0x132>
 80006da:	46c0      	nop			; (mov r8, r8)

080006dc <__aeabi_fadd>:
 80006dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006de:	46c6      	mov	lr, r8
 80006e0:	0243      	lsls	r3, r0, #9
 80006e2:	0a5b      	lsrs	r3, r3, #9
 80006e4:	024e      	lsls	r6, r1, #9
 80006e6:	0045      	lsls	r5, r0, #1
 80006e8:	004f      	lsls	r7, r1, #1
 80006ea:	00da      	lsls	r2, r3, #3
 80006ec:	0fc4      	lsrs	r4, r0, #31
 80006ee:	469c      	mov	ip, r3
 80006f0:	0a70      	lsrs	r0, r6, #9
 80006f2:	4690      	mov	r8, r2
 80006f4:	b500      	push	{lr}
 80006f6:	0e2d      	lsrs	r5, r5, #24
 80006f8:	0e3f      	lsrs	r7, r7, #24
 80006fa:	0fc9      	lsrs	r1, r1, #31
 80006fc:	09b6      	lsrs	r6, r6, #6
 80006fe:	428c      	cmp	r4, r1
 8000700:	d04b      	beq.n	800079a <__aeabi_fadd+0xbe>
 8000702:	1bea      	subs	r2, r5, r7
 8000704:	2a00      	cmp	r2, #0
 8000706:	dd36      	ble.n	8000776 <__aeabi_fadd+0x9a>
 8000708:	2f00      	cmp	r7, #0
 800070a:	d061      	beq.n	80007d0 <__aeabi_fadd+0xf4>
 800070c:	2dff      	cmp	r5, #255	; 0xff
 800070e:	d100      	bne.n	8000712 <__aeabi_fadd+0x36>
 8000710:	e0ad      	b.n	800086e <__aeabi_fadd+0x192>
 8000712:	2380      	movs	r3, #128	; 0x80
 8000714:	04db      	lsls	r3, r3, #19
 8000716:	431e      	orrs	r6, r3
 8000718:	2a1b      	cmp	r2, #27
 800071a:	dc00      	bgt.n	800071e <__aeabi_fadd+0x42>
 800071c:	e0d3      	b.n	80008c6 <__aeabi_fadd+0x1ea>
 800071e:	2001      	movs	r0, #1
 8000720:	4643      	mov	r3, r8
 8000722:	1a18      	subs	r0, r3, r0
 8000724:	0143      	lsls	r3, r0, #5
 8000726:	d400      	bmi.n	800072a <__aeabi_fadd+0x4e>
 8000728:	e08c      	b.n	8000844 <__aeabi_fadd+0x168>
 800072a:	0180      	lsls	r0, r0, #6
 800072c:	0987      	lsrs	r7, r0, #6
 800072e:	0038      	movs	r0, r7
 8000730:	f002 f86a 	bl	8002808 <__clzsi2>
 8000734:	3805      	subs	r0, #5
 8000736:	4087      	lsls	r7, r0
 8000738:	4285      	cmp	r5, r0
 800073a:	dc00      	bgt.n	800073e <__aeabi_fadd+0x62>
 800073c:	e0b6      	b.n	80008ac <__aeabi_fadd+0x1d0>
 800073e:	1a2d      	subs	r5, r5, r0
 8000740:	48b3      	ldr	r0, [pc, #716]	; (8000a10 <__aeabi_fadd+0x334>)
 8000742:	4038      	ands	r0, r7
 8000744:	0743      	lsls	r3, r0, #29
 8000746:	d004      	beq.n	8000752 <__aeabi_fadd+0x76>
 8000748:	230f      	movs	r3, #15
 800074a:	4003      	ands	r3, r0
 800074c:	2b04      	cmp	r3, #4
 800074e:	d000      	beq.n	8000752 <__aeabi_fadd+0x76>
 8000750:	3004      	adds	r0, #4
 8000752:	0143      	lsls	r3, r0, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fadd+0x7c>
 8000756:	e078      	b.n	800084a <__aeabi_fadd+0x16e>
 8000758:	1c6a      	adds	r2, r5, #1
 800075a:	2dfe      	cmp	r5, #254	; 0xfe
 800075c:	d065      	beq.n	800082a <__aeabi_fadd+0x14e>
 800075e:	0180      	lsls	r0, r0, #6
 8000760:	0a43      	lsrs	r3, r0, #9
 8000762:	469c      	mov	ip, r3
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	4663      	mov	r3, ip
 8000768:	05d0      	lsls	r0, r2, #23
 800076a:	4318      	orrs	r0, r3
 800076c:	07e4      	lsls	r4, r4, #31
 800076e:	4320      	orrs	r0, r4
 8000770:	bc80      	pop	{r7}
 8000772:	46b8      	mov	r8, r7
 8000774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000776:	2a00      	cmp	r2, #0
 8000778:	d035      	beq.n	80007e6 <__aeabi_fadd+0x10a>
 800077a:	1b7a      	subs	r2, r7, r5
 800077c:	2d00      	cmp	r5, #0
 800077e:	d000      	beq.n	8000782 <__aeabi_fadd+0xa6>
 8000780:	e0af      	b.n	80008e2 <__aeabi_fadd+0x206>
 8000782:	4643      	mov	r3, r8
 8000784:	2b00      	cmp	r3, #0
 8000786:	d100      	bne.n	800078a <__aeabi_fadd+0xae>
 8000788:	e0a7      	b.n	80008da <__aeabi_fadd+0x1fe>
 800078a:	1e53      	subs	r3, r2, #1
 800078c:	2a01      	cmp	r2, #1
 800078e:	d100      	bne.n	8000792 <__aeabi_fadd+0xb6>
 8000790:	e12f      	b.n	80009f2 <__aeabi_fadd+0x316>
 8000792:	2aff      	cmp	r2, #255	; 0xff
 8000794:	d069      	beq.n	800086a <__aeabi_fadd+0x18e>
 8000796:	001a      	movs	r2, r3
 8000798:	e0aa      	b.n	80008f0 <__aeabi_fadd+0x214>
 800079a:	1be9      	subs	r1, r5, r7
 800079c:	2900      	cmp	r1, #0
 800079e:	dd70      	ble.n	8000882 <__aeabi_fadd+0x1a6>
 80007a0:	2f00      	cmp	r7, #0
 80007a2:	d037      	beq.n	8000814 <__aeabi_fadd+0x138>
 80007a4:	2dff      	cmp	r5, #255	; 0xff
 80007a6:	d062      	beq.n	800086e <__aeabi_fadd+0x192>
 80007a8:	2380      	movs	r3, #128	; 0x80
 80007aa:	04db      	lsls	r3, r3, #19
 80007ac:	431e      	orrs	r6, r3
 80007ae:	291b      	cmp	r1, #27
 80007b0:	dc00      	bgt.n	80007b4 <__aeabi_fadd+0xd8>
 80007b2:	e0b0      	b.n	8000916 <__aeabi_fadd+0x23a>
 80007b4:	2001      	movs	r0, #1
 80007b6:	4440      	add	r0, r8
 80007b8:	0143      	lsls	r3, r0, #5
 80007ba:	d543      	bpl.n	8000844 <__aeabi_fadd+0x168>
 80007bc:	3501      	adds	r5, #1
 80007be:	2dff      	cmp	r5, #255	; 0xff
 80007c0:	d033      	beq.n	800082a <__aeabi_fadd+0x14e>
 80007c2:	2301      	movs	r3, #1
 80007c4:	4a93      	ldr	r2, [pc, #588]	; (8000a14 <__aeabi_fadd+0x338>)
 80007c6:	4003      	ands	r3, r0
 80007c8:	0840      	lsrs	r0, r0, #1
 80007ca:	4010      	ands	r0, r2
 80007cc:	4318      	orrs	r0, r3
 80007ce:	e7b9      	b.n	8000744 <__aeabi_fadd+0x68>
 80007d0:	2e00      	cmp	r6, #0
 80007d2:	d100      	bne.n	80007d6 <__aeabi_fadd+0xfa>
 80007d4:	e083      	b.n	80008de <__aeabi_fadd+0x202>
 80007d6:	1e51      	subs	r1, r2, #1
 80007d8:	2a01      	cmp	r2, #1
 80007da:	d100      	bne.n	80007de <__aeabi_fadd+0x102>
 80007dc:	e0d8      	b.n	8000990 <__aeabi_fadd+0x2b4>
 80007de:	2aff      	cmp	r2, #255	; 0xff
 80007e0:	d045      	beq.n	800086e <__aeabi_fadd+0x192>
 80007e2:	000a      	movs	r2, r1
 80007e4:	e798      	b.n	8000718 <__aeabi_fadd+0x3c>
 80007e6:	27fe      	movs	r7, #254	; 0xfe
 80007e8:	1c6a      	adds	r2, r5, #1
 80007ea:	4217      	tst	r7, r2
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fadd+0x114>
 80007ee:	e086      	b.n	80008fe <__aeabi_fadd+0x222>
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fadd+0x11a>
 80007f4:	e0b7      	b.n	8000966 <__aeabi_fadd+0x28a>
 80007f6:	4643      	mov	r3, r8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0x122>
 80007fc:	e0f3      	b.n	80009e6 <__aeabi_fadd+0x30a>
 80007fe:	2200      	movs	r2, #0
 8000800:	2e00      	cmp	r6, #0
 8000802:	d0b0      	beq.n	8000766 <__aeabi_fadd+0x8a>
 8000804:	1b98      	subs	r0, r3, r6
 8000806:	0143      	lsls	r3, r0, #5
 8000808:	d400      	bmi.n	800080c <__aeabi_fadd+0x130>
 800080a:	e0fa      	b.n	8000a02 <__aeabi_fadd+0x326>
 800080c:	4643      	mov	r3, r8
 800080e:	000c      	movs	r4, r1
 8000810:	1af0      	subs	r0, r6, r3
 8000812:	e797      	b.n	8000744 <__aeabi_fadd+0x68>
 8000814:	2e00      	cmp	r6, #0
 8000816:	d100      	bne.n	800081a <__aeabi_fadd+0x13e>
 8000818:	e0c8      	b.n	80009ac <__aeabi_fadd+0x2d0>
 800081a:	1e4a      	subs	r2, r1, #1
 800081c:	2901      	cmp	r1, #1
 800081e:	d100      	bne.n	8000822 <__aeabi_fadd+0x146>
 8000820:	e0ae      	b.n	8000980 <__aeabi_fadd+0x2a4>
 8000822:	29ff      	cmp	r1, #255	; 0xff
 8000824:	d023      	beq.n	800086e <__aeabi_fadd+0x192>
 8000826:	0011      	movs	r1, r2
 8000828:	e7c1      	b.n	80007ae <__aeabi_fadd+0xd2>
 800082a:	2300      	movs	r3, #0
 800082c:	22ff      	movs	r2, #255	; 0xff
 800082e:	469c      	mov	ip, r3
 8000830:	e799      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000832:	21fe      	movs	r1, #254	; 0xfe
 8000834:	1c6a      	adds	r2, r5, #1
 8000836:	4211      	tst	r1, r2
 8000838:	d077      	beq.n	800092a <__aeabi_fadd+0x24e>
 800083a:	2aff      	cmp	r2, #255	; 0xff
 800083c:	d0f5      	beq.n	800082a <__aeabi_fadd+0x14e>
 800083e:	0015      	movs	r5, r2
 8000840:	4446      	add	r6, r8
 8000842:	0870      	lsrs	r0, r6, #1
 8000844:	0743      	lsls	r3, r0, #29
 8000846:	d000      	beq.n	800084a <__aeabi_fadd+0x16e>
 8000848:	e77e      	b.n	8000748 <__aeabi_fadd+0x6c>
 800084a:	08c3      	lsrs	r3, r0, #3
 800084c:	2dff      	cmp	r5, #255	; 0xff
 800084e:	d00e      	beq.n	800086e <__aeabi_fadd+0x192>
 8000850:	025b      	lsls	r3, r3, #9
 8000852:	0a5b      	lsrs	r3, r3, #9
 8000854:	469c      	mov	ip, r3
 8000856:	b2ea      	uxtb	r2, r5
 8000858:	e785      	b.n	8000766 <__aeabi_fadd+0x8a>
 800085a:	2e00      	cmp	r6, #0
 800085c:	d007      	beq.n	800086e <__aeabi_fadd+0x192>
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	03d2      	lsls	r2, r2, #15
 8000862:	4213      	tst	r3, r2
 8000864:	d003      	beq.n	800086e <__aeabi_fadd+0x192>
 8000866:	4210      	tst	r0, r2
 8000868:	d101      	bne.n	800086e <__aeabi_fadd+0x192>
 800086a:	000c      	movs	r4, r1
 800086c:	0003      	movs	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0db      	beq.n	800082a <__aeabi_fadd+0x14e>
 8000872:	2080      	movs	r0, #128	; 0x80
 8000874:	03c0      	lsls	r0, r0, #15
 8000876:	4318      	orrs	r0, r3
 8000878:	0240      	lsls	r0, r0, #9
 800087a:	0a43      	lsrs	r3, r0, #9
 800087c:	469c      	mov	ip, r3
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	e771      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000882:	2900      	cmp	r1, #0
 8000884:	d0d5      	beq.n	8000832 <__aeabi_fadd+0x156>
 8000886:	1b7a      	subs	r2, r7, r5
 8000888:	2d00      	cmp	r5, #0
 800088a:	d160      	bne.n	800094e <__aeabi_fadd+0x272>
 800088c:	4643      	mov	r3, r8
 800088e:	2b00      	cmp	r3, #0
 8000890:	d024      	beq.n	80008dc <__aeabi_fadd+0x200>
 8000892:	1e53      	subs	r3, r2, #1
 8000894:	2a01      	cmp	r2, #1
 8000896:	d073      	beq.n	8000980 <__aeabi_fadd+0x2a4>
 8000898:	2aff      	cmp	r2, #255	; 0xff
 800089a:	d0e7      	beq.n	800086c <__aeabi_fadd+0x190>
 800089c:	001a      	movs	r2, r3
 800089e:	2a1b      	cmp	r2, #27
 80008a0:	dc00      	bgt.n	80008a4 <__aeabi_fadd+0x1c8>
 80008a2:	e085      	b.n	80009b0 <__aeabi_fadd+0x2d4>
 80008a4:	2001      	movs	r0, #1
 80008a6:	003d      	movs	r5, r7
 80008a8:	1980      	adds	r0, r0, r6
 80008aa:	e785      	b.n	80007b8 <__aeabi_fadd+0xdc>
 80008ac:	2320      	movs	r3, #32
 80008ae:	003a      	movs	r2, r7
 80008b0:	1b45      	subs	r5, r0, r5
 80008b2:	0038      	movs	r0, r7
 80008b4:	3501      	adds	r5, #1
 80008b6:	40ea      	lsrs	r2, r5
 80008b8:	1b5d      	subs	r5, r3, r5
 80008ba:	40a8      	lsls	r0, r5
 80008bc:	1e43      	subs	r3, r0, #1
 80008be:	4198      	sbcs	r0, r3
 80008c0:	2500      	movs	r5, #0
 80008c2:	4310      	orrs	r0, r2
 80008c4:	e73e      	b.n	8000744 <__aeabi_fadd+0x68>
 80008c6:	2320      	movs	r3, #32
 80008c8:	0030      	movs	r0, r6
 80008ca:	1a9b      	subs	r3, r3, r2
 80008cc:	0031      	movs	r1, r6
 80008ce:	4098      	lsls	r0, r3
 80008d0:	40d1      	lsrs	r1, r2
 80008d2:	1e43      	subs	r3, r0, #1
 80008d4:	4198      	sbcs	r0, r3
 80008d6:	4308      	orrs	r0, r1
 80008d8:	e722      	b.n	8000720 <__aeabi_fadd+0x44>
 80008da:	000c      	movs	r4, r1
 80008dc:	0003      	movs	r3, r0
 80008de:	0015      	movs	r5, r2
 80008e0:	e7b4      	b.n	800084c <__aeabi_fadd+0x170>
 80008e2:	2fff      	cmp	r7, #255	; 0xff
 80008e4:	d0c1      	beq.n	800086a <__aeabi_fadd+0x18e>
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	4640      	mov	r0, r8
 80008ea:	04db      	lsls	r3, r3, #19
 80008ec:	4318      	orrs	r0, r3
 80008ee:	4680      	mov	r8, r0
 80008f0:	2a1b      	cmp	r2, #27
 80008f2:	dd51      	ble.n	8000998 <__aeabi_fadd+0x2bc>
 80008f4:	2001      	movs	r0, #1
 80008f6:	000c      	movs	r4, r1
 80008f8:	003d      	movs	r5, r7
 80008fa:	1a30      	subs	r0, r6, r0
 80008fc:	e712      	b.n	8000724 <__aeabi_fadd+0x48>
 80008fe:	4643      	mov	r3, r8
 8000900:	1b9f      	subs	r7, r3, r6
 8000902:	017b      	lsls	r3, r7, #5
 8000904:	d42b      	bmi.n	800095e <__aeabi_fadd+0x282>
 8000906:	2f00      	cmp	r7, #0
 8000908:	d000      	beq.n	800090c <__aeabi_fadd+0x230>
 800090a:	e710      	b.n	800072e <__aeabi_fadd+0x52>
 800090c:	2300      	movs	r3, #0
 800090e:	2400      	movs	r4, #0
 8000910:	2200      	movs	r2, #0
 8000912:	469c      	mov	ip, r3
 8000914:	e727      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000916:	2320      	movs	r3, #32
 8000918:	0032      	movs	r2, r6
 800091a:	0030      	movs	r0, r6
 800091c:	40ca      	lsrs	r2, r1
 800091e:	1a59      	subs	r1, r3, r1
 8000920:	4088      	lsls	r0, r1
 8000922:	1e43      	subs	r3, r0, #1
 8000924:	4198      	sbcs	r0, r3
 8000926:	4310      	orrs	r0, r2
 8000928:	e745      	b.n	80007b6 <__aeabi_fadd+0xda>
 800092a:	2d00      	cmp	r5, #0
 800092c:	d14a      	bne.n	80009c4 <__aeabi_fadd+0x2e8>
 800092e:	4643      	mov	r3, r8
 8000930:	2b00      	cmp	r3, #0
 8000932:	d063      	beq.n	80009fc <__aeabi_fadd+0x320>
 8000934:	2200      	movs	r2, #0
 8000936:	2e00      	cmp	r6, #0
 8000938:	d100      	bne.n	800093c <__aeabi_fadd+0x260>
 800093a:	e714      	b.n	8000766 <__aeabi_fadd+0x8a>
 800093c:	0030      	movs	r0, r6
 800093e:	4440      	add	r0, r8
 8000940:	0143      	lsls	r3, r0, #5
 8000942:	d400      	bmi.n	8000946 <__aeabi_fadd+0x26a>
 8000944:	e77e      	b.n	8000844 <__aeabi_fadd+0x168>
 8000946:	4b32      	ldr	r3, [pc, #200]	; (8000a10 <__aeabi_fadd+0x334>)
 8000948:	3501      	adds	r5, #1
 800094a:	4018      	ands	r0, r3
 800094c:	e77a      	b.n	8000844 <__aeabi_fadd+0x168>
 800094e:	2fff      	cmp	r7, #255	; 0xff
 8000950:	d08c      	beq.n	800086c <__aeabi_fadd+0x190>
 8000952:	2380      	movs	r3, #128	; 0x80
 8000954:	4641      	mov	r1, r8
 8000956:	04db      	lsls	r3, r3, #19
 8000958:	4319      	orrs	r1, r3
 800095a:	4688      	mov	r8, r1
 800095c:	e79f      	b.n	800089e <__aeabi_fadd+0x1c2>
 800095e:	4643      	mov	r3, r8
 8000960:	000c      	movs	r4, r1
 8000962:	1af7      	subs	r7, r6, r3
 8000964:	e6e3      	b.n	800072e <__aeabi_fadd+0x52>
 8000966:	4642      	mov	r2, r8
 8000968:	2a00      	cmp	r2, #0
 800096a:	d000      	beq.n	800096e <__aeabi_fadd+0x292>
 800096c:	e775      	b.n	800085a <__aeabi_fadd+0x17e>
 800096e:	2e00      	cmp	r6, #0
 8000970:	d000      	beq.n	8000974 <__aeabi_fadd+0x298>
 8000972:	e77a      	b.n	800086a <__aeabi_fadd+0x18e>
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	03db      	lsls	r3, r3, #15
 8000978:	2400      	movs	r4, #0
 800097a:	469c      	mov	ip, r3
 800097c:	22ff      	movs	r2, #255	; 0xff
 800097e:	e6f2      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000980:	0030      	movs	r0, r6
 8000982:	4440      	add	r0, r8
 8000984:	2501      	movs	r5, #1
 8000986:	0143      	lsls	r3, r0, #5
 8000988:	d400      	bmi.n	800098c <__aeabi_fadd+0x2b0>
 800098a:	e75b      	b.n	8000844 <__aeabi_fadd+0x168>
 800098c:	2502      	movs	r5, #2
 800098e:	e718      	b.n	80007c2 <__aeabi_fadd+0xe6>
 8000990:	4643      	mov	r3, r8
 8000992:	2501      	movs	r5, #1
 8000994:	1b98      	subs	r0, r3, r6
 8000996:	e6c5      	b.n	8000724 <__aeabi_fadd+0x48>
 8000998:	2320      	movs	r3, #32
 800099a:	4644      	mov	r4, r8
 800099c:	4640      	mov	r0, r8
 800099e:	40d4      	lsrs	r4, r2
 80009a0:	1a9a      	subs	r2, r3, r2
 80009a2:	4090      	lsls	r0, r2
 80009a4:	1e43      	subs	r3, r0, #1
 80009a6:	4198      	sbcs	r0, r3
 80009a8:	4320      	orrs	r0, r4
 80009aa:	e7a4      	b.n	80008f6 <__aeabi_fadd+0x21a>
 80009ac:	000d      	movs	r5, r1
 80009ae:	e74d      	b.n	800084c <__aeabi_fadd+0x170>
 80009b0:	2320      	movs	r3, #32
 80009b2:	4641      	mov	r1, r8
 80009b4:	4640      	mov	r0, r8
 80009b6:	40d1      	lsrs	r1, r2
 80009b8:	1a9a      	subs	r2, r3, r2
 80009ba:	4090      	lsls	r0, r2
 80009bc:	1e43      	subs	r3, r0, #1
 80009be:	4198      	sbcs	r0, r3
 80009c0:	4308      	orrs	r0, r1
 80009c2:	e770      	b.n	80008a6 <__aeabi_fadd+0x1ca>
 80009c4:	4642      	mov	r2, r8
 80009c6:	2a00      	cmp	r2, #0
 80009c8:	d100      	bne.n	80009cc <__aeabi_fadd+0x2f0>
 80009ca:	e74f      	b.n	800086c <__aeabi_fadd+0x190>
 80009cc:	2e00      	cmp	r6, #0
 80009ce:	d100      	bne.n	80009d2 <__aeabi_fadd+0x2f6>
 80009d0:	e74d      	b.n	800086e <__aeabi_fadd+0x192>
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	03d2      	lsls	r2, r2, #15
 80009d6:	4213      	tst	r3, r2
 80009d8:	d100      	bne.n	80009dc <__aeabi_fadd+0x300>
 80009da:	e748      	b.n	800086e <__aeabi_fadd+0x192>
 80009dc:	4210      	tst	r0, r2
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x306>
 80009e0:	e745      	b.n	800086e <__aeabi_fadd+0x192>
 80009e2:	0003      	movs	r3, r0
 80009e4:	e743      	b.n	800086e <__aeabi_fadd+0x192>
 80009e6:	2e00      	cmp	r6, #0
 80009e8:	d090      	beq.n	800090c <__aeabi_fadd+0x230>
 80009ea:	000c      	movs	r4, r1
 80009ec:	4684      	mov	ip, r0
 80009ee:	2200      	movs	r2, #0
 80009f0:	e6b9      	b.n	8000766 <__aeabi_fadd+0x8a>
 80009f2:	4643      	mov	r3, r8
 80009f4:	000c      	movs	r4, r1
 80009f6:	1af0      	subs	r0, r6, r3
 80009f8:	3501      	adds	r5, #1
 80009fa:	e693      	b.n	8000724 <__aeabi_fadd+0x48>
 80009fc:	4684      	mov	ip, r0
 80009fe:	2200      	movs	r2, #0
 8000a00:	e6b1      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d000      	beq.n	8000a08 <__aeabi_fadd+0x32c>
 8000a06:	e71d      	b.n	8000844 <__aeabi_fadd+0x168>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2400      	movs	r4, #0
 8000a0c:	469c      	mov	ip, r3
 8000a0e:	e6aa      	b.n	8000766 <__aeabi_fadd+0x8a>
 8000a10:	fbffffff 	.word	0xfbffffff
 8000a14:	7dffffff 	.word	0x7dffffff

08000a18 <__aeabi_ui2f>:
 8000a18:	b570      	push	{r4, r5, r6, lr}
 8000a1a:	1e05      	subs	r5, r0, #0
 8000a1c:	d00e      	beq.n	8000a3c <__aeabi_ui2f+0x24>
 8000a1e:	f001 fef3 	bl	8002808 <__clzsi2>
 8000a22:	239e      	movs	r3, #158	; 0x9e
 8000a24:	0004      	movs	r4, r0
 8000a26:	1a1b      	subs	r3, r3, r0
 8000a28:	2b96      	cmp	r3, #150	; 0x96
 8000a2a:	dc0c      	bgt.n	8000a46 <__aeabi_ui2f+0x2e>
 8000a2c:	2808      	cmp	r0, #8
 8000a2e:	dd01      	ble.n	8000a34 <__aeabi_ui2f+0x1c>
 8000a30:	3c08      	subs	r4, #8
 8000a32:	40a5      	lsls	r5, r4
 8000a34:	026d      	lsls	r5, r5, #9
 8000a36:	0a6d      	lsrs	r5, r5, #9
 8000a38:	b2d8      	uxtb	r0, r3
 8000a3a:	e001      	b.n	8000a40 <__aeabi_ui2f+0x28>
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	2500      	movs	r5, #0
 8000a40:	05c0      	lsls	r0, r0, #23
 8000a42:	4328      	orrs	r0, r5
 8000a44:	bd70      	pop	{r4, r5, r6, pc}
 8000a46:	2b99      	cmp	r3, #153	; 0x99
 8000a48:	dd09      	ble.n	8000a5e <__aeabi_ui2f+0x46>
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	0029      	movs	r1, r5
 8000a4e:	321b      	adds	r2, #27
 8000a50:	4091      	lsls	r1, r2
 8000a52:	1e4a      	subs	r2, r1, #1
 8000a54:	4191      	sbcs	r1, r2
 8000a56:	2205      	movs	r2, #5
 8000a58:	1a12      	subs	r2, r2, r0
 8000a5a:	40d5      	lsrs	r5, r2
 8000a5c:	430d      	orrs	r5, r1
 8000a5e:	2c05      	cmp	r4, #5
 8000a60:	dc12      	bgt.n	8000a88 <__aeabi_ui2f+0x70>
 8000a62:	0029      	movs	r1, r5
 8000a64:	4e0c      	ldr	r6, [pc, #48]	; (8000a98 <__aeabi_ui2f+0x80>)
 8000a66:	4031      	ands	r1, r6
 8000a68:	076a      	lsls	r2, r5, #29
 8000a6a:	d009      	beq.n	8000a80 <__aeabi_ui2f+0x68>
 8000a6c:	200f      	movs	r0, #15
 8000a6e:	4028      	ands	r0, r5
 8000a70:	2804      	cmp	r0, #4
 8000a72:	d005      	beq.n	8000a80 <__aeabi_ui2f+0x68>
 8000a74:	3104      	adds	r1, #4
 8000a76:	014a      	lsls	r2, r1, #5
 8000a78:	d502      	bpl.n	8000a80 <__aeabi_ui2f+0x68>
 8000a7a:	239f      	movs	r3, #159	; 0x9f
 8000a7c:	4031      	ands	r1, r6
 8000a7e:	1b1b      	subs	r3, r3, r4
 8000a80:	0189      	lsls	r1, r1, #6
 8000a82:	0a4d      	lsrs	r5, r1, #9
 8000a84:	b2d8      	uxtb	r0, r3
 8000a86:	e7db      	b.n	8000a40 <__aeabi_ui2f+0x28>
 8000a88:	1f62      	subs	r2, r4, #5
 8000a8a:	4095      	lsls	r5, r2
 8000a8c:	0029      	movs	r1, r5
 8000a8e:	4e02      	ldr	r6, [pc, #8]	; (8000a98 <__aeabi_ui2f+0x80>)
 8000a90:	4031      	ands	r1, r6
 8000a92:	076a      	lsls	r2, r5, #29
 8000a94:	d0f4      	beq.n	8000a80 <__aeabi_ui2f+0x68>
 8000a96:	e7e9      	b.n	8000a6c <__aeabi_ui2f+0x54>
 8000a98:	fbffffff 	.word	0xfbffffff

08000a9c <__aeabi_dadd>:
 8000a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a9e:	464f      	mov	r7, r9
 8000aa0:	4646      	mov	r6, r8
 8000aa2:	46d6      	mov	lr, sl
 8000aa4:	000d      	movs	r5, r1
 8000aa6:	0004      	movs	r4, r0
 8000aa8:	b5c0      	push	{r6, r7, lr}
 8000aaa:	001f      	movs	r7, r3
 8000aac:	0011      	movs	r1, r2
 8000aae:	0328      	lsls	r0, r5, #12
 8000ab0:	0f62      	lsrs	r2, r4, #29
 8000ab2:	0a40      	lsrs	r0, r0, #9
 8000ab4:	4310      	orrs	r0, r2
 8000ab6:	007a      	lsls	r2, r7, #1
 8000ab8:	0d52      	lsrs	r2, r2, #21
 8000aba:	00e3      	lsls	r3, r4, #3
 8000abc:	033c      	lsls	r4, r7, #12
 8000abe:	4691      	mov	r9, r2
 8000ac0:	0a64      	lsrs	r4, r4, #9
 8000ac2:	0ffa      	lsrs	r2, r7, #31
 8000ac4:	0f4f      	lsrs	r7, r1, #29
 8000ac6:	006e      	lsls	r6, r5, #1
 8000ac8:	4327      	orrs	r7, r4
 8000aca:	4692      	mov	sl, r2
 8000acc:	46b8      	mov	r8, r7
 8000ace:	0d76      	lsrs	r6, r6, #21
 8000ad0:	0fed      	lsrs	r5, r5, #31
 8000ad2:	00c9      	lsls	r1, r1, #3
 8000ad4:	4295      	cmp	r5, r2
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dadd+0x3e>
 8000ad8:	e099      	b.n	8000c0e <__aeabi_dadd+0x172>
 8000ada:	464c      	mov	r4, r9
 8000adc:	1b34      	subs	r4, r6, r4
 8000ade:	46a4      	mov	ip, r4
 8000ae0:	2c00      	cmp	r4, #0
 8000ae2:	dc00      	bgt.n	8000ae6 <__aeabi_dadd+0x4a>
 8000ae4:	e07c      	b.n	8000be0 <__aeabi_dadd+0x144>
 8000ae6:	464a      	mov	r2, r9
 8000ae8:	2a00      	cmp	r2, #0
 8000aea:	d100      	bne.n	8000aee <__aeabi_dadd+0x52>
 8000aec:	e0b8      	b.n	8000c60 <__aeabi_dadd+0x1c4>
 8000aee:	4ac5      	ldr	r2, [pc, #788]	; (8000e04 <__aeabi_dadd+0x368>)
 8000af0:	4296      	cmp	r6, r2
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dadd+0x5a>
 8000af4:	e11c      	b.n	8000d30 <__aeabi_dadd+0x294>
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	003c      	movs	r4, r7
 8000afa:	0412      	lsls	r2, r2, #16
 8000afc:	4314      	orrs	r4, r2
 8000afe:	46a0      	mov	r8, r4
 8000b00:	4662      	mov	r2, ip
 8000b02:	2a38      	cmp	r2, #56	; 0x38
 8000b04:	dd00      	ble.n	8000b08 <__aeabi_dadd+0x6c>
 8000b06:	e161      	b.n	8000dcc <__aeabi_dadd+0x330>
 8000b08:	2a1f      	cmp	r2, #31
 8000b0a:	dd00      	ble.n	8000b0e <__aeabi_dadd+0x72>
 8000b0c:	e1cc      	b.n	8000ea8 <__aeabi_dadd+0x40c>
 8000b0e:	4664      	mov	r4, ip
 8000b10:	2220      	movs	r2, #32
 8000b12:	1b12      	subs	r2, r2, r4
 8000b14:	4644      	mov	r4, r8
 8000b16:	4094      	lsls	r4, r2
 8000b18:	000f      	movs	r7, r1
 8000b1a:	46a1      	mov	r9, r4
 8000b1c:	4664      	mov	r4, ip
 8000b1e:	4091      	lsls	r1, r2
 8000b20:	40e7      	lsrs	r7, r4
 8000b22:	464c      	mov	r4, r9
 8000b24:	1e4a      	subs	r2, r1, #1
 8000b26:	4191      	sbcs	r1, r2
 8000b28:	433c      	orrs	r4, r7
 8000b2a:	4642      	mov	r2, r8
 8000b2c:	4321      	orrs	r1, r4
 8000b2e:	4664      	mov	r4, ip
 8000b30:	40e2      	lsrs	r2, r4
 8000b32:	1a80      	subs	r0, r0, r2
 8000b34:	1a5c      	subs	r4, r3, r1
 8000b36:	42a3      	cmp	r3, r4
 8000b38:	419b      	sbcs	r3, r3
 8000b3a:	425f      	negs	r7, r3
 8000b3c:	1bc7      	subs	r7, r0, r7
 8000b3e:	023b      	lsls	r3, r7, #8
 8000b40:	d400      	bmi.n	8000b44 <__aeabi_dadd+0xa8>
 8000b42:	e0d0      	b.n	8000ce6 <__aeabi_dadd+0x24a>
 8000b44:	027f      	lsls	r7, r7, #9
 8000b46:	0a7f      	lsrs	r7, r7, #9
 8000b48:	2f00      	cmp	r7, #0
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dadd+0xb2>
 8000b4c:	e0ff      	b.n	8000d4e <__aeabi_dadd+0x2b2>
 8000b4e:	0038      	movs	r0, r7
 8000b50:	f001 fe5a 	bl	8002808 <__clzsi2>
 8000b54:	0001      	movs	r1, r0
 8000b56:	3908      	subs	r1, #8
 8000b58:	2320      	movs	r3, #32
 8000b5a:	0022      	movs	r2, r4
 8000b5c:	1a5b      	subs	r3, r3, r1
 8000b5e:	408f      	lsls	r7, r1
 8000b60:	40da      	lsrs	r2, r3
 8000b62:	408c      	lsls	r4, r1
 8000b64:	4317      	orrs	r7, r2
 8000b66:	42b1      	cmp	r1, r6
 8000b68:	da00      	bge.n	8000b6c <__aeabi_dadd+0xd0>
 8000b6a:	e0ff      	b.n	8000d6c <__aeabi_dadd+0x2d0>
 8000b6c:	1b89      	subs	r1, r1, r6
 8000b6e:	1c4b      	adds	r3, r1, #1
 8000b70:	2b1f      	cmp	r3, #31
 8000b72:	dd00      	ble.n	8000b76 <__aeabi_dadd+0xda>
 8000b74:	e0a8      	b.n	8000cc8 <__aeabi_dadd+0x22c>
 8000b76:	2220      	movs	r2, #32
 8000b78:	0039      	movs	r1, r7
 8000b7a:	1ad2      	subs	r2, r2, r3
 8000b7c:	0020      	movs	r0, r4
 8000b7e:	4094      	lsls	r4, r2
 8000b80:	4091      	lsls	r1, r2
 8000b82:	40d8      	lsrs	r0, r3
 8000b84:	1e62      	subs	r2, r4, #1
 8000b86:	4194      	sbcs	r4, r2
 8000b88:	40df      	lsrs	r7, r3
 8000b8a:	2600      	movs	r6, #0
 8000b8c:	4301      	orrs	r1, r0
 8000b8e:	430c      	orrs	r4, r1
 8000b90:	0763      	lsls	r3, r4, #29
 8000b92:	d009      	beq.n	8000ba8 <__aeabi_dadd+0x10c>
 8000b94:	230f      	movs	r3, #15
 8000b96:	4023      	ands	r3, r4
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d005      	beq.n	8000ba8 <__aeabi_dadd+0x10c>
 8000b9c:	1d23      	adds	r3, r4, #4
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	41a4      	sbcs	r4, r4
 8000ba2:	4264      	negs	r4, r4
 8000ba4:	193f      	adds	r7, r7, r4
 8000ba6:	001c      	movs	r4, r3
 8000ba8:	023b      	lsls	r3, r7, #8
 8000baa:	d400      	bmi.n	8000bae <__aeabi_dadd+0x112>
 8000bac:	e09e      	b.n	8000cec <__aeabi_dadd+0x250>
 8000bae:	4b95      	ldr	r3, [pc, #596]	; (8000e04 <__aeabi_dadd+0x368>)
 8000bb0:	3601      	adds	r6, #1
 8000bb2:	429e      	cmp	r6, r3
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dadd+0x11c>
 8000bb6:	e0b7      	b.n	8000d28 <__aeabi_dadd+0x28c>
 8000bb8:	4a93      	ldr	r2, [pc, #588]	; (8000e08 <__aeabi_dadd+0x36c>)
 8000bba:	08e4      	lsrs	r4, r4, #3
 8000bbc:	4017      	ands	r7, r2
 8000bbe:	077b      	lsls	r3, r7, #29
 8000bc0:	0571      	lsls	r1, r6, #21
 8000bc2:	027f      	lsls	r7, r7, #9
 8000bc4:	4323      	orrs	r3, r4
 8000bc6:	0b3f      	lsrs	r7, r7, #12
 8000bc8:	0d4a      	lsrs	r2, r1, #21
 8000bca:	0512      	lsls	r2, r2, #20
 8000bcc:	433a      	orrs	r2, r7
 8000bce:	07ed      	lsls	r5, r5, #31
 8000bd0:	432a      	orrs	r2, r5
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	0011      	movs	r1, r2
 8000bd6:	bce0      	pop	{r5, r6, r7}
 8000bd8:	46ba      	mov	sl, r7
 8000bda:	46b1      	mov	r9, r6
 8000bdc:	46a8      	mov	r8, r5
 8000bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be0:	2c00      	cmp	r4, #0
 8000be2:	d04b      	beq.n	8000c7c <__aeabi_dadd+0x1e0>
 8000be4:	464c      	mov	r4, r9
 8000be6:	1ba4      	subs	r4, r4, r6
 8000be8:	46a4      	mov	ip, r4
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	d000      	beq.n	8000bf0 <__aeabi_dadd+0x154>
 8000bee:	e123      	b.n	8000e38 <__aeabi_dadd+0x39c>
 8000bf0:	0004      	movs	r4, r0
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	d100      	bne.n	8000bf8 <__aeabi_dadd+0x15c>
 8000bf6:	e1af      	b.n	8000f58 <__aeabi_dadd+0x4bc>
 8000bf8:	4662      	mov	r2, ip
 8000bfa:	1e54      	subs	r4, r2, #1
 8000bfc:	2a01      	cmp	r2, #1
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dadd+0x166>
 8000c00:	e215      	b.n	800102e <__aeabi_dadd+0x592>
 8000c02:	4d80      	ldr	r5, [pc, #512]	; (8000e04 <__aeabi_dadd+0x368>)
 8000c04:	45ac      	cmp	ip, r5
 8000c06:	d100      	bne.n	8000c0a <__aeabi_dadd+0x16e>
 8000c08:	e1c8      	b.n	8000f9c <__aeabi_dadd+0x500>
 8000c0a:	46a4      	mov	ip, r4
 8000c0c:	e11b      	b.n	8000e46 <__aeabi_dadd+0x3aa>
 8000c0e:	464a      	mov	r2, r9
 8000c10:	1ab2      	subs	r2, r6, r2
 8000c12:	4694      	mov	ip, r2
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	dc00      	bgt.n	8000c1a <__aeabi_dadd+0x17e>
 8000c18:	e0ac      	b.n	8000d74 <__aeabi_dadd+0x2d8>
 8000c1a:	464a      	mov	r2, r9
 8000c1c:	2a00      	cmp	r2, #0
 8000c1e:	d043      	beq.n	8000ca8 <__aeabi_dadd+0x20c>
 8000c20:	4a78      	ldr	r2, [pc, #480]	; (8000e04 <__aeabi_dadd+0x368>)
 8000c22:	4296      	cmp	r6, r2
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dadd+0x18c>
 8000c26:	e1af      	b.n	8000f88 <__aeabi_dadd+0x4ec>
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	003c      	movs	r4, r7
 8000c2c:	0412      	lsls	r2, r2, #16
 8000c2e:	4314      	orrs	r4, r2
 8000c30:	46a0      	mov	r8, r4
 8000c32:	4662      	mov	r2, ip
 8000c34:	2a38      	cmp	r2, #56	; 0x38
 8000c36:	dc67      	bgt.n	8000d08 <__aeabi_dadd+0x26c>
 8000c38:	2a1f      	cmp	r2, #31
 8000c3a:	dc00      	bgt.n	8000c3e <__aeabi_dadd+0x1a2>
 8000c3c:	e15f      	b.n	8000efe <__aeabi_dadd+0x462>
 8000c3e:	4647      	mov	r7, r8
 8000c40:	3a20      	subs	r2, #32
 8000c42:	40d7      	lsrs	r7, r2
 8000c44:	4662      	mov	r2, ip
 8000c46:	2a20      	cmp	r2, #32
 8000c48:	d005      	beq.n	8000c56 <__aeabi_dadd+0x1ba>
 8000c4a:	4664      	mov	r4, ip
 8000c4c:	2240      	movs	r2, #64	; 0x40
 8000c4e:	1b12      	subs	r2, r2, r4
 8000c50:	4644      	mov	r4, r8
 8000c52:	4094      	lsls	r4, r2
 8000c54:	4321      	orrs	r1, r4
 8000c56:	1e4a      	subs	r2, r1, #1
 8000c58:	4191      	sbcs	r1, r2
 8000c5a:	000c      	movs	r4, r1
 8000c5c:	433c      	orrs	r4, r7
 8000c5e:	e057      	b.n	8000d10 <__aeabi_dadd+0x274>
 8000c60:	003a      	movs	r2, r7
 8000c62:	430a      	orrs	r2, r1
 8000c64:	d100      	bne.n	8000c68 <__aeabi_dadd+0x1cc>
 8000c66:	e105      	b.n	8000e74 <__aeabi_dadd+0x3d8>
 8000c68:	0022      	movs	r2, r4
 8000c6a:	3a01      	subs	r2, #1
 8000c6c:	2c01      	cmp	r4, #1
 8000c6e:	d100      	bne.n	8000c72 <__aeabi_dadd+0x1d6>
 8000c70:	e182      	b.n	8000f78 <__aeabi_dadd+0x4dc>
 8000c72:	4c64      	ldr	r4, [pc, #400]	; (8000e04 <__aeabi_dadd+0x368>)
 8000c74:	45a4      	cmp	ip, r4
 8000c76:	d05b      	beq.n	8000d30 <__aeabi_dadd+0x294>
 8000c78:	4694      	mov	ip, r2
 8000c7a:	e741      	b.n	8000b00 <__aeabi_dadd+0x64>
 8000c7c:	4c63      	ldr	r4, [pc, #396]	; (8000e0c <__aeabi_dadd+0x370>)
 8000c7e:	1c77      	adds	r7, r6, #1
 8000c80:	4227      	tst	r7, r4
 8000c82:	d000      	beq.n	8000c86 <__aeabi_dadd+0x1ea>
 8000c84:	e0c4      	b.n	8000e10 <__aeabi_dadd+0x374>
 8000c86:	0004      	movs	r4, r0
 8000c88:	431c      	orrs	r4, r3
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_dadd+0x1f4>
 8000c8e:	e169      	b.n	8000f64 <__aeabi_dadd+0x4c8>
 8000c90:	2c00      	cmp	r4, #0
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x1fa>
 8000c94:	e1bf      	b.n	8001016 <__aeabi_dadd+0x57a>
 8000c96:	4644      	mov	r4, r8
 8000c98:	430c      	orrs	r4, r1
 8000c9a:	d000      	beq.n	8000c9e <__aeabi_dadd+0x202>
 8000c9c:	e1d0      	b.n	8001040 <__aeabi_dadd+0x5a4>
 8000c9e:	0742      	lsls	r2, r0, #29
 8000ca0:	08db      	lsrs	r3, r3, #3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	08c0      	lsrs	r0, r0, #3
 8000ca6:	e029      	b.n	8000cfc <__aeabi_dadd+0x260>
 8000ca8:	003a      	movs	r2, r7
 8000caa:	430a      	orrs	r2, r1
 8000cac:	d100      	bne.n	8000cb0 <__aeabi_dadd+0x214>
 8000cae:	e170      	b.n	8000f92 <__aeabi_dadd+0x4f6>
 8000cb0:	4662      	mov	r2, ip
 8000cb2:	4664      	mov	r4, ip
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	2c01      	cmp	r4, #1
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_dadd+0x220>
 8000cba:	e0e0      	b.n	8000e7e <__aeabi_dadd+0x3e2>
 8000cbc:	4c51      	ldr	r4, [pc, #324]	; (8000e04 <__aeabi_dadd+0x368>)
 8000cbe:	45a4      	cmp	ip, r4
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dadd+0x228>
 8000cc2:	e161      	b.n	8000f88 <__aeabi_dadd+0x4ec>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	e7b4      	b.n	8000c32 <__aeabi_dadd+0x196>
 8000cc8:	003a      	movs	r2, r7
 8000cca:	391f      	subs	r1, #31
 8000ccc:	40ca      	lsrs	r2, r1
 8000cce:	0011      	movs	r1, r2
 8000cd0:	2b20      	cmp	r3, #32
 8000cd2:	d003      	beq.n	8000cdc <__aeabi_dadd+0x240>
 8000cd4:	2240      	movs	r2, #64	; 0x40
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	409f      	lsls	r7, r3
 8000cda:	433c      	orrs	r4, r7
 8000cdc:	1e63      	subs	r3, r4, #1
 8000cde:	419c      	sbcs	r4, r3
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	2600      	movs	r6, #0
 8000ce4:	430c      	orrs	r4, r1
 8000ce6:	0763      	lsls	r3, r4, #29
 8000ce8:	d000      	beq.n	8000cec <__aeabi_dadd+0x250>
 8000cea:	e753      	b.n	8000b94 <__aeabi_dadd+0xf8>
 8000cec:	46b4      	mov	ip, r6
 8000cee:	08e4      	lsrs	r4, r4, #3
 8000cf0:	077b      	lsls	r3, r7, #29
 8000cf2:	4323      	orrs	r3, r4
 8000cf4:	08f8      	lsrs	r0, r7, #3
 8000cf6:	4a43      	ldr	r2, [pc, #268]	; (8000e04 <__aeabi_dadd+0x368>)
 8000cf8:	4594      	cmp	ip, r2
 8000cfa:	d01d      	beq.n	8000d38 <__aeabi_dadd+0x29c>
 8000cfc:	4662      	mov	r2, ip
 8000cfe:	0307      	lsls	r7, r0, #12
 8000d00:	0552      	lsls	r2, r2, #21
 8000d02:	0b3f      	lsrs	r7, r7, #12
 8000d04:	0d52      	lsrs	r2, r2, #21
 8000d06:	e760      	b.n	8000bca <__aeabi_dadd+0x12e>
 8000d08:	4644      	mov	r4, r8
 8000d0a:	430c      	orrs	r4, r1
 8000d0c:	1e62      	subs	r2, r4, #1
 8000d0e:	4194      	sbcs	r4, r2
 8000d10:	18e4      	adds	r4, r4, r3
 8000d12:	429c      	cmp	r4, r3
 8000d14:	419b      	sbcs	r3, r3
 8000d16:	425f      	negs	r7, r3
 8000d18:	183f      	adds	r7, r7, r0
 8000d1a:	023b      	lsls	r3, r7, #8
 8000d1c:	d5e3      	bpl.n	8000ce6 <__aeabi_dadd+0x24a>
 8000d1e:	4b39      	ldr	r3, [pc, #228]	; (8000e04 <__aeabi_dadd+0x368>)
 8000d20:	3601      	adds	r6, #1
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d000      	beq.n	8000d28 <__aeabi_dadd+0x28c>
 8000d26:	e0b5      	b.n	8000e94 <__aeabi_dadd+0x3f8>
 8000d28:	0032      	movs	r2, r6
 8000d2a:	2700      	movs	r7, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e74c      	b.n	8000bca <__aeabi_dadd+0x12e>
 8000d30:	0742      	lsls	r2, r0, #29
 8000d32:	08db      	lsrs	r3, r3, #3
 8000d34:	4313      	orrs	r3, r2
 8000d36:	08c0      	lsrs	r0, r0, #3
 8000d38:	001a      	movs	r2, r3
 8000d3a:	4302      	orrs	r2, r0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_dadd+0x2a4>
 8000d3e:	e1e1      	b.n	8001104 <__aeabi_dadd+0x668>
 8000d40:	2780      	movs	r7, #128	; 0x80
 8000d42:	033f      	lsls	r7, r7, #12
 8000d44:	4307      	orrs	r7, r0
 8000d46:	033f      	lsls	r7, r7, #12
 8000d48:	4a2e      	ldr	r2, [pc, #184]	; (8000e04 <__aeabi_dadd+0x368>)
 8000d4a:	0b3f      	lsrs	r7, r7, #12
 8000d4c:	e73d      	b.n	8000bca <__aeabi_dadd+0x12e>
 8000d4e:	0020      	movs	r0, r4
 8000d50:	f001 fd5a 	bl	8002808 <__clzsi2>
 8000d54:	0001      	movs	r1, r0
 8000d56:	3118      	adds	r1, #24
 8000d58:	291f      	cmp	r1, #31
 8000d5a:	dc00      	bgt.n	8000d5e <__aeabi_dadd+0x2c2>
 8000d5c:	e6fc      	b.n	8000b58 <__aeabi_dadd+0xbc>
 8000d5e:	3808      	subs	r0, #8
 8000d60:	4084      	lsls	r4, r0
 8000d62:	0027      	movs	r7, r4
 8000d64:	2400      	movs	r4, #0
 8000d66:	42b1      	cmp	r1, r6
 8000d68:	db00      	blt.n	8000d6c <__aeabi_dadd+0x2d0>
 8000d6a:	e6ff      	b.n	8000b6c <__aeabi_dadd+0xd0>
 8000d6c:	4a26      	ldr	r2, [pc, #152]	; (8000e08 <__aeabi_dadd+0x36c>)
 8000d6e:	1a76      	subs	r6, r6, r1
 8000d70:	4017      	ands	r7, r2
 8000d72:	e70d      	b.n	8000b90 <__aeabi_dadd+0xf4>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	d02f      	beq.n	8000dd8 <__aeabi_dadd+0x33c>
 8000d78:	464a      	mov	r2, r9
 8000d7a:	1b92      	subs	r2, r2, r6
 8000d7c:	4694      	mov	ip, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d100      	bne.n	8000d84 <__aeabi_dadd+0x2e8>
 8000d82:	e0ad      	b.n	8000ee0 <__aeabi_dadd+0x444>
 8000d84:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <__aeabi_dadd+0x368>)
 8000d86:	4591      	cmp	r9, r2
 8000d88:	d100      	bne.n	8000d8c <__aeabi_dadd+0x2f0>
 8000d8a:	e10f      	b.n	8000fac <__aeabi_dadd+0x510>
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	0412      	lsls	r2, r2, #16
 8000d90:	4310      	orrs	r0, r2
 8000d92:	4662      	mov	r2, ip
 8000d94:	2a38      	cmp	r2, #56	; 0x38
 8000d96:	dd00      	ble.n	8000d9a <__aeabi_dadd+0x2fe>
 8000d98:	e10f      	b.n	8000fba <__aeabi_dadd+0x51e>
 8000d9a:	2a1f      	cmp	r2, #31
 8000d9c:	dd00      	ble.n	8000da0 <__aeabi_dadd+0x304>
 8000d9e:	e180      	b.n	80010a2 <__aeabi_dadd+0x606>
 8000da0:	4664      	mov	r4, ip
 8000da2:	2220      	movs	r2, #32
 8000da4:	001e      	movs	r6, r3
 8000da6:	1b12      	subs	r2, r2, r4
 8000da8:	4667      	mov	r7, ip
 8000daa:	0004      	movs	r4, r0
 8000dac:	4093      	lsls	r3, r2
 8000dae:	4094      	lsls	r4, r2
 8000db0:	40fe      	lsrs	r6, r7
 8000db2:	1e5a      	subs	r2, r3, #1
 8000db4:	4193      	sbcs	r3, r2
 8000db6:	40f8      	lsrs	r0, r7
 8000db8:	4334      	orrs	r4, r6
 8000dba:	431c      	orrs	r4, r3
 8000dbc:	4480      	add	r8, r0
 8000dbe:	1864      	adds	r4, r4, r1
 8000dc0:	428c      	cmp	r4, r1
 8000dc2:	41bf      	sbcs	r7, r7
 8000dc4:	427f      	negs	r7, r7
 8000dc6:	464e      	mov	r6, r9
 8000dc8:	4447      	add	r7, r8
 8000dca:	e7a6      	b.n	8000d1a <__aeabi_dadd+0x27e>
 8000dcc:	4642      	mov	r2, r8
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	0011      	movs	r1, r2
 8000dd2:	1e4a      	subs	r2, r1, #1
 8000dd4:	4191      	sbcs	r1, r2
 8000dd6:	e6ad      	b.n	8000b34 <__aeabi_dadd+0x98>
 8000dd8:	4c0c      	ldr	r4, [pc, #48]	; (8000e0c <__aeabi_dadd+0x370>)
 8000dda:	1c72      	adds	r2, r6, #1
 8000ddc:	4222      	tst	r2, r4
 8000dde:	d000      	beq.n	8000de2 <__aeabi_dadd+0x346>
 8000de0:	e0a1      	b.n	8000f26 <__aeabi_dadd+0x48a>
 8000de2:	0002      	movs	r2, r0
 8000de4:	431a      	orrs	r2, r3
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d000      	beq.n	8000dec <__aeabi_dadd+0x350>
 8000dea:	e0fa      	b.n	8000fe2 <__aeabi_dadd+0x546>
 8000dec:	2a00      	cmp	r2, #0
 8000dee:	d100      	bne.n	8000df2 <__aeabi_dadd+0x356>
 8000df0:	e145      	b.n	800107e <__aeabi_dadd+0x5e2>
 8000df2:	003a      	movs	r2, r7
 8000df4:	430a      	orrs	r2, r1
 8000df6:	d000      	beq.n	8000dfa <__aeabi_dadd+0x35e>
 8000df8:	e146      	b.n	8001088 <__aeabi_dadd+0x5ec>
 8000dfa:	0742      	lsls	r2, r0, #29
 8000dfc:	08db      	lsrs	r3, r3, #3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	08c0      	lsrs	r0, r0, #3
 8000e02:	e77b      	b.n	8000cfc <__aeabi_dadd+0x260>
 8000e04:	000007ff 	.word	0x000007ff
 8000e08:	ff7fffff 	.word	0xff7fffff
 8000e0c:	000007fe 	.word	0x000007fe
 8000e10:	4647      	mov	r7, r8
 8000e12:	1a5c      	subs	r4, r3, r1
 8000e14:	1bc2      	subs	r2, r0, r7
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	41bf      	sbcs	r7, r7
 8000e1a:	427f      	negs	r7, r7
 8000e1c:	46b9      	mov	r9, r7
 8000e1e:	0017      	movs	r7, r2
 8000e20:	464a      	mov	r2, r9
 8000e22:	1abf      	subs	r7, r7, r2
 8000e24:	023a      	lsls	r2, r7, #8
 8000e26:	d500      	bpl.n	8000e2a <__aeabi_dadd+0x38e>
 8000e28:	e08d      	b.n	8000f46 <__aeabi_dadd+0x4aa>
 8000e2a:	0023      	movs	r3, r4
 8000e2c:	433b      	orrs	r3, r7
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x396>
 8000e30:	e68a      	b.n	8000b48 <__aeabi_dadd+0xac>
 8000e32:	2000      	movs	r0, #0
 8000e34:	2500      	movs	r5, #0
 8000e36:	e761      	b.n	8000cfc <__aeabi_dadd+0x260>
 8000e38:	4cb4      	ldr	r4, [pc, #720]	; (800110c <__aeabi_dadd+0x670>)
 8000e3a:	45a1      	cmp	r9, r4
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_dadd+0x3a4>
 8000e3e:	e0ad      	b.n	8000f9c <__aeabi_dadd+0x500>
 8000e40:	2480      	movs	r4, #128	; 0x80
 8000e42:	0424      	lsls	r4, r4, #16
 8000e44:	4320      	orrs	r0, r4
 8000e46:	4664      	mov	r4, ip
 8000e48:	2c38      	cmp	r4, #56	; 0x38
 8000e4a:	dc3d      	bgt.n	8000ec8 <__aeabi_dadd+0x42c>
 8000e4c:	4662      	mov	r2, ip
 8000e4e:	2c1f      	cmp	r4, #31
 8000e50:	dd00      	ble.n	8000e54 <__aeabi_dadd+0x3b8>
 8000e52:	e0b7      	b.n	8000fc4 <__aeabi_dadd+0x528>
 8000e54:	2520      	movs	r5, #32
 8000e56:	001e      	movs	r6, r3
 8000e58:	1b2d      	subs	r5, r5, r4
 8000e5a:	0004      	movs	r4, r0
 8000e5c:	40ab      	lsls	r3, r5
 8000e5e:	40ac      	lsls	r4, r5
 8000e60:	40d6      	lsrs	r6, r2
 8000e62:	40d0      	lsrs	r0, r2
 8000e64:	4642      	mov	r2, r8
 8000e66:	1e5d      	subs	r5, r3, #1
 8000e68:	41ab      	sbcs	r3, r5
 8000e6a:	4334      	orrs	r4, r6
 8000e6c:	1a12      	subs	r2, r2, r0
 8000e6e:	4690      	mov	r8, r2
 8000e70:	4323      	orrs	r3, r4
 8000e72:	e02c      	b.n	8000ece <__aeabi_dadd+0x432>
 8000e74:	0742      	lsls	r2, r0, #29
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	08c0      	lsrs	r0, r0, #3
 8000e7c:	e73b      	b.n	8000cf6 <__aeabi_dadd+0x25a>
 8000e7e:	185c      	adds	r4, r3, r1
 8000e80:	429c      	cmp	r4, r3
 8000e82:	419b      	sbcs	r3, r3
 8000e84:	4440      	add	r0, r8
 8000e86:	425b      	negs	r3, r3
 8000e88:	18c7      	adds	r7, r0, r3
 8000e8a:	2601      	movs	r6, #1
 8000e8c:	023b      	lsls	r3, r7, #8
 8000e8e:	d400      	bmi.n	8000e92 <__aeabi_dadd+0x3f6>
 8000e90:	e729      	b.n	8000ce6 <__aeabi_dadd+0x24a>
 8000e92:	2602      	movs	r6, #2
 8000e94:	4a9e      	ldr	r2, [pc, #632]	; (8001110 <__aeabi_dadd+0x674>)
 8000e96:	0863      	lsrs	r3, r4, #1
 8000e98:	4017      	ands	r7, r2
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	4014      	ands	r4, r2
 8000e9e:	431c      	orrs	r4, r3
 8000ea0:	07fb      	lsls	r3, r7, #31
 8000ea2:	431c      	orrs	r4, r3
 8000ea4:	087f      	lsrs	r7, r7, #1
 8000ea6:	e673      	b.n	8000b90 <__aeabi_dadd+0xf4>
 8000ea8:	4644      	mov	r4, r8
 8000eaa:	3a20      	subs	r2, #32
 8000eac:	40d4      	lsrs	r4, r2
 8000eae:	4662      	mov	r2, ip
 8000eb0:	2a20      	cmp	r2, #32
 8000eb2:	d005      	beq.n	8000ec0 <__aeabi_dadd+0x424>
 8000eb4:	4667      	mov	r7, ip
 8000eb6:	2240      	movs	r2, #64	; 0x40
 8000eb8:	1bd2      	subs	r2, r2, r7
 8000eba:	4647      	mov	r7, r8
 8000ebc:	4097      	lsls	r7, r2
 8000ebe:	4339      	orrs	r1, r7
 8000ec0:	1e4a      	subs	r2, r1, #1
 8000ec2:	4191      	sbcs	r1, r2
 8000ec4:	4321      	orrs	r1, r4
 8000ec6:	e635      	b.n	8000b34 <__aeabi_dadd+0x98>
 8000ec8:	4303      	orrs	r3, r0
 8000eca:	1e58      	subs	r0, r3, #1
 8000ecc:	4183      	sbcs	r3, r0
 8000ece:	1acc      	subs	r4, r1, r3
 8000ed0:	42a1      	cmp	r1, r4
 8000ed2:	41bf      	sbcs	r7, r7
 8000ed4:	4643      	mov	r3, r8
 8000ed6:	427f      	negs	r7, r7
 8000ed8:	4655      	mov	r5, sl
 8000eda:	464e      	mov	r6, r9
 8000edc:	1bdf      	subs	r7, r3, r7
 8000ede:	e62e      	b.n	8000b3e <__aeabi_dadd+0xa2>
 8000ee0:	0002      	movs	r2, r0
 8000ee2:	431a      	orrs	r2, r3
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_dadd+0x44c>
 8000ee6:	e0bd      	b.n	8001064 <__aeabi_dadd+0x5c8>
 8000ee8:	4662      	mov	r2, ip
 8000eea:	4664      	mov	r4, ip
 8000eec:	3a01      	subs	r2, #1
 8000eee:	2c01      	cmp	r4, #1
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_dadd+0x458>
 8000ef2:	e0e5      	b.n	80010c0 <__aeabi_dadd+0x624>
 8000ef4:	4c85      	ldr	r4, [pc, #532]	; (800110c <__aeabi_dadd+0x670>)
 8000ef6:	45a4      	cmp	ip, r4
 8000ef8:	d058      	beq.n	8000fac <__aeabi_dadd+0x510>
 8000efa:	4694      	mov	ip, r2
 8000efc:	e749      	b.n	8000d92 <__aeabi_dadd+0x2f6>
 8000efe:	4664      	mov	r4, ip
 8000f00:	2220      	movs	r2, #32
 8000f02:	1b12      	subs	r2, r2, r4
 8000f04:	4644      	mov	r4, r8
 8000f06:	4094      	lsls	r4, r2
 8000f08:	000f      	movs	r7, r1
 8000f0a:	46a1      	mov	r9, r4
 8000f0c:	4664      	mov	r4, ip
 8000f0e:	4091      	lsls	r1, r2
 8000f10:	40e7      	lsrs	r7, r4
 8000f12:	464c      	mov	r4, r9
 8000f14:	1e4a      	subs	r2, r1, #1
 8000f16:	4191      	sbcs	r1, r2
 8000f18:	433c      	orrs	r4, r7
 8000f1a:	4642      	mov	r2, r8
 8000f1c:	430c      	orrs	r4, r1
 8000f1e:	4661      	mov	r1, ip
 8000f20:	40ca      	lsrs	r2, r1
 8000f22:	1880      	adds	r0, r0, r2
 8000f24:	e6f4      	b.n	8000d10 <__aeabi_dadd+0x274>
 8000f26:	4c79      	ldr	r4, [pc, #484]	; (800110c <__aeabi_dadd+0x670>)
 8000f28:	42a2      	cmp	r2, r4
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dadd+0x492>
 8000f2c:	e6fd      	b.n	8000d2a <__aeabi_dadd+0x28e>
 8000f2e:	1859      	adds	r1, r3, r1
 8000f30:	4299      	cmp	r1, r3
 8000f32:	419b      	sbcs	r3, r3
 8000f34:	4440      	add	r0, r8
 8000f36:	425f      	negs	r7, r3
 8000f38:	19c7      	adds	r7, r0, r7
 8000f3a:	07fc      	lsls	r4, r7, #31
 8000f3c:	0849      	lsrs	r1, r1, #1
 8000f3e:	0016      	movs	r6, r2
 8000f40:	430c      	orrs	r4, r1
 8000f42:	087f      	lsrs	r7, r7, #1
 8000f44:	e6cf      	b.n	8000ce6 <__aeabi_dadd+0x24a>
 8000f46:	1acc      	subs	r4, r1, r3
 8000f48:	42a1      	cmp	r1, r4
 8000f4a:	41bf      	sbcs	r7, r7
 8000f4c:	4643      	mov	r3, r8
 8000f4e:	427f      	negs	r7, r7
 8000f50:	1a18      	subs	r0, r3, r0
 8000f52:	4655      	mov	r5, sl
 8000f54:	1bc7      	subs	r7, r0, r7
 8000f56:	e5f7      	b.n	8000b48 <__aeabi_dadd+0xac>
 8000f58:	08c9      	lsrs	r1, r1, #3
 8000f5a:	077b      	lsls	r3, r7, #29
 8000f5c:	4655      	mov	r5, sl
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	08f8      	lsrs	r0, r7, #3
 8000f62:	e6c8      	b.n	8000cf6 <__aeabi_dadd+0x25a>
 8000f64:	2c00      	cmp	r4, #0
 8000f66:	d000      	beq.n	8000f6a <__aeabi_dadd+0x4ce>
 8000f68:	e081      	b.n	800106e <__aeabi_dadd+0x5d2>
 8000f6a:	4643      	mov	r3, r8
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	d115      	bne.n	8000f9c <__aeabi_dadd+0x500>
 8000f70:	2080      	movs	r0, #128	; 0x80
 8000f72:	2500      	movs	r5, #0
 8000f74:	0300      	lsls	r0, r0, #12
 8000f76:	e6e3      	b.n	8000d40 <__aeabi_dadd+0x2a4>
 8000f78:	1a5c      	subs	r4, r3, r1
 8000f7a:	42a3      	cmp	r3, r4
 8000f7c:	419b      	sbcs	r3, r3
 8000f7e:	1bc7      	subs	r7, r0, r7
 8000f80:	425b      	negs	r3, r3
 8000f82:	2601      	movs	r6, #1
 8000f84:	1aff      	subs	r7, r7, r3
 8000f86:	e5da      	b.n	8000b3e <__aeabi_dadd+0xa2>
 8000f88:	0742      	lsls	r2, r0, #29
 8000f8a:	08db      	lsrs	r3, r3, #3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	08c0      	lsrs	r0, r0, #3
 8000f90:	e6d2      	b.n	8000d38 <__aeabi_dadd+0x29c>
 8000f92:	0742      	lsls	r2, r0, #29
 8000f94:	08db      	lsrs	r3, r3, #3
 8000f96:	4313      	orrs	r3, r2
 8000f98:	08c0      	lsrs	r0, r0, #3
 8000f9a:	e6ac      	b.n	8000cf6 <__aeabi_dadd+0x25a>
 8000f9c:	4643      	mov	r3, r8
 8000f9e:	4642      	mov	r2, r8
 8000fa0:	08c9      	lsrs	r1, r1, #3
 8000fa2:	075b      	lsls	r3, r3, #29
 8000fa4:	4655      	mov	r5, sl
 8000fa6:	430b      	orrs	r3, r1
 8000fa8:	08d0      	lsrs	r0, r2, #3
 8000faa:	e6c5      	b.n	8000d38 <__aeabi_dadd+0x29c>
 8000fac:	4643      	mov	r3, r8
 8000fae:	4642      	mov	r2, r8
 8000fb0:	075b      	lsls	r3, r3, #29
 8000fb2:	08c9      	lsrs	r1, r1, #3
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	08d0      	lsrs	r0, r2, #3
 8000fb8:	e6be      	b.n	8000d38 <__aeabi_dadd+0x29c>
 8000fba:	4303      	orrs	r3, r0
 8000fbc:	001c      	movs	r4, r3
 8000fbe:	1e63      	subs	r3, r4, #1
 8000fc0:	419c      	sbcs	r4, r3
 8000fc2:	e6fc      	b.n	8000dbe <__aeabi_dadd+0x322>
 8000fc4:	0002      	movs	r2, r0
 8000fc6:	3c20      	subs	r4, #32
 8000fc8:	40e2      	lsrs	r2, r4
 8000fca:	0014      	movs	r4, r2
 8000fcc:	4662      	mov	r2, ip
 8000fce:	2a20      	cmp	r2, #32
 8000fd0:	d003      	beq.n	8000fda <__aeabi_dadd+0x53e>
 8000fd2:	2540      	movs	r5, #64	; 0x40
 8000fd4:	1aad      	subs	r5, r5, r2
 8000fd6:	40a8      	lsls	r0, r5
 8000fd8:	4303      	orrs	r3, r0
 8000fda:	1e58      	subs	r0, r3, #1
 8000fdc:	4183      	sbcs	r3, r0
 8000fde:	4323      	orrs	r3, r4
 8000fe0:	e775      	b.n	8000ece <__aeabi_dadd+0x432>
 8000fe2:	2a00      	cmp	r2, #0
 8000fe4:	d0e2      	beq.n	8000fac <__aeabi_dadd+0x510>
 8000fe6:	003a      	movs	r2, r7
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	d0cd      	beq.n	8000f88 <__aeabi_dadd+0x4ec>
 8000fec:	0742      	lsls	r2, r0, #29
 8000fee:	08db      	lsrs	r3, r3, #3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	08c0      	lsrs	r0, r0, #3
 8000ff6:	0312      	lsls	r2, r2, #12
 8000ff8:	4210      	tst	r0, r2
 8000ffa:	d006      	beq.n	800100a <__aeabi_dadd+0x56e>
 8000ffc:	08fc      	lsrs	r4, r7, #3
 8000ffe:	4214      	tst	r4, r2
 8001000:	d103      	bne.n	800100a <__aeabi_dadd+0x56e>
 8001002:	0020      	movs	r0, r4
 8001004:	08cb      	lsrs	r3, r1, #3
 8001006:	077a      	lsls	r2, r7, #29
 8001008:	4313      	orrs	r3, r2
 800100a:	0f5a      	lsrs	r2, r3, #29
 800100c:	00db      	lsls	r3, r3, #3
 800100e:	0752      	lsls	r2, r2, #29
 8001010:	08db      	lsrs	r3, r3, #3
 8001012:	4313      	orrs	r3, r2
 8001014:	e690      	b.n	8000d38 <__aeabi_dadd+0x29c>
 8001016:	4643      	mov	r3, r8
 8001018:	430b      	orrs	r3, r1
 800101a:	d100      	bne.n	800101e <__aeabi_dadd+0x582>
 800101c:	e709      	b.n	8000e32 <__aeabi_dadd+0x396>
 800101e:	4643      	mov	r3, r8
 8001020:	4642      	mov	r2, r8
 8001022:	08c9      	lsrs	r1, r1, #3
 8001024:	075b      	lsls	r3, r3, #29
 8001026:	4655      	mov	r5, sl
 8001028:	430b      	orrs	r3, r1
 800102a:	08d0      	lsrs	r0, r2, #3
 800102c:	e666      	b.n	8000cfc <__aeabi_dadd+0x260>
 800102e:	1acc      	subs	r4, r1, r3
 8001030:	42a1      	cmp	r1, r4
 8001032:	4189      	sbcs	r1, r1
 8001034:	1a3f      	subs	r7, r7, r0
 8001036:	4249      	negs	r1, r1
 8001038:	4655      	mov	r5, sl
 800103a:	2601      	movs	r6, #1
 800103c:	1a7f      	subs	r7, r7, r1
 800103e:	e57e      	b.n	8000b3e <__aeabi_dadd+0xa2>
 8001040:	4642      	mov	r2, r8
 8001042:	1a5c      	subs	r4, r3, r1
 8001044:	1a87      	subs	r7, r0, r2
 8001046:	42a3      	cmp	r3, r4
 8001048:	4192      	sbcs	r2, r2
 800104a:	4252      	negs	r2, r2
 800104c:	1abf      	subs	r7, r7, r2
 800104e:	023a      	lsls	r2, r7, #8
 8001050:	d53d      	bpl.n	80010ce <__aeabi_dadd+0x632>
 8001052:	1acc      	subs	r4, r1, r3
 8001054:	42a1      	cmp	r1, r4
 8001056:	4189      	sbcs	r1, r1
 8001058:	4643      	mov	r3, r8
 800105a:	4249      	negs	r1, r1
 800105c:	1a1f      	subs	r7, r3, r0
 800105e:	4655      	mov	r5, sl
 8001060:	1a7f      	subs	r7, r7, r1
 8001062:	e595      	b.n	8000b90 <__aeabi_dadd+0xf4>
 8001064:	077b      	lsls	r3, r7, #29
 8001066:	08c9      	lsrs	r1, r1, #3
 8001068:	430b      	orrs	r3, r1
 800106a:	08f8      	lsrs	r0, r7, #3
 800106c:	e643      	b.n	8000cf6 <__aeabi_dadd+0x25a>
 800106e:	4644      	mov	r4, r8
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	430c      	orrs	r4, r1
 8001074:	d130      	bne.n	80010d8 <__aeabi_dadd+0x63c>
 8001076:	0742      	lsls	r2, r0, #29
 8001078:	4313      	orrs	r3, r2
 800107a:	08c0      	lsrs	r0, r0, #3
 800107c:	e65c      	b.n	8000d38 <__aeabi_dadd+0x29c>
 800107e:	077b      	lsls	r3, r7, #29
 8001080:	08c9      	lsrs	r1, r1, #3
 8001082:	430b      	orrs	r3, r1
 8001084:	08f8      	lsrs	r0, r7, #3
 8001086:	e639      	b.n	8000cfc <__aeabi_dadd+0x260>
 8001088:	185c      	adds	r4, r3, r1
 800108a:	429c      	cmp	r4, r3
 800108c:	419b      	sbcs	r3, r3
 800108e:	4440      	add	r0, r8
 8001090:	425b      	negs	r3, r3
 8001092:	18c7      	adds	r7, r0, r3
 8001094:	023b      	lsls	r3, r7, #8
 8001096:	d400      	bmi.n	800109a <__aeabi_dadd+0x5fe>
 8001098:	e625      	b.n	8000ce6 <__aeabi_dadd+0x24a>
 800109a:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <__aeabi_dadd+0x674>)
 800109c:	2601      	movs	r6, #1
 800109e:	401f      	ands	r7, r3
 80010a0:	e621      	b.n	8000ce6 <__aeabi_dadd+0x24a>
 80010a2:	0004      	movs	r4, r0
 80010a4:	3a20      	subs	r2, #32
 80010a6:	40d4      	lsrs	r4, r2
 80010a8:	4662      	mov	r2, ip
 80010aa:	2a20      	cmp	r2, #32
 80010ac:	d004      	beq.n	80010b8 <__aeabi_dadd+0x61c>
 80010ae:	2240      	movs	r2, #64	; 0x40
 80010b0:	4666      	mov	r6, ip
 80010b2:	1b92      	subs	r2, r2, r6
 80010b4:	4090      	lsls	r0, r2
 80010b6:	4303      	orrs	r3, r0
 80010b8:	1e5a      	subs	r2, r3, #1
 80010ba:	4193      	sbcs	r3, r2
 80010bc:	431c      	orrs	r4, r3
 80010be:	e67e      	b.n	8000dbe <__aeabi_dadd+0x322>
 80010c0:	185c      	adds	r4, r3, r1
 80010c2:	428c      	cmp	r4, r1
 80010c4:	4189      	sbcs	r1, r1
 80010c6:	4440      	add	r0, r8
 80010c8:	4249      	negs	r1, r1
 80010ca:	1847      	adds	r7, r0, r1
 80010cc:	e6dd      	b.n	8000e8a <__aeabi_dadd+0x3ee>
 80010ce:	0023      	movs	r3, r4
 80010d0:	433b      	orrs	r3, r7
 80010d2:	d100      	bne.n	80010d6 <__aeabi_dadd+0x63a>
 80010d4:	e6ad      	b.n	8000e32 <__aeabi_dadd+0x396>
 80010d6:	e606      	b.n	8000ce6 <__aeabi_dadd+0x24a>
 80010d8:	0744      	lsls	r4, r0, #29
 80010da:	4323      	orrs	r3, r4
 80010dc:	2480      	movs	r4, #128	; 0x80
 80010de:	08c0      	lsrs	r0, r0, #3
 80010e0:	0324      	lsls	r4, r4, #12
 80010e2:	4220      	tst	r0, r4
 80010e4:	d008      	beq.n	80010f8 <__aeabi_dadd+0x65c>
 80010e6:	4642      	mov	r2, r8
 80010e8:	08d6      	lsrs	r6, r2, #3
 80010ea:	4226      	tst	r6, r4
 80010ec:	d104      	bne.n	80010f8 <__aeabi_dadd+0x65c>
 80010ee:	4655      	mov	r5, sl
 80010f0:	0030      	movs	r0, r6
 80010f2:	08cb      	lsrs	r3, r1, #3
 80010f4:	0751      	lsls	r1, r2, #29
 80010f6:	430b      	orrs	r3, r1
 80010f8:	0f5a      	lsrs	r2, r3, #29
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	0752      	lsls	r2, r2, #29
 8001100:	4313      	orrs	r3, r2
 8001102:	e619      	b.n	8000d38 <__aeabi_dadd+0x29c>
 8001104:	2300      	movs	r3, #0
 8001106:	4a01      	ldr	r2, [pc, #4]	; (800110c <__aeabi_dadd+0x670>)
 8001108:	001f      	movs	r7, r3
 800110a:	e55e      	b.n	8000bca <__aeabi_dadd+0x12e>
 800110c:	000007ff 	.word	0x000007ff
 8001110:	ff7fffff 	.word	0xff7fffff

08001114 <__aeabi_ddiv>:
 8001114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001116:	4657      	mov	r7, sl
 8001118:	464e      	mov	r6, r9
 800111a:	4645      	mov	r5, r8
 800111c:	46de      	mov	lr, fp
 800111e:	b5e0      	push	{r5, r6, r7, lr}
 8001120:	4681      	mov	r9, r0
 8001122:	0005      	movs	r5, r0
 8001124:	030c      	lsls	r4, r1, #12
 8001126:	0048      	lsls	r0, r1, #1
 8001128:	4692      	mov	sl, r2
 800112a:	001f      	movs	r7, r3
 800112c:	b085      	sub	sp, #20
 800112e:	0b24      	lsrs	r4, r4, #12
 8001130:	0d40      	lsrs	r0, r0, #21
 8001132:	0fce      	lsrs	r6, r1, #31
 8001134:	2800      	cmp	r0, #0
 8001136:	d100      	bne.n	800113a <__aeabi_ddiv+0x26>
 8001138:	e156      	b.n	80013e8 <__aeabi_ddiv+0x2d4>
 800113a:	4bd4      	ldr	r3, [pc, #848]	; (800148c <__aeabi_ddiv+0x378>)
 800113c:	4298      	cmp	r0, r3
 800113e:	d100      	bne.n	8001142 <__aeabi_ddiv+0x2e>
 8001140:	e172      	b.n	8001428 <__aeabi_ddiv+0x314>
 8001142:	0f6b      	lsrs	r3, r5, #29
 8001144:	00e4      	lsls	r4, r4, #3
 8001146:	431c      	orrs	r4, r3
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	041b      	lsls	r3, r3, #16
 800114c:	4323      	orrs	r3, r4
 800114e:	4698      	mov	r8, r3
 8001150:	4bcf      	ldr	r3, [pc, #828]	; (8001490 <__aeabi_ddiv+0x37c>)
 8001152:	00ed      	lsls	r5, r5, #3
 8001154:	469b      	mov	fp, r3
 8001156:	2300      	movs	r3, #0
 8001158:	4699      	mov	r9, r3
 800115a:	4483      	add	fp, r0
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	033c      	lsls	r4, r7, #12
 8001160:	007b      	lsls	r3, r7, #1
 8001162:	4650      	mov	r0, sl
 8001164:	0b24      	lsrs	r4, r4, #12
 8001166:	0d5b      	lsrs	r3, r3, #21
 8001168:	0fff      	lsrs	r7, r7, #31
 800116a:	2b00      	cmp	r3, #0
 800116c:	d100      	bne.n	8001170 <__aeabi_ddiv+0x5c>
 800116e:	e11f      	b.n	80013b0 <__aeabi_ddiv+0x29c>
 8001170:	4ac6      	ldr	r2, [pc, #792]	; (800148c <__aeabi_ddiv+0x378>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d100      	bne.n	8001178 <__aeabi_ddiv+0x64>
 8001176:	e162      	b.n	800143e <__aeabi_ddiv+0x32a>
 8001178:	49c5      	ldr	r1, [pc, #788]	; (8001490 <__aeabi_ddiv+0x37c>)
 800117a:	0f42      	lsrs	r2, r0, #29
 800117c:	468c      	mov	ip, r1
 800117e:	00e4      	lsls	r4, r4, #3
 8001180:	4659      	mov	r1, fp
 8001182:	4314      	orrs	r4, r2
 8001184:	2280      	movs	r2, #128	; 0x80
 8001186:	4463      	add	r3, ip
 8001188:	0412      	lsls	r2, r2, #16
 800118a:	1acb      	subs	r3, r1, r3
 800118c:	4314      	orrs	r4, r2
 800118e:	469b      	mov	fp, r3
 8001190:	00c2      	lsls	r2, r0, #3
 8001192:	2000      	movs	r0, #0
 8001194:	0033      	movs	r3, r6
 8001196:	407b      	eors	r3, r7
 8001198:	469a      	mov	sl, r3
 800119a:	464b      	mov	r3, r9
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d827      	bhi.n	80011f0 <__aeabi_ddiv+0xdc>
 80011a0:	49bc      	ldr	r1, [pc, #752]	; (8001494 <__aeabi_ddiv+0x380>)
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	58cb      	ldr	r3, [r1, r3]
 80011a6:	469f      	mov	pc, r3
 80011a8:	46b2      	mov	sl, r6
 80011aa:	9b00      	ldr	r3, [sp, #0]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d016      	beq.n	80011de <__aeabi_ddiv+0xca>
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d100      	bne.n	80011b6 <__aeabi_ddiv+0xa2>
 80011b4:	e28e      	b.n	80016d4 <__aeabi_ddiv+0x5c0>
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d000      	beq.n	80011bc <__aeabi_ddiv+0xa8>
 80011ba:	e0d9      	b.n	8001370 <__aeabi_ddiv+0x25c>
 80011bc:	2300      	movs	r3, #0
 80011be:	2400      	movs	r4, #0
 80011c0:	2500      	movs	r5, #0
 80011c2:	4652      	mov	r2, sl
 80011c4:	051b      	lsls	r3, r3, #20
 80011c6:	4323      	orrs	r3, r4
 80011c8:	07d2      	lsls	r2, r2, #31
 80011ca:	4313      	orrs	r3, r2
 80011cc:	0028      	movs	r0, r5
 80011ce:	0019      	movs	r1, r3
 80011d0:	b005      	add	sp, #20
 80011d2:	bcf0      	pop	{r4, r5, r6, r7}
 80011d4:	46bb      	mov	fp, r7
 80011d6:	46b2      	mov	sl, r6
 80011d8:	46a9      	mov	r9, r5
 80011da:	46a0      	mov	r8, r4
 80011dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011de:	2400      	movs	r4, #0
 80011e0:	2500      	movs	r5, #0
 80011e2:	4baa      	ldr	r3, [pc, #680]	; (800148c <__aeabi_ddiv+0x378>)
 80011e4:	e7ed      	b.n	80011c2 <__aeabi_ddiv+0xae>
 80011e6:	46ba      	mov	sl, r7
 80011e8:	46a0      	mov	r8, r4
 80011ea:	0015      	movs	r5, r2
 80011ec:	9000      	str	r0, [sp, #0]
 80011ee:	e7dc      	b.n	80011aa <__aeabi_ddiv+0x96>
 80011f0:	4544      	cmp	r4, r8
 80011f2:	d200      	bcs.n	80011f6 <__aeabi_ddiv+0xe2>
 80011f4:	e1c7      	b.n	8001586 <__aeabi_ddiv+0x472>
 80011f6:	d100      	bne.n	80011fa <__aeabi_ddiv+0xe6>
 80011f8:	e1c2      	b.n	8001580 <__aeabi_ddiv+0x46c>
 80011fa:	2301      	movs	r3, #1
 80011fc:	425b      	negs	r3, r3
 80011fe:	469c      	mov	ip, r3
 8001200:	002e      	movs	r6, r5
 8001202:	4640      	mov	r0, r8
 8001204:	2500      	movs	r5, #0
 8001206:	44e3      	add	fp, ip
 8001208:	0223      	lsls	r3, r4, #8
 800120a:	0e14      	lsrs	r4, r2, #24
 800120c:	431c      	orrs	r4, r3
 800120e:	0c1b      	lsrs	r3, r3, #16
 8001210:	4699      	mov	r9, r3
 8001212:	0423      	lsls	r3, r4, #16
 8001214:	0c1f      	lsrs	r7, r3, #16
 8001216:	0212      	lsls	r2, r2, #8
 8001218:	4649      	mov	r1, r9
 800121a:	9200      	str	r2, [sp, #0]
 800121c:	9701      	str	r7, [sp, #4]
 800121e:	f7ff f815 	bl	800024c <__aeabi_uidivmod>
 8001222:	0002      	movs	r2, r0
 8001224:	437a      	muls	r2, r7
 8001226:	040b      	lsls	r3, r1, #16
 8001228:	0c31      	lsrs	r1, r6, #16
 800122a:	4680      	mov	r8, r0
 800122c:	4319      	orrs	r1, r3
 800122e:	428a      	cmp	r2, r1
 8001230:	d907      	bls.n	8001242 <__aeabi_ddiv+0x12e>
 8001232:	2301      	movs	r3, #1
 8001234:	425b      	negs	r3, r3
 8001236:	469c      	mov	ip, r3
 8001238:	1909      	adds	r1, r1, r4
 800123a:	44e0      	add	r8, ip
 800123c:	428c      	cmp	r4, r1
 800123e:	d800      	bhi.n	8001242 <__aeabi_ddiv+0x12e>
 8001240:	e207      	b.n	8001652 <__aeabi_ddiv+0x53e>
 8001242:	1a88      	subs	r0, r1, r2
 8001244:	4649      	mov	r1, r9
 8001246:	f7ff f801 	bl	800024c <__aeabi_uidivmod>
 800124a:	0409      	lsls	r1, r1, #16
 800124c:	468c      	mov	ip, r1
 800124e:	0431      	lsls	r1, r6, #16
 8001250:	4666      	mov	r6, ip
 8001252:	9a01      	ldr	r2, [sp, #4]
 8001254:	0c09      	lsrs	r1, r1, #16
 8001256:	4342      	muls	r2, r0
 8001258:	0003      	movs	r3, r0
 800125a:	4331      	orrs	r1, r6
 800125c:	428a      	cmp	r2, r1
 800125e:	d904      	bls.n	800126a <__aeabi_ddiv+0x156>
 8001260:	1909      	adds	r1, r1, r4
 8001262:	3b01      	subs	r3, #1
 8001264:	428c      	cmp	r4, r1
 8001266:	d800      	bhi.n	800126a <__aeabi_ddiv+0x156>
 8001268:	e1ed      	b.n	8001646 <__aeabi_ddiv+0x532>
 800126a:	1a88      	subs	r0, r1, r2
 800126c:	4642      	mov	r2, r8
 800126e:	0412      	lsls	r2, r2, #16
 8001270:	431a      	orrs	r2, r3
 8001272:	4690      	mov	r8, r2
 8001274:	4641      	mov	r1, r8
 8001276:	9b00      	ldr	r3, [sp, #0]
 8001278:	040e      	lsls	r6, r1, #16
 800127a:	0c1b      	lsrs	r3, r3, #16
 800127c:	001f      	movs	r7, r3
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	9b00      	ldr	r3, [sp, #0]
 8001282:	0c36      	lsrs	r6, r6, #16
 8001284:	041b      	lsls	r3, r3, #16
 8001286:	0c19      	lsrs	r1, r3, #16
 8001288:	000b      	movs	r3, r1
 800128a:	4373      	muls	r3, r6
 800128c:	0c12      	lsrs	r2, r2, #16
 800128e:	437e      	muls	r6, r7
 8001290:	9103      	str	r1, [sp, #12]
 8001292:	4351      	muls	r1, r2
 8001294:	437a      	muls	r2, r7
 8001296:	0c1f      	lsrs	r7, r3, #16
 8001298:	46bc      	mov	ip, r7
 800129a:	1876      	adds	r6, r6, r1
 800129c:	4466      	add	r6, ip
 800129e:	42b1      	cmp	r1, r6
 80012a0:	d903      	bls.n	80012aa <__aeabi_ddiv+0x196>
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	0249      	lsls	r1, r1, #9
 80012a6:	468c      	mov	ip, r1
 80012a8:	4462      	add	r2, ip
 80012aa:	0c31      	lsrs	r1, r6, #16
 80012ac:	188a      	adds	r2, r1, r2
 80012ae:	0431      	lsls	r1, r6, #16
 80012b0:	041e      	lsls	r6, r3, #16
 80012b2:	0c36      	lsrs	r6, r6, #16
 80012b4:	198e      	adds	r6, r1, r6
 80012b6:	4290      	cmp	r0, r2
 80012b8:	d302      	bcc.n	80012c0 <__aeabi_ddiv+0x1ac>
 80012ba:	d112      	bne.n	80012e2 <__aeabi_ddiv+0x1ce>
 80012bc:	42b5      	cmp	r5, r6
 80012be:	d210      	bcs.n	80012e2 <__aeabi_ddiv+0x1ce>
 80012c0:	4643      	mov	r3, r8
 80012c2:	1e59      	subs	r1, r3, #1
 80012c4:	9b00      	ldr	r3, [sp, #0]
 80012c6:	469c      	mov	ip, r3
 80012c8:	4465      	add	r5, ip
 80012ca:	001f      	movs	r7, r3
 80012cc:	429d      	cmp	r5, r3
 80012ce:	419b      	sbcs	r3, r3
 80012d0:	425b      	negs	r3, r3
 80012d2:	191b      	adds	r3, r3, r4
 80012d4:	18c0      	adds	r0, r0, r3
 80012d6:	4284      	cmp	r4, r0
 80012d8:	d200      	bcs.n	80012dc <__aeabi_ddiv+0x1c8>
 80012da:	e1a0      	b.n	800161e <__aeabi_ddiv+0x50a>
 80012dc:	d100      	bne.n	80012e0 <__aeabi_ddiv+0x1cc>
 80012de:	e19b      	b.n	8001618 <__aeabi_ddiv+0x504>
 80012e0:	4688      	mov	r8, r1
 80012e2:	1bae      	subs	r6, r5, r6
 80012e4:	42b5      	cmp	r5, r6
 80012e6:	41ad      	sbcs	r5, r5
 80012e8:	1a80      	subs	r0, r0, r2
 80012ea:	426d      	negs	r5, r5
 80012ec:	1b40      	subs	r0, r0, r5
 80012ee:	4284      	cmp	r4, r0
 80012f0:	d100      	bne.n	80012f4 <__aeabi_ddiv+0x1e0>
 80012f2:	e1d5      	b.n	80016a0 <__aeabi_ddiv+0x58c>
 80012f4:	4649      	mov	r1, r9
 80012f6:	f7fe ffa9 	bl	800024c <__aeabi_uidivmod>
 80012fa:	9a01      	ldr	r2, [sp, #4]
 80012fc:	040b      	lsls	r3, r1, #16
 80012fe:	4342      	muls	r2, r0
 8001300:	0c31      	lsrs	r1, r6, #16
 8001302:	0005      	movs	r5, r0
 8001304:	4319      	orrs	r1, r3
 8001306:	428a      	cmp	r2, r1
 8001308:	d900      	bls.n	800130c <__aeabi_ddiv+0x1f8>
 800130a:	e16c      	b.n	80015e6 <__aeabi_ddiv+0x4d2>
 800130c:	1a88      	subs	r0, r1, r2
 800130e:	4649      	mov	r1, r9
 8001310:	f7fe ff9c 	bl	800024c <__aeabi_uidivmod>
 8001314:	9a01      	ldr	r2, [sp, #4]
 8001316:	0436      	lsls	r6, r6, #16
 8001318:	4342      	muls	r2, r0
 800131a:	0409      	lsls	r1, r1, #16
 800131c:	0c36      	lsrs	r6, r6, #16
 800131e:	0003      	movs	r3, r0
 8001320:	430e      	orrs	r6, r1
 8001322:	42b2      	cmp	r2, r6
 8001324:	d900      	bls.n	8001328 <__aeabi_ddiv+0x214>
 8001326:	e153      	b.n	80015d0 <__aeabi_ddiv+0x4bc>
 8001328:	9803      	ldr	r0, [sp, #12]
 800132a:	1ab6      	subs	r6, r6, r2
 800132c:	0002      	movs	r2, r0
 800132e:	042d      	lsls	r5, r5, #16
 8001330:	431d      	orrs	r5, r3
 8001332:	9f02      	ldr	r7, [sp, #8]
 8001334:	042b      	lsls	r3, r5, #16
 8001336:	0c1b      	lsrs	r3, r3, #16
 8001338:	435a      	muls	r2, r3
 800133a:	437b      	muls	r3, r7
 800133c:	469c      	mov	ip, r3
 800133e:	0c29      	lsrs	r1, r5, #16
 8001340:	4348      	muls	r0, r1
 8001342:	0c13      	lsrs	r3, r2, #16
 8001344:	4484      	add	ip, r0
 8001346:	4463      	add	r3, ip
 8001348:	4379      	muls	r1, r7
 800134a:	4298      	cmp	r0, r3
 800134c:	d903      	bls.n	8001356 <__aeabi_ddiv+0x242>
 800134e:	2080      	movs	r0, #128	; 0x80
 8001350:	0240      	lsls	r0, r0, #9
 8001352:	4684      	mov	ip, r0
 8001354:	4461      	add	r1, ip
 8001356:	0c18      	lsrs	r0, r3, #16
 8001358:	0412      	lsls	r2, r2, #16
 800135a:	041b      	lsls	r3, r3, #16
 800135c:	0c12      	lsrs	r2, r2, #16
 800135e:	1841      	adds	r1, r0, r1
 8001360:	189b      	adds	r3, r3, r2
 8001362:	428e      	cmp	r6, r1
 8001364:	d200      	bcs.n	8001368 <__aeabi_ddiv+0x254>
 8001366:	e0ff      	b.n	8001568 <__aeabi_ddiv+0x454>
 8001368:	d100      	bne.n	800136c <__aeabi_ddiv+0x258>
 800136a:	e0fa      	b.n	8001562 <__aeabi_ddiv+0x44e>
 800136c:	2301      	movs	r3, #1
 800136e:	431d      	orrs	r5, r3
 8001370:	4a49      	ldr	r2, [pc, #292]	; (8001498 <__aeabi_ddiv+0x384>)
 8001372:	445a      	add	r2, fp
 8001374:	2a00      	cmp	r2, #0
 8001376:	dc00      	bgt.n	800137a <__aeabi_ddiv+0x266>
 8001378:	e0aa      	b.n	80014d0 <__aeabi_ddiv+0x3bc>
 800137a:	076b      	lsls	r3, r5, #29
 800137c:	d000      	beq.n	8001380 <__aeabi_ddiv+0x26c>
 800137e:	e13d      	b.n	80015fc <__aeabi_ddiv+0x4e8>
 8001380:	08ed      	lsrs	r5, r5, #3
 8001382:	4643      	mov	r3, r8
 8001384:	01db      	lsls	r3, r3, #7
 8001386:	d506      	bpl.n	8001396 <__aeabi_ddiv+0x282>
 8001388:	4642      	mov	r2, r8
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <__aeabi_ddiv+0x388>)
 800138c:	401a      	ands	r2, r3
 800138e:	4690      	mov	r8, r2
 8001390:	2280      	movs	r2, #128	; 0x80
 8001392:	00d2      	lsls	r2, r2, #3
 8001394:	445a      	add	r2, fp
 8001396:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <__aeabi_ddiv+0x38c>)
 8001398:	429a      	cmp	r2, r3
 800139a:	dd00      	ble.n	800139e <__aeabi_ddiv+0x28a>
 800139c:	e71f      	b.n	80011de <__aeabi_ddiv+0xca>
 800139e:	4643      	mov	r3, r8
 80013a0:	075b      	lsls	r3, r3, #29
 80013a2:	431d      	orrs	r5, r3
 80013a4:	4643      	mov	r3, r8
 80013a6:	0552      	lsls	r2, r2, #21
 80013a8:	025c      	lsls	r4, r3, #9
 80013aa:	0b24      	lsrs	r4, r4, #12
 80013ac:	0d53      	lsrs	r3, r2, #21
 80013ae:	e708      	b.n	80011c2 <__aeabi_ddiv+0xae>
 80013b0:	4652      	mov	r2, sl
 80013b2:	4322      	orrs	r2, r4
 80013b4:	d100      	bne.n	80013b8 <__aeabi_ddiv+0x2a4>
 80013b6:	e07b      	b.n	80014b0 <__aeabi_ddiv+0x39c>
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d100      	bne.n	80013be <__aeabi_ddiv+0x2aa>
 80013bc:	e0fa      	b.n	80015b4 <__aeabi_ddiv+0x4a0>
 80013be:	0020      	movs	r0, r4
 80013c0:	f001 fa22 	bl	8002808 <__clzsi2>
 80013c4:	0002      	movs	r2, r0
 80013c6:	3a0b      	subs	r2, #11
 80013c8:	231d      	movs	r3, #29
 80013ca:	0001      	movs	r1, r0
 80013cc:	1a9b      	subs	r3, r3, r2
 80013ce:	4652      	mov	r2, sl
 80013d0:	3908      	subs	r1, #8
 80013d2:	40da      	lsrs	r2, r3
 80013d4:	408c      	lsls	r4, r1
 80013d6:	4314      	orrs	r4, r2
 80013d8:	4652      	mov	r2, sl
 80013da:	408a      	lsls	r2, r1
 80013dc:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <__aeabi_ddiv+0x390>)
 80013de:	4458      	add	r0, fp
 80013e0:	469b      	mov	fp, r3
 80013e2:	4483      	add	fp, r0
 80013e4:	2000      	movs	r0, #0
 80013e6:	e6d5      	b.n	8001194 <__aeabi_ddiv+0x80>
 80013e8:	464b      	mov	r3, r9
 80013ea:	4323      	orrs	r3, r4
 80013ec:	4698      	mov	r8, r3
 80013ee:	d044      	beq.n	800147a <__aeabi_ddiv+0x366>
 80013f0:	2c00      	cmp	r4, #0
 80013f2:	d100      	bne.n	80013f6 <__aeabi_ddiv+0x2e2>
 80013f4:	e0ce      	b.n	8001594 <__aeabi_ddiv+0x480>
 80013f6:	0020      	movs	r0, r4
 80013f8:	f001 fa06 	bl	8002808 <__clzsi2>
 80013fc:	0001      	movs	r1, r0
 80013fe:	0002      	movs	r2, r0
 8001400:	390b      	subs	r1, #11
 8001402:	231d      	movs	r3, #29
 8001404:	1a5b      	subs	r3, r3, r1
 8001406:	4649      	mov	r1, r9
 8001408:	0010      	movs	r0, r2
 800140a:	40d9      	lsrs	r1, r3
 800140c:	3808      	subs	r0, #8
 800140e:	4084      	lsls	r4, r0
 8001410:	000b      	movs	r3, r1
 8001412:	464d      	mov	r5, r9
 8001414:	4323      	orrs	r3, r4
 8001416:	4698      	mov	r8, r3
 8001418:	4085      	lsls	r5, r0
 800141a:	4823      	ldr	r0, [pc, #140]	; (80014a8 <__aeabi_ddiv+0x394>)
 800141c:	1a83      	subs	r3, r0, r2
 800141e:	469b      	mov	fp, r3
 8001420:	2300      	movs	r3, #0
 8001422:	4699      	mov	r9, r3
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	e69a      	b.n	800115e <__aeabi_ddiv+0x4a>
 8001428:	464b      	mov	r3, r9
 800142a:	4323      	orrs	r3, r4
 800142c:	4698      	mov	r8, r3
 800142e:	d11d      	bne.n	800146c <__aeabi_ddiv+0x358>
 8001430:	2308      	movs	r3, #8
 8001432:	4699      	mov	r9, r3
 8001434:	3b06      	subs	r3, #6
 8001436:	2500      	movs	r5, #0
 8001438:	4683      	mov	fp, r0
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	e68f      	b.n	800115e <__aeabi_ddiv+0x4a>
 800143e:	4652      	mov	r2, sl
 8001440:	4322      	orrs	r2, r4
 8001442:	d109      	bne.n	8001458 <__aeabi_ddiv+0x344>
 8001444:	2302      	movs	r3, #2
 8001446:	4649      	mov	r1, r9
 8001448:	4319      	orrs	r1, r3
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <__aeabi_ddiv+0x398>)
 800144c:	4689      	mov	r9, r1
 800144e:	469c      	mov	ip, r3
 8001450:	2400      	movs	r4, #0
 8001452:	2002      	movs	r0, #2
 8001454:	44e3      	add	fp, ip
 8001456:	e69d      	b.n	8001194 <__aeabi_ddiv+0x80>
 8001458:	2303      	movs	r3, #3
 800145a:	464a      	mov	r2, r9
 800145c:	431a      	orrs	r2, r3
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <__aeabi_ddiv+0x398>)
 8001460:	4691      	mov	r9, r2
 8001462:	469c      	mov	ip, r3
 8001464:	4652      	mov	r2, sl
 8001466:	2003      	movs	r0, #3
 8001468:	44e3      	add	fp, ip
 800146a:	e693      	b.n	8001194 <__aeabi_ddiv+0x80>
 800146c:	230c      	movs	r3, #12
 800146e:	4699      	mov	r9, r3
 8001470:	3b09      	subs	r3, #9
 8001472:	46a0      	mov	r8, r4
 8001474:	4683      	mov	fp, r0
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	e671      	b.n	800115e <__aeabi_ddiv+0x4a>
 800147a:	2304      	movs	r3, #4
 800147c:	4699      	mov	r9, r3
 800147e:	2300      	movs	r3, #0
 8001480:	469b      	mov	fp, r3
 8001482:	3301      	adds	r3, #1
 8001484:	2500      	movs	r5, #0
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	e669      	b.n	800115e <__aeabi_ddiv+0x4a>
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	000007ff 	.word	0x000007ff
 8001490:	fffffc01 	.word	0xfffffc01
 8001494:	08008460 	.word	0x08008460
 8001498:	000003ff 	.word	0x000003ff
 800149c:	feffffff 	.word	0xfeffffff
 80014a0:	000007fe 	.word	0x000007fe
 80014a4:	000003f3 	.word	0x000003f3
 80014a8:	fffffc0d 	.word	0xfffffc0d
 80014ac:	fffff801 	.word	0xfffff801
 80014b0:	4649      	mov	r1, r9
 80014b2:	2301      	movs	r3, #1
 80014b4:	4319      	orrs	r1, r3
 80014b6:	4689      	mov	r9, r1
 80014b8:	2400      	movs	r4, #0
 80014ba:	2001      	movs	r0, #1
 80014bc:	e66a      	b.n	8001194 <__aeabi_ddiv+0x80>
 80014be:	2300      	movs	r3, #0
 80014c0:	2480      	movs	r4, #128	; 0x80
 80014c2:	469a      	mov	sl, r3
 80014c4:	2500      	movs	r5, #0
 80014c6:	4b8a      	ldr	r3, [pc, #552]	; (80016f0 <__aeabi_ddiv+0x5dc>)
 80014c8:	0324      	lsls	r4, r4, #12
 80014ca:	e67a      	b.n	80011c2 <__aeabi_ddiv+0xae>
 80014cc:	2501      	movs	r5, #1
 80014ce:	426d      	negs	r5, r5
 80014d0:	2301      	movs	r3, #1
 80014d2:	1a9b      	subs	r3, r3, r2
 80014d4:	2b38      	cmp	r3, #56	; 0x38
 80014d6:	dd00      	ble.n	80014da <__aeabi_ddiv+0x3c6>
 80014d8:	e670      	b.n	80011bc <__aeabi_ddiv+0xa8>
 80014da:	2b1f      	cmp	r3, #31
 80014dc:	dc00      	bgt.n	80014e0 <__aeabi_ddiv+0x3cc>
 80014de:	e0bf      	b.n	8001660 <__aeabi_ddiv+0x54c>
 80014e0:	211f      	movs	r1, #31
 80014e2:	4249      	negs	r1, r1
 80014e4:	1a8a      	subs	r2, r1, r2
 80014e6:	4641      	mov	r1, r8
 80014e8:	40d1      	lsrs	r1, r2
 80014ea:	000a      	movs	r2, r1
 80014ec:	2b20      	cmp	r3, #32
 80014ee:	d004      	beq.n	80014fa <__aeabi_ddiv+0x3e6>
 80014f0:	4641      	mov	r1, r8
 80014f2:	4b80      	ldr	r3, [pc, #512]	; (80016f4 <__aeabi_ddiv+0x5e0>)
 80014f4:	445b      	add	r3, fp
 80014f6:	4099      	lsls	r1, r3
 80014f8:	430d      	orrs	r5, r1
 80014fa:	1e6b      	subs	r3, r5, #1
 80014fc:	419d      	sbcs	r5, r3
 80014fe:	2307      	movs	r3, #7
 8001500:	432a      	orrs	r2, r5
 8001502:	001d      	movs	r5, r3
 8001504:	2400      	movs	r4, #0
 8001506:	4015      	ands	r5, r2
 8001508:	4213      	tst	r3, r2
 800150a:	d100      	bne.n	800150e <__aeabi_ddiv+0x3fa>
 800150c:	e0d4      	b.n	80016b8 <__aeabi_ddiv+0x5a4>
 800150e:	210f      	movs	r1, #15
 8001510:	2300      	movs	r3, #0
 8001512:	4011      	ands	r1, r2
 8001514:	2904      	cmp	r1, #4
 8001516:	d100      	bne.n	800151a <__aeabi_ddiv+0x406>
 8001518:	e0cb      	b.n	80016b2 <__aeabi_ddiv+0x59e>
 800151a:	1d11      	adds	r1, r2, #4
 800151c:	4291      	cmp	r1, r2
 800151e:	4192      	sbcs	r2, r2
 8001520:	4252      	negs	r2, r2
 8001522:	189b      	adds	r3, r3, r2
 8001524:	000a      	movs	r2, r1
 8001526:	0219      	lsls	r1, r3, #8
 8001528:	d400      	bmi.n	800152c <__aeabi_ddiv+0x418>
 800152a:	e0c2      	b.n	80016b2 <__aeabi_ddiv+0x59e>
 800152c:	2301      	movs	r3, #1
 800152e:	2400      	movs	r4, #0
 8001530:	2500      	movs	r5, #0
 8001532:	e646      	b.n	80011c2 <__aeabi_ddiv+0xae>
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	4641      	mov	r1, r8
 8001538:	031b      	lsls	r3, r3, #12
 800153a:	4219      	tst	r1, r3
 800153c:	d008      	beq.n	8001550 <__aeabi_ddiv+0x43c>
 800153e:	421c      	tst	r4, r3
 8001540:	d106      	bne.n	8001550 <__aeabi_ddiv+0x43c>
 8001542:	431c      	orrs	r4, r3
 8001544:	0324      	lsls	r4, r4, #12
 8001546:	46ba      	mov	sl, r7
 8001548:	0015      	movs	r5, r2
 800154a:	4b69      	ldr	r3, [pc, #420]	; (80016f0 <__aeabi_ddiv+0x5dc>)
 800154c:	0b24      	lsrs	r4, r4, #12
 800154e:	e638      	b.n	80011c2 <__aeabi_ddiv+0xae>
 8001550:	2480      	movs	r4, #128	; 0x80
 8001552:	4643      	mov	r3, r8
 8001554:	0324      	lsls	r4, r4, #12
 8001556:	431c      	orrs	r4, r3
 8001558:	0324      	lsls	r4, r4, #12
 800155a:	46b2      	mov	sl, r6
 800155c:	4b64      	ldr	r3, [pc, #400]	; (80016f0 <__aeabi_ddiv+0x5dc>)
 800155e:	0b24      	lsrs	r4, r4, #12
 8001560:	e62f      	b.n	80011c2 <__aeabi_ddiv+0xae>
 8001562:	2b00      	cmp	r3, #0
 8001564:	d100      	bne.n	8001568 <__aeabi_ddiv+0x454>
 8001566:	e703      	b.n	8001370 <__aeabi_ddiv+0x25c>
 8001568:	19a6      	adds	r6, r4, r6
 800156a:	1e68      	subs	r0, r5, #1
 800156c:	42a6      	cmp	r6, r4
 800156e:	d200      	bcs.n	8001572 <__aeabi_ddiv+0x45e>
 8001570:	e08d      	b.n	800168e <__aeabi_ddiv+0x57a>
 8001572:	428e      	cmp	r6, r1
 8001574:	d200      	bcs.n	8001578 <__aeabi_ddiv+0x464>
 8001576:	e0a3      	b.n	80016c0 <__aeabi_ddiv+0x5ac>
 8001578:	d100      	bne.n	800157c <__aeabi_ddiv+0x468>
 800157a:	e0b3      	b.n	80016e4 <__aeabi_ddiv+0x5d0>
 800157c:	0005      	movs	r5, r0
 800157e:	e6f5      	b.n	800136c <__aeabi_ddiv+0x258>
 8001580:	42aa      	cmp	r2, r5
 8001582:	d900      	bls.n	8001586 <__aeabi_ddiv+0x472>
 8001584:	e639      	b.n	80011fa <__aeabi_ddiv+0xe6>
 8001586:	4643      	mov	r3, r8
 8001588:	07de      	lsls	r6, r3, #31
 800158a:	0858      	lsrs	r0, r3, #1
 800158c:	086b      	lsrs	r3, r5, #1
 800158e:	431e      	orrs	r6, r3
 8001590:	07ed      	lsls	r5, r5, #31
 8001592:	e639      	b.n	8001208 <__aeabi_ddiv+0xf4>
 8001594:	4648      	mov	r0, r9
 8001596:	f001 f937 	bl	8002808 <__clzsi2>
 800159a:	0001      	movs	r1, r0
 800159c:	0002      	movs	r2, r0
 800159e:	3115      	adds	r1, #21
 80015a0:	3220      	adds	r2, #32
 80015a2:	291c      	cmp	r1, #28
 80015a4:	dc00      	bgt.n	80015a8 <__aeabi_ddiv+0x494>
 80015a6:	e72c      	b.n	8001402 <__aeabi_ddiv+0x2ee>
 80015a8:	464b      	mov	r3, r9
 80015aa:	3808      	subs	r0, #8
 80015ac:	4083      	lsls	r3, r0
 80015ae:	2500      	movs	r5, #0
 80015b0:	4698      	mov	r8, r3
 80015b2:	e732      	b.n	800141a <__aeabi_ddiv+0x306>
 80015b4:	f001 f928 	bl	8002808 <__clzsi2>
 80015b8:	0003      	movs	r3, r0
 80015ba:	001a      	movs	r2, r3
 80015bc:	3215      	adds	r2, #21
 80015be:	3020      	adds	r0, #32
 80015c0:	2a1c      	cmp	r2, #28
 80015c2:	dc00      	bgt.n	80015c6 <__aeabi_ddiv+0x4b2>
 80015c4:	e700      	b.n	80013c8 <__aeabi_ddiv+0x2b4>
 80015c6:	4654      	mov	r4, sl
 80015c8:	3b08      	subs	r3, #8
 80015ca:	2200      	movs	r2, #0
 80015cc:	409c      	lsls	r4, r3
 80015ce:	e705      	b.n	80013dc <__aeabi_ddiv+0x2c8>
 80015d0:	1936      	adds	r6, r6, r4
 80015d2:	3b01      	subs	r3, #1
 80015d4:	42b4      	cmp	r4, r6
 80015d6:	d900      	bls.n	80015da <__aeabi_ddiv+0x4c6>
 80015d8:	e6a6      	b.n	8001328 <__aeabi_ddiv+0x214>
 80015da:	42b2      	cmp	r2, r6
 80015dc:	d800      	bhi.n	80015e0 <__aeabi_ddiv+0x4cc>
 80015de:	e6a3      	b.n	8001328 <__aeabi_ddiv+0x214>
 80015e0:	1e83      	subs	r3, r0, #2
 80015e2:	1936      	adds	r6, r6, r4
 80015e4:	e6a0      	b.n	8001328 <__aeabi_ddiv+0x214>
 80015e6:	1909      	adds	r1, r1, r4
 80015e8:	3d01      	subs	r5, #1
 80015ea:	428c      	cmp	r4, r1
 80015ec:	d900      	bls.n	80015f0 <__aeabi_ddiv+0x4dc>
 80015ee:	e68d      	b.n	800130c <__aeabi_ddiv+0x1f8>
 80015f0:	428a      	cmp	r2, r1
 80015f2:	d800      	bhi.n	80015f6 <__aeabi_ddiv+0x4e2>
 80015f4:	e68a      	b.n	800130c <__aeabi_ddiv+0x1f8>
 80015f6:	1e85      	subs	r5, r0, #2
 80015f8:	1909      	adds	r1, r1, r4
 80015fa:	e687      	b.n	800130c <__aeabi_ddiv+0x1f8>
 80015fc:	230f      	movs	r3, #15
 80015fe:	402b      	ands	r3, r5
 8001600:	2b04      	cmp	r3, #4
 8001602:	d100      	bne.n	8001606 <__aeabi_ddiv+0x4f2>
 8001604:	e6bc      	b.n	8001380 <__aeabi_ddiv+0x26c>
 8001606:	2305      	movs	r3, #5
 8001608:	425b      	negs	r3, r3
 800160a:	42ab      	cmp	r3, r5
 800160c:	419b      	sbcs	r3, r3
 800160e:	3504      	adds	r5, #4
 8001610:	425b      	negs	r3, r3
 8001612:	08ed      	lsrs	r5, r5, #3
 8001614:	4498      	add	r8, r3
 8001616:	e6b4      	b.n	8001382 <__aeabi_ddiv+0x26e>
 8001618:	42af      	cmp	r7, r5
 800161a:	d900      	bls.n	800161e <__aeabi_ddiv+0x50a>
 800161c:	e660      	b.n	80012e0 <__aeabi_ddiv+0x1cc>
 800161e:	4282      	cmp	r2, r0
 8001620:	d804      	bhi.n	800162c <__aeabi_ddiv+0x518>
 8001622:	d000      	beq.n	8001626 <__aeabi_ddiv+0x512>
 8001624:	e65c      	b.n	80012e0 <__aeabi_ddiv+0x1cc>
 8001626:	42ae      	cmp	r6, r5
 8001628:	d800      	bhi.n	800162c <__aeabi_ddiv+0x518>
 800162a:	e659      	b.n	80012e0 <__aeabi_ddiv+0x1cc>
 800162c:	2302      	movs	r3, #2
 800162e:	425b      	negs	r3, r3
 8001630:	469c      	mov	ip, r3
 8001632:	9b00      	ldr	r3, [sp, #0]
 8001634:	44e0      	add	r8, ip
 8001636:	469c      	mov	ip, r3
 8001638:	4465      	add	r5, ip
 800163a:	429d      	cmp	r5, r3
 800163c:	419b      	sbcs	r3, r3
 800163e:	425b      	negs	r3, r3
 8001640:	191b      	adds	r3, r3, r4
 8001642:	18c0      	adds	r0, r0, r3
 8001644:	e64d      	b.n	80012e2 <__aeabi_ddiv+0x1ce>
 8001646:	428a      	cmp	r2, r1
 8001648:	d800      	bhi.n	800164c <__aeabi_ddiv+0x538>
 800164a:	e60e      	b.n	800126a <__aeabi_ddiv+0x156>
 800164c:	1e83      	subs	r3, r0, #2
 800164e:	1909      	adds	r1, r1, r4
 8001650:	e60b      	b.n	800126a <__aeabi_ddiv+0x156>
 8001652:	428a      	cmp	r2, r1
 8001654:	d800      	bhi.n	8001658 <__aeabi_ddiv+0x544>
 8001656:	e5f4      	b.n	8001242 <__aeabi_ddiv+0x12e>
 8001658:	1e83      	subs	r3, r0, #2
 800165a:	4698      	mov	r8, r3
 800165c:	1909      	adds	r1, r1, r4
 800165e:	e5f0      	b.n	8001242 <__aeabi_ddiv+0x12e>
 8001660:	4925      	ldr	r1, [pc, #148]	; (80016f8 <__aeabi_ddiv+0x5e4>)
 8001662:	0028      	movs	r0, r5
 8001664:	4459      	add	r1, fp
 8001666:	408d      	lsls	r5, r1
 8001668:	4642      	mov	r2, r8
 800166a:	408a      	lsls	r2, r1
 800166c:	1e69      	subs	r1, r5, #1
 800166e:	418d      	sbcs	r5, r1
 8001670:	4641      	mov	r1, r8
 8001672:	40d8      	lsrs	r0, r3
 8001674:	40d9      	lsrs	r1, r3
 8001676:	4302      	orrs	r2, r0
 8001678:	432a      	orrs	r2, r5
 800167a:	000b      	movs	r3, r1
 800167c:	0751      	lsls	r1, r2, #29
 800167e:	d100      	bne.n	8001682 <__aeabi_ddiv+0x56e>
 8001680:	e751      	b.n	8001526 <__aeabi_ddiv+0x412>
 8001682:	210f      	movs	r1, #15
 8001684:	4011      	ands	r1, r2
 8001686:	2904      	cmp	r1, #4
 8001688:	d000      	beq.n	800168c <__aeabi_ddiv+0x578>
 800168a:	e746      	b.n	800151a <__aeabi_ddiv+0x406>
 800168c:	e74b      	b.n	8001526 <__aeabi_ddiv+0x412>
 800168e:	0005      	movs	r5, r0
 8001690:	428e      	cmp	r6, r1
 8001692:	d000      	beq.n	8001696 <__aeabi_ddiv+0x582>
 8001694:	e66a      	b.n	800136c <__aeabi_ddiv+0x258>
 8001696:	9a00      	ldr	r2, [sp, #0]
 8001698:	4293      	cmp	r3, r2
 800169a:	d000      	beq.n	800169e <__aeabi_ddiv+0x58a>
 800169c:	e666      	b.n	800136c <__aeabi_ddiv+0x258>
 800169e:	e667      	b.n	8001370 <__aeabi_ddiv+0x25c>
 80016a0:	4a16      	ldr	r2, [pc, #88]	; (80016fc <__aeabi_ddiv+0x5e8>)
 80016a2:	445a      	add	r2, fp
 80016a4:	2a00      	cmp	r2, #0
 80016a6:	dc00      	bgt.n	80016aa <__aeabi_ddiv+0x596>
 80016a8:	e710      	b.n	80014cc <__aeabi_ddiv+0x3b8>
 80016aa:	2301      	movs	r3, #1
 80016ac:	2500      	movs	r5, #0
 80016ae:	4498      	add	r8, r3
 80016b0:	e667      	b.n	8001382 <__aeabi_ddiv+0x26e>
 80016b2:	075d      	lsls	r5, r3, #29
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	0b1c      	lsrs	r4, r3, #12
 80016b8:	08d2      	lsrs	r2, r2, #3
 80016ba:	2300      	movs	r3, #0
 80016bc:	4315      	orrs	r5, r2
 80016be:	e580      	b.n	80011c2 <__aeabi_ddiv+0xae>
 80016c0:	9800      	ldr	r0, [sp, #0]
 80016c2:	3d02      	subs	r5, #2
 80016c4:	0042      	lsls	r2, r0, #1
 80016c6:	4282      	cmp	r2, r0
 80016c8:	41bf      	sbcs	r7, r7
 80016ca:	427f      	negs	r7, r7
 80016cc:	193c      	adds	r4, r7, r4
 80016ce:	1936      	adds	r6, r6, r4
 80016d0:	9200      	str	r2, [sp, #0]
 80016d2:	e7dd      	b.n	8001690 <__aeabi_ddiv+0x57c>
 80016d4:	2480      	movs	r4, #128	; 0x80
 80016d6:	4643      	mov	r3, r8
 80016d8:	0324      	lsls	r4, r4, #12
 80016da:	431c      	orrs	r4, r3
 80016dc:	0324      	lsls	r4, r4, #12
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <__aeabi_ddiv+0x5dc>)
 80016e0:	0b24      	lsrs	r4, r4, #12
 80016e2:	e56e      	b.n	80011c2 <__aeabi_ddiv+0xae>
 80016e4:	9a00      	ldr	r2, [sp, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d3ea      	bcc.n	80016c0 <__aeabi_ddiv+0x5ac>
 80016ea:	0005      	movs	r5, r0
 80016ec:	e7d3      	b.n	8001696 <__aeabi_ddiv+0x582>
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	000007ff 	.word	0x000007ff
 80016f4:	0000043e 	.word	0x0000043e
 80016f8:	0000041e 	.word	0x0000041e
 80016fc:	000003ff 	.word	0x000003ff

08001700 <__eqdf2>:
 8001700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001702:	464e      	mov	r6, r9
 8001704:	4645      	mov	r5, r8
 8001706:	46de      	mov	lr, fp
 8001708:	4657      	mov	r7, sl
 800170a:	4690      	mov	r8, r2
 800170c:	b5e0      	push	{r5, r6, r7, lr}
 800170e:	0017      	movs	r7, r2
 8001710:	031a      	lsls	r2, r3, #12
 8001712:	0b12      	lsrs	r2, r2, #12
 8001714:	0005      	movs	r5, r0
 8001716:	4684      	mov	ip, r0
 8001718:	4819      	ldr	r0, [pc, #100]	; (8001780 <__eqdf2+0x80>)
 800171a:	030e      	lsls	r6, r1, #12
 800171c:	004c      	lsls	r4, r1, #1
 800171e:	4691      	mov	r9, r2
 8001720:	005a      	lsls	r2, r3, #1
 8001722:	0fdb      	lsrs	r3, r3, #31
 8001724:	469b      	mov	fp, r3
 8001726:	0b36      	lsrs	r6, r6, #12
 8001728:	0d64      	lsrs	r4, r4, #21
 800172a:	0fc9      	lsrs	r1, r1, #31
 800172c:	0d52      	lsrs	r2, r2, #21
 800172e:	4284      	cmp	r4, r0
 8001730:	d019      	beq.n	8001766 <__eqdf2+0x66>
 8001732:	4282      	cmp	r2, r0
 8001734:	d010      	beq.n	8001758 <__eqdf2+0x58>
 8001736:	2001      	movs	r0, #1
 8001738:	4294      	cmp	r4, r2
 800173a:	d10e      	bne.n	800175a <__eqdf2+0x5a>
 800173c:	454e      	cmp	r6, r9
 800173e:	d10c      	bne.n	800175a <__eqdf2+0x5a>
 8001740:	2001      	movs	r0, #1
 8001742:	45c4      	cmp	ip, r8
 8001744:	d109      	bne.n	800175a <__eqdf2+0x5a>
 8001746:	4559      	cmp	r1, fp
 8001748:	d017      	beq.n	800177a <__eqdf2+0x7a>
 800174a:	2c00      	cmp	r4, #0
 800174c:	d105      	bne.n	800175a <__eqdf2+0x5a>
 800174e:	0030      	movs	r0, r6
 8001750:	4328      	orrs	r0, r5
 8001752:	1e43      	subs	r3, r0, #1
 8001754:	4198      	sbcs	r0, r3
 8001756:	e000      	b.n	800175a <__eqdf2+0x5a>
 8001758:	2001      	movs	r0, #1
 800175a:	bcf0      	pop	{r4, r5, r6, r7}
 800175c:	46bb      	mov	fp, r7
 800175e:	46b2      	mov	sl, r6
 8001760:	46a9      	mov	r9, r5
 8001762:	46a0      	mov	r8, r4
 8001764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001766:	0033      	movs	r3, r6
 8001768:	2001      	movs	r0, #1
 800176a:	432b      	orrs	r3, r5
 800176c:	d1f5      	bne.n	800175a <__eqdf2+0x5a>
 800176e:	42a2      	cmp	r2, r4
 8001770:	d1f3      	bne.n	800175a <__eqdf2+0x5a>
 8001772:	464b      	mov	r3, r9
 8001774:	433b      	orrs	r3, r7
 8001776:	d1f0      	bne.n	800175a <__eqdf2+0x5a>
 8001778:	e7e2      	b.n	8001740 <__eqdf2+0x40>
 800177a:	2000      	movs	r0, #0
 800177c:	e7ed      	b.n	800175a <__eqdf2+0x5a>
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	000007ff 	.word	0x000007ff

08001784 <__gedf2>:
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001786:	4647      	mov	r7, r8
 8001788:	46ce      	mov	lr, r9
 800178a:	0004      	movs	r4, r0
 800178c:	0018      	movs	r0, r3
 800178e:	0016      	movs	r6, r2
 8001790:	031b      	lsls	r3, r3, #12
 8001792:	0b1b      	lsrs	r3, r3, #12
 8001794:	4d2d      	ldr	r5, [pc, #180]	; (800184c <__gedf2+0xc8>)
 8001796:	004a      	lsls	r2, r1, #1
 8001798:	4699      	mov	r9, r3
 800179a:	b580      	push	{r7, lr}
 800179c:	0043      	lsls	r3, r0, #1
 800179e:	030f      	lsls	r7, r1, #12
 80017a0:	46a4      	mov	ip, r4
 80017a2:	46b0      	mov	r8, r6
 80017a4:	0b3f      	lsrs	r7, r7, #12
 80017a6:	0d52      	lsrs	r2, r2, #21
 80017a8:	0fc9      	lsrs	r1, r1, #31
 80017aa:	0d5b      	lsrs	r3, r3, #21
 80017ac:	0fc0      	lsrs	r0, r0, #31
 80017ae:	42aa      	cmp	r2, r5
 80017b0:	d021      	beq.n	80017f6 <__gedf2+0x72>
 80017b2:	42ab      	cmp	r3, r5
 80017b4:	d013      	beq.n	80017de <__gedf2+0x5a>
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	d122      	bne.n	8001800 <__gedf2+0x7c>
 80017ba:	433c      	orrs	r4, r7
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <__gedf2+0x42>
 80017c0:	464d      	mov	r5, r9
 80017c2:	432e      	orrs	r6, r5
 80017c4:	d022      	beq.n	800180c <__gedf2+0x88>
 80017c6:	2c00      	cmp	r4, #0
 80017c8:	d010      	beq.n	80017ec <__gedf2+0x68>
 80017ca:	4281      	cmp	r1, r0
 80017cc:	d022      	beq.n	8001814 <__gedf2+0x90>
 80017ce:	2002      	movs	r0, #2
 80017d0:	3901      	subs	r1, #1
 80017d2:	4008      	ands	r0, r1
 80017d4:	3801      	subs	r0, #1
 80017d6:	bcc0      	pop	{r6, r7}
 80017d8:	46b9      	mov	r9, r7
 80017da:	46b0      	mov	r8, r6
 80017dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017de:	464d      	mov	r5, r9
 80017e0:	432e      	orrs	r6, r5
 80017e2:	d129      	bne.n	8001838 <__gedf2+0xb4>
 80017e4:	2a00      	cmp	r2, #0
 80017e6:	d1f0      	bne.n	80017ca <__gedf2+0x46>
 80017e8:	433c      	orrs	r4, r7
 80017ea:	d1ee      	bne.n	80017ca <__gedf2+0x46>
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d1f2      	bne.n	80017d6 <__gedf2+0x52>
 80017f0:	2001      	movs	r0, #1
 80017f2:	4240      	negs	r0, r0
 80017f4:	e7ef      	b.n	80017d6 <__gedf2+0x52>
 80017f6:	003d      	movs	r5, r7
 80017f8:	4325      	orrs	r5, r4
 80017fa:	d11d      	bne.n	8001838 <__gedf2+0xb4>
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d0ee      	beq.n	80017de <__gedf2+0x5a>
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1e2      	bne.n	80017ca <__gedf2+0x46>
 8001804:	464c      	mov	r4, r9
 8001806:	4326      	orrs	r6, r4
 8001808:	d1df      	bne.n	80017ca <__gedf2+0x46>
 800180a:	e7e0      	b.n	80017ce <__gedf2+0x4a>
 800180c:	2000      	movs	r0, #0
 800180e:	2c00      	cmp	r4, #0
 8001810:	d0e1      	beq.n	80017d6 <__gedf2+0x52>
 8001812:	e7dc      	b.n	80017ce <__gedf2+0x4a>
 8001814:	429a      	cmp	r2, r3
 8001816:	dc0a      	bgt.n	800182e <__gedf2+0xaa>
 8001818:	dbe8      	blt.n	80017ec <__gedf2+0x68>
 800181a:	454f      	cmp	r7, r9
 800181c:	d8d7      	bhi.n	80017ce <__gedf2+0x4a>
 800181e:	d00e      	beq.n	800183e <__gedf2+0xba>
 8001820:	2000      	movs	r0, #0
 8001822:	454f      	cmp	r7, r9
 8001824:	d2d7      	bcs.n	80017d6 <__gedf2+0x52>
 8001826:	2900      	cmp	r1, #0
 8001828:	d0e2      	beq.n	80017f0 <__gedf2+0x6c>
 800182a:	0008      	movs	r0, r1
 800182c:	e7d3      	b.n	80017d6 <__gedf2+0x52>
 800182e:	4243      	negs	r3, r0
 8001830:	4158      	adcs	r0, r3
 8001832:	0040      	lsls	r0, r0, #1
 8001834:	3801      	subs	r0, #1
 8001836:	e7ce      	b.n	80017d6 <__gedf2+0x52>
 8001838:	2002      	movs	r0, #2
 800183a:	4240      	negs	r0, r0
 800183c:	e7cb      	b.n	80017d6 <__gedf2+0x52>
 800183e:	45c4      	cmp	ip, r8
 8001840:	d8c5      	bhi.n	80017ce <__gedf2+0x4a>
 8001842:	2000      	movs	r0, #0
 8001844:	45c4      	cmp	ip, r8
 8001846:	d2c6      	bcs.n	80017d6 <__gedf2+0x52>
 8001848:	e7ed      	b.n	8001826 <__gedf2+0xa2>
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	000007ff 	.word	0x000007ff

08001850 <__ledf2>:
 8001850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001852:	4647      	mov	r7, r8
 8001854:	46ce      	mov	lr, r9
 8001856:	0004      	movs	r4, r0
 8001858:	0018      	movs	r0, r3
 800185a:	0016      	movs	r6, r2
 800185c:	031b      	lsls	r3, r3, #12
 800185e:	0b1b      	lsrs	r3, r3, #12
 8001860:	4d2c      	ldr	r5, [pc, #176]	; (8001914 <__ledf2+0xc4>)
 8001862:	004a      	lsls	r2, r1, #1
 8001864:	4699      	mov	r9, r3
 8001866:	b580      	push	{r7, lr}
 8001868:	0043      	lsls	r3, r0, #1
 800186a:	030f      	lsls	r7, r1, #12
 800186c:	46a4      	mov	ip, r4
 800186e:	46b0      	mov	r8, r6
 8001870:	0b3f      	lsrs	r7, r7, #12
 8001872:	0d52      	lsrs	r2, r2, #21
 8001874:	0fc9      	lsrs	r1, r1, #31
 8001876:	0d5b      	lsrs	r3, r3, #21
 8001878:	0fc0      	lsrs	r0, r0, #31
 800187a:	42aa      	cmp	r2, r5
 800187c:	d00d      	beq.n	800189a <__ledf2+0x4a>
 800187e:	42ab      	cmp	r3, r5
 8001880:	d010      	beq.n	80018a4 <__ledf2+0x54>
 8001882:	2a00      	cmp	r2, #0
 8001884:	d127      	bne.n	80018d6 <__ledf2+0x86>
 8001886:	433c      	orrs	r4, r7
 8001888:	2b00      	cmp	r3, #0
 800188a:	d111      	bne.n	80018b0 <__ledf2+0x60>
 800188c:	464d      	mov	r5, r9
 800188e:	432e      	orrs	r6, r5
 8001890:	d10e      	bne.n	80018b0 <__ledf2+0x60>
 8001892:	2000      	movs	r0, #0
 8001894:	2c00      	cmp	r4, #0
 8001896:	d015      	beq.n	80018c4 <__ledf2+0x74>
 8001898:	e00e      	b.n	80018b8 <__ledf2+0x68>
 800189a:	003d      	movs	r5, r7
 800189c:	4325      	orrs	r5, r4
 800189e:	d110      	bne.n	80018c2 <__ledf2+0x72>
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d118      	bne.n	80018d6 <__ledf2+0x86>
 80018a4:	464d      	mov	r5, r9
 80018a6:	432e      	orrs	r6, r5
 80018a8:	d10b      	bne.n	80018c2 <__ledf2+0x72>
 80018aa:	2a00      	cmp	r2, #0
 80018ac:	d102      	bne.n	80018b4 <__ledf2+0x64>
 80018ae:	433c      	orrs	r4, r7
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	d00b      	beq.n	80018cc <__ledf2+0x7c>
 80018b4:	4281      	cmp	r1, r0
 80018b6:	d014      	beq.n	80018e2 <__ledf2+0x92>
 80018b8:	2002      	movs	r0, #2
 80018ba:	3901      	subs	r1, #1
 80018bc:	4008      	ands	r0, r1
 80018be:	3801      	subs	r0, #1
 80018c0:	e000      	b.n	80018c4 <__ledf2+0x74>
 80018c2:	2002      	movs	r0, #2
 80018c4:	bcc0      	pop	{r6, r7}
 80018c6:	46b9      	mov	r9, r7
 80018c8:	46b0      	mov	r8, r6
 80018ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018cc:	2800      	cmp	r0, #0
 80018ce:	d1f9      	bne.n	80018c4 <__ledf2+0x74>
 80018d0:	2001      	movs	r0, #1
 80018d2:	4240      	negs	r0, r0
 80018d4:	e7f6      	b.n	80018c4 <__ledf2+0x74>
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ec      	bne.n	80018b4 <__ledf2+0x64>
 80018da:	464c      	mov	r4, r9
 80018dc:	4326      	orrs	r6, r4
 80018de:	d1e9      	bne.n	80018b4 <__ledf2+0x64>
 80018e0:	e7ea      	b.n	80018b8 <__ledf2+0x68>
 80018e2:	429a      	cmp	r2, r3
 80018e4:	dd04      	ble.n	80018f0 <__ledf2+0xa0>
 80018e6:	4243      	negs	r3, r0
 80018e8:	4158      	adcs	r0, r3
 80018ea:	0040      	lsls	r0, r0, #1
 80018ec:	3801      	subs	r0, #1
 80018ee:	e7e9      	b.n	80018c4 <__ledf2+0x74>
 80018f0:	429a      	cmp	r2, r3
 80018f2:	dbeb      	blt.n	80018cc <__ledf2+0x7c>
 80018f4:	454f      	cmp	r7, r9
 80018f6:	d8df      	bhi.n	80018b8 <__ledf2+0x68>
 80018f8:	d006      	beq.n	8001908 <__ledf2+0xb8>
 80018fa:	2000      	movs	r0, #0
 80018fc:	454f      	cmp	r7, r9
 80018fe:	d2e1      	bcs.n	80018c4 <__ledf2+0x74>
 8001900:	2900      	cmp	r1, #0
 8001902:	d0e5      	beq.n	80018d0 <__ledf2+0x80>
 8001904:	0008      	movs	r0, r1
 8001906:	e7dd      	b.n	80018c4 <__ledf2+0x74>
 8001908:	45c4      	cmp	ip, r8
 800190a:	d8d5      	bhi.n	80018b8 <__ledf2+0x68>
 800190c:	2000      	movs	r0, #0
 800190e:	45c4      	cmp	ip, r8
 8001910:	d2d8      	bcs.n	80018c4 <__ledf2+0x74>
 8001912:	e7f5      	b.n	8001900 <__ledf2+0xb0>
 8001914:	000007ff 	.word	0x000007ff

08001918 <__aeabi_dmul>:
 8001918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191a:	4657      	mov	r7, sl
 800191c:	464e      	mov	r6, r9
 800191e:	4645      	mov	r5, r8
 8001920:	46de      	mov	lr, fp
 8001922:	b5e0      	push	{r5, r6, r7, lr}
 8001924:	4698      	mov	r8, r3
 8001926:	030c      	lsls	r4, r1, #12
 8001928:	004b      	lsls	r3, r1, #1
 800192a:	0006      	movs	r6, r0
 800192c:	4692      	mov	sl, r2
 800192e:	b087      	sub	sp, #28
 8001930:	0b24      	lsrs	r4, r4, #12
 8001932:	0d5b      	lsrs	r3, r3, #21
 8001934:	0fcf      	lsrs	r7, r1, #31
 8001936:	2b00      	cmp	r3, #0
 8001938:	d100      	bne.n	800193c <__aeabi_dmul+0x24>
 800193a:	e15c      	b.n	8001bf6 <__aeabi_dmul+0x2de>
 800193c:	4ad9      	ldr	r2, [pc, #868]	; (8001ca4 <__aeabi_dmul+0x38c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d100      	bne.n	8001944 <__aeabi_dmul+0x2c>
 8001942:	e175      	b.n	8001c30 <__aeabi_dmul+0x318>
 8001944:	0f42      	lsrs	r2, r0, #29
 8001946:	00e4      	lsls	r4, r4, #3
 8001948:	4314      	orrs	r4, r2
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	0412      	lsls	r2, r2, #16
 800194e:	4314      	orrs	r4, r2
 8001950:	4ad5      	ldr	r2, [pc, #852]	; (8001ca8 <__aeabi_dmul+0x390>)
 8001952:	00c5      	lsls	r5, r0, #3
 8001954:	4694      	mov	ip, r2
 8001956:	4463      	add	r3, ip
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	4699      	mov	r9, r3
 800195e:	469b      	mov	fp, r3
 8001960:	4643      	mov	r3, r8
 8001962:	4642      	mov	r2, r8
 8001964:	031e      	lsls	r6, r3, #12
 8001966:	0fd2      	lsrs	r2, r2, #31
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	4650      	mov	r0, sl
 800196c:	4690      	mov	r8, r2
 800196e:	0b36      	lsrs	r6, r6, #12
 8001970:	0d5b      	lsrs	r3, r3, #21
 8001972:	d100      	bne.n	8001976 <__aeabi_dmul+0x5e>
 8001974:	e120      	b.n	8001bb8 <__aeabi_dmul+0x2a0>
 8001976:	4acb      	ldr	r2, [pc, #812]	; (8001ca4 <__aeabi_dmul+0x38c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d100      	bne.n	800197e <__aeabi_dmul+0x66>
 800197c:	e162      	b.n	8001c44 <__aeabi_dmul+0x32c>
 800197e:	49ca      	ldr	r1, [pc, #808]	; (8001ca8 <__aeabi_dmul+0x390>)
 8001980:	0f42      	lsrs	r2, r0, #29
 8001982:	468c      	mov	ip, r1
 8001984:	9900      	ldr	r1, [sp, #0]
 8001986:	4463      	add	r3, ip
 8001988:	00f6      	lsls	r6, r6, #3
 800198a:	468c      	mov	ip, r1
 800198c:	4316      	orrs	r6, r2
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	449c      	add	ip, r3
 8001992:	0412      	lsls	r2, r2, #16
 8001994:	4663      	mov	r3, ip
 8001996:	4316      	orrs	r6, r2
 8001998:	00c2      	lsls	r2, r0, #3
 800199a:	2000      	movs	r0, #0
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	9900      	ldr	r1, [sp, #0]
 80019a0:	4643      	mov	r3, r8
 80019a2:	3101      	adds	r1, #1
 80019a4:	468c      	mov	ip, r1
 80019a6:	4649      	mov	r1, r9
 80019a8:	407b      	eors	r3, r7
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	290f      	cmp	r1, #15
 80019ae:	d826      	bhi.n	80019fe <__aeabi_dmul+0xe6>
 80019b0:	4bbe      	ldr	r3, [pc, #760]	; (8001cac <__aeabi_dmul+0x394>)
 80019b2:	0089      	lsls	r1, r1, #2
 80019b4:	5859      	ldr	r1, [r3, r1]
 80019b6:	468f      	mov	pc, r1
 80019b8:	4643      	mov	r3, r8
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	0034      	movs	r4, r6
 80019be:	0015      	movs	r5, r2
 80019c0:	4683      	mov	fp, r0
 80019c2:	465b      	mov	r3, fp
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d016      	beq.n	80019f6 <__aeabi_dmul+0xde>
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d100      	bne.n	80019ce <__aeabi_dmul+0xb6>
 80019cc:	e203      	b.n	8001dd6 <__aeabi_dmul+0x4be>
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d000      	beq.n	80019d4 <__aeabi_dmul+0xbc>
 80019d2:	e0cd      	b.n	8001b70 <__aeabi_dmul+0x258>
 80019d4:	2200      	movs	r2, #0
 80019d6:	2400      	movs	r4, #0
 80019d8:	2500      	movs	r5, #0
 80019da:	9b01      	ldr	r3, [sp, #4]
 80019dc:	0512      	lsls	r2, r2, #20
 80019de:	4322      	orrs	r2, r4
 80019e0:	07db      	lsls	r3, r3, #31
 80019e2:	431a      	orrs	r2, r3
 80019e4:	0028      	movs	r0, r5
 80019e6:	0011      	movs	r1, r2
 80019e8:	b007      	add	sp, #28
 80019ea:	bcf0      	pop	{r4, r5, r6, r7}
 80019ec:	46bb      	mov	fp, r7
 80019ee:	46b2      	mov	sl, r6
 80019f0:	46a9      	mov	r9, r5
 80019f2:	46a0      	mov	r8, r4
 80019f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f6:	2400      	movs	r4, #0
 80019f8:	2500      	movs	r5, #0
 80019fa:	4aaa      	ldr	r2, [pc, #680]	; (8001ca4 <__aeabi_dmul+0x38c>)
 80019fc:	e7ed      	b.n	80019da <__aeabi_dmul+0xc2>
 80019fe:	0c28      	lsrs	r0, r5, #16
 8001a00:	042d      	lsls	r5, r5, #16
 8001a02:	0c2d      	lsrs	r5, r5, #16
 8001a04:	002b      	movs	r3, r5
 8001a06:	0c11      	lsrs	r1, r2, #16
 8001a08:	0412      	lsls	r2, r2, #16
 8001a0a:	0c12      	lsrs	r2, r2, #16
 8001a0c:	4353      	muls	r3, r2
 8001a0e:	4698      	mov	r8, r3
 8001a10:	0013      	movs	r3, r2
 8001a12:	002f      	movs	r7, r5
 8001a14:	4343      	muls	r3, r0
 8001a16:	4699      	mov	r9, r3
 8001a18:	434f      	muls	r7, r1
 8001a1a:	444f      	add	r7, r9
 8001a1c:	46bb      	mov	fp, r7
 8001a1e:	4647      	mov	r7, r8
 8001a20:	000b      	movs	r3, r1
 8001a22:	0c3f      	lsrs	r7, r7, #16
 8001a24:	46ba      	mov	sl, r7
 8001a26:	4343      	muls	r3, r0
 8001a28:	44da      	add	sl, fp
 8001a2a:	9302      	str	r3, [sp, #8]
 8001a2c:	45d1      	cmp	r9, sl
 8001a2e:	d904      	bls.n	8001a3a <__aeabi_dmul+0x122>
 8001a30:	2780      	movs	r7, #128	; 0x80
 8001a32:	027f      	lsls	r7, r7, #9
 8001a34:	46b9      	mov	r9, r7
 8001a36:	444b      	add	r3, r9
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	4653      	mov	r3, sl
 8001a3c:	0c1b      	lsrs	r3, r3, #16
 8001a3e:	469b      	mov	fp, r3
 8001a40:	4653      	mov	r3, sl
 8001a42:	041f      	lsls	r7, r3, #16
 8001a44:	4643      	mov	r3, r8
 8001a46:	041b      	lsls	r3, r3, #16
 8001a48:	0c1b      	lsrs	r3, r3, #16
 8001a4a:	4698      	mov	r8, r3
 8001a4c:	003b      	movs	r3, r7
 8001a4e:	4443      	add	r3, r8
 8001a50:	9304      	str	r3, [sp, #16]
 8001a52:	0c33      	lsrs	r3, r6, #16
 8001a54:	0436      	lsls	r6, r6, #16
 8001a56:	0c36      	lsrs	r6, r6, #16
 8001a58:	4698      	mov	r8, r3
 8001a5a:	0033      	movs	r3, r6
 8001a5c:	4343      	muls	r3, r0
 8001a5e:	4699      	mov	r9, r3
 8001a60:	4643      	mov	r3, r8
 8001a62:	4343      	muls	r3, r0
 8001a64:	002f      	movs	r7, r5
 8001a66:	469a      	mov	sl, r3
 8001a68:	4643      	mov	r3, r8
 8001a6a:	4377      	muls	r7, r6
 8001a6c:	435d      	muls	r5, r3
 8001a6e:	0c38      	lsrs	r0, r7, #16
 8001a70:	444d      	add	r5, r9
 8001a72:	1945      	adds	r5, r0, r5
 8001a74:	45a9      	cmp	r9, r5
 8001a76:	d903      	bls.n	8001a80 <__aeabi_dmul+0x168>
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	025b      	lsls	r3, r3, #9
 8001a7c:	4699      	mov	r9, r3
 8001a7e:	44ca      	add	sl, r9
 8001a80:	043f      	lsls	r7, r7, #16
 8001a82:	0c28      	lsrs	r0, r5, #16
 8001a84:	0c3f      	lsrs	r7, r7, #16
 8001a86:	042d      	lsls	r5, r5, #16
 8001a88:	19ed      	adds	r5, r5, r7
 8001a8a:	0c27      	lsrs	r7, r4, #16
 8001a8c:	0424      	lsls	r4, r4, #16
 8001a8e:	0c24      	lsrs	r4, r4, #16
 8001a90:	0003      	movs	r3, r0
 8001a92:	0020      	movs	r0, r4
 8001a94:	4350      	muls	r0, r2
 8001a96:	437a      	muls	r2, r7
 8001a98:	4691      	mov	r9, r2
 8001a9a:	003a      	movs	r2, r7
 8001a9c:	4453      	add	r3, sl
 8001a9e:	9305      	str	r3, [sp, #20]
 8001aa0:	0c03      	lsrs	r3, r0, #16
 8001aa2:	469a      	mov	sl, r3
 8001aa4:	434a      	muls	r2, r1
 8001aa6:	4361      	muls	r1, r4
 8001aa8:	4449      	add	r1, r9
 8001aaa:	4451      	add	r1, sl
 8001aac:	44ab      	add	fp, r5
 8001aae:	4589      	cmp	r9, r1
 8001ab0:	d903      	bls.n	8001aba <__aeabi_dmul+0x1a2>
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	025b      	lsls	r3, r3, #9
 8001ab6:	4699      	mov	r9, r3
 8001ab8:	444a      	add	r2, r9
 8001aba:	0400      	lsls	r0, r0, #16
 8001abc:	0c0b      	lsrs	r3, r1, #16
 8001abe:	0c00      	lsrs	r0, r0, #16
 8001ac0:	0409      	lsls	r1, r1, #16
 8001ac2:	1809      	adds	r1, r1, r0
 8001ac4:	0020      	movs	r0, r4
 8001ac6:	4699      	mov	r9, r3
 8001ac8:	4643      	mov	r3, r8
 8001aca:	4370      	muls	r0, r6
 8001acc:	435c      	muls	r4, r3
 8001ace:	437e      	muls	r6, r7
 8001ad0:	435f      	muls	r7, r3
 8001ad2:	0c03      	lsrs	r3, r0, #16
 8001ad4:	4698      	mov	r8, r3
 8001ad6:	19a4      	adds	r4, r4, r6
 8001ad8:	4444      	add	r4, r8
 8001ada:	444a      	add	r2, r9
 8001adc:	9703      	str	r7, [sp, #12]
 8001ade:	42a6      	cmp	r6, r4
 8001ae0:	d904      	bls.n	8001aec <__aeabi_dmul+0x1d4>
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	025b      	lsls	r3, r3, #9
 8001ae6:	4698      	mov	r8, r3
 8001ae8:	4447      	add	r7, r8
 8001aea:	9703      	str	r7, [sp, #12]
 8001aec:	0423      	lsls	r3, r4, #16
 8001aee:	9e02      	ldr	r6, [sp, #8]
 8001af0:	469a      	mov	sl, r3
 8001af2:	9b05      	ldr	r3, [sp, #20]
 8001af4:	445e      	add	r6, fp
 8001af6:	4698      	mov	r8, r3
 8001af8:	42ae      	cmp	r6, r5
 8001afa:	41ad      	sbcs	r5, r5
 8001afc:	1876      	adds	r6, r6, r1
 8001afe:	428e      	cmp	r6, r1
 8001b00:	4189      	sbcs	r1, r1
 8001b02:	0400      	lsls	r0, r0, #16
 8001b04:	0c00      	lsrs	r0, r0, #16
 8001b06:	4450      	add	r0, sl
 8001b08:	4440      	add	r0, r8
 8001b0a:	426d      	negs	r5, r5
 8001b0c:	1947      	adds	r7, r0, r5
 8001b0e:	46b8      	mov	r8, r7
 8001b10:	4693      	mov	fp, r2
 8001b12:	4249      	negs	r1, r1
 8001b14:	4689      	mov	r9, r1
 8001b16:	44c3      	add	fp, r8
 8001b18:	44d9      	add	r9, fp
 8001b1a:	4298      	cmp	r0, r3
 8001b1c:	4180      	sbcs	r0, r0
 8001b1e:	45a8      	cmp	r8, r5
 8001b20:	41ad      	sbcs	r5, r5
 8001b22:	4593      	cmp	fp, r2
 8001b24:	4192      	sbcs	r2, r2
 8001b26:	4589      	cmp	r9, r1
 8001b28:	4189      	sbcs	r1, r1
 8001b2a:	426d      	negs	r5, r5
 8001b2c:	4240      	negs	r0, r0
 8001b2e:	4328      	orrs	r0, r5
 8001b30:	0c24      	lsrs	r4, r4, #16
 8001b32:	4252      	negs	r2, r2
 8001b34:	4249      	negs	r1, r1
 8001b36:	430a      	orrs	r2, r1
 8001b38:	9b03      	ldr	r3, [sp, #12]
 8001b3a:	1900      	adds	r0, r0, r4
 8001b3c:	1880      	adds	r0, r0, r2
 8001b3e:	18c7      	adds	r7, r0, r3
 8001b40:	464b      	mov	r3, r9
 8001b42:	0ddc      	lsrs	r4, r3, #23
 8001b44:	9b04      	ldr	r3, [sp, #16]
 8001b46:	0275      	lsls	r5, r6, #9
 8001b48:	431d      	orrs	r5, r3
 8001b4a:	1e6a      	subs	r2, r5, #1
 8001b4c:	4195      	sbcs	r5, r2
 8001b4e:	464b      	mov	r3, r9
 8001b50:	0df6      	lsrs	r6, r6, #23
 8001b52:	027f      	lsls	r7, r7, #9
 8001b54:	4335      	orrs	r5, r6
 8001b56:	025a      	lsls	r2, r3, #9
 8001b58:	433c      	orrs	r4, r7
 8001b5a:	4315      	orrs	r5, r2
 8001b5c:	01fb      	lsls	r3, r7, #7
 8001b5e:	d400      	bmi.n	8001b62 <__aeabi_dmul+0x24a>
 8001b60:	e11c      	b.n	8001d9c <__aeabi_dmul+0x484>
 8001b62:	2101      	movs	r1, #1
 8001b64:	086a      	lsrs	r2, r5, #1
 8001b66:	400d      	ands	r5, r1
 8001b68:	4315      	orrs	r5, r2
 8001b6a:	07e2      	lsls	r2, r4, #31
 8001b6c:	4315      	orrs	r5, r2
 8001b6e:	0864      	lsrs	r4, r4, #1
 8001b70:	494f      	ldr	r1, [pc, #316]	; (8001cb0 <__aeabi_dmul+0x398>)
 8001b72:	4461      	add	r1, ip
 8001b74:	2900      	cmp	r1, #0
 8001b76:	dc00      	bgt.n	8001b7a <__aeabi_dmul+0x262>
 8001b78:	e0b0      	b.n	8001cdc <__aeabi_dmul+0x3c4>
 8001b7a:	076b      	lsls	r3, r5, #29
 8001b7c:	d009      	beq.n	8001b92 <__aeabi_dmul+0x27a>
 8001b7e:	220f      	movs	r2, #15
 8001b80:	402a      	ands	r2, r5
 8001b82:	2a04      	cmp	r2, #4
 8001b84:	d005      	beq.n	8001b92 <__aeabi_dmul+0x27a>
 8001b86:	1d2a      	adds	r2, r5, #4
 8001b88:	42aa      	cmp	r2, r5
 8001b8a:	41ad      	sbcs	r5, r5
 8001b8c:	426d      	negs	r5, r5
 8001b8e:	1964      	adds	r4, r4, r5
 8001b90:	0015      	movs	r5, r2
 8001b92:	01e3      	lsls	r3, r4, #7
 8001b94:	d504      	bpl.n	8001ba0 <__aeabi_dmul+0x288>
 8001b96:	2180      	movs	r1, #128	; 0x80
 8001b98:	4a46      	ldr	r2, [pc, #280]	; (8001cb4 <__aeabi_dmul+0x39c>)
 8001b9a:	00c9      	lsls	r1, r1, #3
 8001b9c:	4014      	ands	r4, r2
 8001b9e:	4461      	add	r1, ip
 8001ba0:	4a45      	ldr	r2, [pc, #276]	; (8001cb8 <__aeabi_dmul+0x3a0>)
 8001ba2:	4291      	cmp	r1, r2
 8001ba4:	dd00      	ble.n	8001ba8 <__aeabi_dmul+0x290>
 8001ba6:	e726      	b.n	80019f6 <__aeabi_dmul+0xde>
 8001ba8:	0762      	lsls	r2, r4, #29
 8001baa:	08ed      	lsrs	r5, r5, #3
 8001bac:	0264      	lsls	r4, r4, #9
 8001bae:	0549      	lsls	r1, r1, #21
 8001bb0:	4315      	orrs	r5, r2
 8001bb2:	0b24      	lsrs	r4, r4, #12
 8001bb4:	0d4a      	lsrs	r2, r1, #21
 8001bb6:	e710      	b.n	80019da <__aeabi_dmul+0xc2>
 8001bb8:	4652      	mov	r2, sl
 8001bba:	4332      	orrs	r2, r6
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dmul+0x2a8>
 8001bbe:	e07f      	b.n	8001cc0 <__aeabi_dmul+0x3a8>
 8001bc0:	2e00      	cmp	r6, #0
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dmul+0x2ae>
 8001bc4:	e0dc      	b.n	8001d80 <__aeabi_dmul+0x468>
 8001bc6:	0030      	movs	r0, r6
 8001bc8:	f000 fe1e 	bl	8002808 <__clzsi2>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	3a0b      	subs	r2, #11
 8001bd0:	231d      	movs	r3, #29
 8001bd2:	0001      	movs	r1, r0
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	4652      	mov	r2, sl
 8001bd8:	3908      	subs	r1, #8
 8001bda:	40da      	lsrs	r2, r3
 8001bdc:	408e      	lsls	r6, r1
 8001bde:	4316      	orrs	r6, r2
 8001be0:	4652      	mov	r2, sl
 8001be2:	408a      	lsls	r2, r1
 8001be4:	9b00      	ldr	r3, [sp, #0]
 8001be6:	4935      	ldr	r1, [pc, #212]	; (8001cbc <__aeabi_dmul+0x3a4>)
 8001be8:	1a18      	subs	r0, r3, r0
 8001bea:	0003      	movs	r3, r0
 8001bec:	468c      	mov	ip, r1
 8001bee:	4463      	add	r3, ip
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	e6d3      	b.n	800199e <__aeabi_dmul+0x86>
 8001bf6:	0025      	movs	r5, r4
 8001bf8:	4305      	orrs	r5, r0
 8001bfa:	d04a      	beq.n	8001c92 <__aeabi_dmul+0x37a>
 8001bfc:	2c00      	cmp	r4, #0
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dmul+0x2ea>
 8001c00:	e0b0      	b.n	8001d64 <__aeabi_dmul+0x44c>
 8001c02:	0020      	movs	r0, r4
 8001c04:	f000 fe00 	bl	8002808 <__clzsi2>
 8001c08:	0001      	movs	r1, r0
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	390b      	subs	r1, #11
 8001c0e:	231d      	movs	r3, #29
 8001c10:	0010      	movs	r0, r2
 8001c12:	1a5b      	subs	r3, r3, r1
 8001c14:	0031      	movs	r1, r6
 8001c16:	0035      	movs	r5, r6
 8001c18:	3808      	subs	r0, #8
 8001c1a:	4084      	lsls	r4, r0
 8001c1c:	40d9      	lsrs	r1, r3
 8001c1e:	4085      	lsls	r5, r0
 8001c20:	430c      	orrs	r4, r1
 8001c22:	4826      	ldr	r0, [pc, #152]	; (8001cbc <__aeabi_dmul+0x3a4>)
 8001c24:	1a83      	subs	r3, r0, r2
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	4699      	mov	r9, r3
 8001c2c:	469b      	mov	fp, r3
 8001c2e:	e697      	b.n	8001960 <__aeabi_dmul+0x48>
 8001c30:	0005      	movs	r5, r0
 8001c32:	4325      	orrs	r5, r4
 8001c34:	d126      	bne.n	8001c84 <__aeabi_dmul+0x36c>
 8001c36:	2208      	movs	r2, #8
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	2400      	movs	r4, #0
 8001c3e:	4691      	mov	r9, r2
 8001c40:	469b      	mov	fp, r3
 8001c42:	e68d      	b.n	8001960 <__aeabi_dmul+0x48>
 8001c44:	4652      	mov	r2, sl
 8001c46:	9b00      	ldr	r3, [sp, #0]
 8001c48:	4332      	orrs	r2, r6
 8001c4a:	d110      	bne.n	8001c6e <__aeabi_dmul+0x356>
 8001c4c:	4915      	ldr	r1, [pc, #84]	; (8001ca4 <__aeabi_dmul+0x38c>)
 8001c4e:	2600      	movs	r6, #0
 8001c50:	468c      	mov	ip, r1
 8001c52:	4463      	add	r3, ip
 8001c54:	4649      	mov	r1, r9
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2302      	movs	r3, #2
 8001c5a:	4319      	orrs	r1, r3
 8001c5c:	4689      	mov	r9, r1
 8001c5e:	2002      	movs	r0, #2
 8001c60:	e69d      	b.n	800199e <__aeabi_dmul+0x86>
 8001c62:	465b      	mov	r3, fp
 8001c64:	9701      	str	r7, [sp, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d000      	beq.n	8001c6c <__aeabi_dmul+0x354>
 8001c6a:	e6ad      	b.n	80019c8 <__aeabi_dmul+0xb0>
 8001c6c:	e6c3      	b.n	80019f6 <__aeabi_dmul+0xde>
 8001c6e:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <__aeabi_dmul+0x38c>)
 8001c70:	2003      	movs	r0, #3
 8001c72:	4694      	mov	ip, r2
 8001c74:	4463      	add	r3, ip
 8001c76:	464a      	mov	r2, r9
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	4691      	mov	r9, r2
 8001c80:	4652      	mov	r2, sl
 8001c82:	e68c      	b.n	800199e <__aeabi_dmul+0x86>
 8001c84:	220c      	movs	r2, #12
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2303      	movs	r3, #3
 8001c8a:	0005      	movs	r5, r0
 8001c8c:	4691      	mov	r9, r2
 8001c8e:	469b      	mov	fp, r3
 8001c90:	e666      	b.n	8001960 <__aeabi_dmul+0x48>
 8001c92:	2304      	movs	r3, #4
 8001c94:	4699      	mov	r9, r3
 8001c96:	2300      	movs	r3, #0
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	2400      	movs	r4, #0
 8001c9e:	469b      	mov	fp, r3
 8001ca0:	e65e      	b.n	8001960 <__aeabi_dmul+0x48>
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	fffffc01 	.word	0xfffffc01
 8001cac:	080084a0 	.word	0x080084a0
 8001cb0:	000003ff 	.word	0x000003ff
 8001cb4:	feffffff 	.word	0xfeffffff
 8001cb8:	000007fe 	.word	0x000007fe
 8001cbc:	fffffc0d 	.word	0xfffffc0d
 8001cc0:	4649      	mov	r1, r9
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	4319      	orrs	r1, r3
 8001cc6:	4689      	mov	r9, r1
 8001cc8:	2600      	movs	r6, #0
 8001cca:	2001      	movs	r0, #1
 8001ccc:	e667      	b.n	800199e <__aeabi_dmul+0x86>
 8001cce:	2300      	movs	r3, #0
 8001cd0:	2480      	movs	r4, #128	; 0x80
 8001cd2:	2500      	movs	r5, #0
 8001cd4:	4a43      	ldr	r2, [pc, #268]	; (8001de4 <__aeabi_dmul+0x4cc>)
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	0324      	lsls	r4, r4, #12
 8001cda:	e67e      	b.n	80019da <__aeabi_dmul+0xc2>
 8001cdc:	2001      	movs	r0, #1
 8001cde:	1a40      	subs	r0, r0, r1
 8001ce0:	2838      	cmp	r0, #56	; 0x38
 8001ce2:	dd00      	ble.n	8001ce6 <__aeabi_dmul+0x3ce>
 8001ce4:	e676      	b.n	80019d4 <__aeabi_dmul+0xbc>
 8001ce6:	281f      	cmp	r0, #31
 8001ce8:	dd5b      	ble.n	8001da2 <__aeabi_dmul+0x48a>
 8001cea:	221f      	movs	r2, #31
 8001cec:	0023      	movs	r3, r4
 8001cee:	4252      	negs	r2, r2
 8001cf0:	1a51      	subs	r1, r2, r1
 8001cf2:	40cb      	lsrs	r3, r1
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	2820      	cmp	r0, #32
 8001cf8:	d003      	beq.n	8001d02 <__aeabi_dmul+0x3ea>
 8001cfa:	4a3b      	ldr	r2, [pc, #236]	; (8001de8 <__aeabi_dmul+0x4d0>)
 8001cfc:	4462      	add	r2, ip
 8001cfe:	4094      	lsls	r4, r2
 8001d00:	4325      	orrs	r5, r4
 8001d02:	1e6a      	subs	r2, r5, #1
 8001d04:	4195      	sbcs	r5, r2
 8001d06:	002a      	movs	r2, r5
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	2107      	movs	r1, #7
 8001d0c:	000d      	movs	r5, r1
 8001d0e:	2400      	movs	r4, #0
 8001d10:	4015      	ands	r5, r2
 8001d12:	4211      	tst	r1, r2
 8001d14:	d05b      	beq.n	8001dce <__aeabi_dmul+0x4b6>
 8001d16:	210f      	movs	r1, #15
 8001d18:	2400      	movs	r4, #0
 8001d1a:	4011      	ands	r1, r2
 8001d1c:	2904      	cmp	r1, #4
 8001d1e:	d053      	beq.n	8001dc8 <__aeabi_dmul+0x4b0>
 8001d20:	1d11      	adds	r1, r2, #4
 8001d22:	4291      	cmp	r1, r2
 8001d24:	4192      	sbcs	r2, r2
 8001d26:	4252      	negs	r2, r2
 8001d28:	18a4      	adds	r4, r4, r2
 8001d2a:	000a      	movs	r2, r1
 8001d2c:	0223      	lsls	r3, r4, #8
 8001d2e:	d54b      	bpl.n	8001dc8 <__aeabi_dmul+0x4b0>
 8001d30:	2201      	movs	r2, #1
 8001d32:	2400      	movs	r4, #0
 8001d34:	2500      	movs	r5, #0
 8001d36:	e650      	b.n	80019da <__aeabi_dmul+0xc2>
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	031b      	lsls	r3, r3, #12
 8001d3c:	421c      	tst	r4, r3
 8001d3e:	d009      	beq.n	8001d54 <__aeabi_dmul+0x43c>
 8001d40:	421e      	tst	r6, r3
 8001d42:	d107      	bne.n	8001d54 <__aeabi_dmul+0x43c>
 8001d44:	4333      	orrs	r3, r6
 8001d46:	031c      	lsls	r4, r3, #12
 8001d48:	4643      	mov	r3, r8
 8001d4a:	0015      	movs	r5, r2
 8001d4c:	0b24      	lsrs	r4, r4, #12
 8001d4e:	4a25      	ldr	r2, [pc, #148]	; (8001de4 <__aeabi_dmul+0x4cc>)
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	e642      	b.n	80019da <__aeabi_dmul+0xc2>
 8001d54:	2280      	movs	r2, #128	; 0x80
 8001d56:	0312      	lsls	r2, r2, #12
 8001d58:	4314      	orrs	r4, r2
 8001d5a:	0324      	lsls	r4, r4, #12
 8001d5c:	4a21      	ldr	r2, [pc, #132]	; (8001de4 <__aeabi_dmul+0x4cc>)
 8001d5e:	0b24      	lsrs	r4, r4, #12
 8001d60:	9701      	str	r7, [sp, #4]
 8001d62:	e63a      	b.n	80019da <__aeabi_dmul+0xc2>
 8001d64:	f000 fd50 	bl	8002808 <__clzsi2>
 8001d68:	0001      	movs	r1, r0
 8001d6a:	0002      	movs	r2, r0
 8001d6c:	3115      	adds	r1, #21
 8001d6e:	3220      	adds	r2, #32
 8001d70:	291c      	cmp	r1, #28
 8001d72:	dc00      	bgt.n	8001d76 <__aeabi_dmul+0x45e>
 8001d74:	e74b      	b.n	8001c0e <__aeabi_dmul+0x2f6>
 8001d76:	0034      	movs	r4, r6
 8001d78:	3808      	subs	r0, #8
 8001d7a:	2500      	movs	r5, #0
 8001d7c:	4084      	lsls	r4, r0
 8001d7e:	e750      	b.n	8001c22 <__aeabi_dmul+0x30a>
 8001d80:	f000 fd42 	bl	8002808 <__clzsi2>
 8001d84:	0003      	movs	r3, r0
 8001d86:	001a      	movs	r2, r3
 8001d88:	3215      	adds	r2, #21
 8001d8a:	3020      	adds	r0, #32
 8001d8c:	2a1c      	cmp	r2, #28
 8001d8e:	dc00      	bgt.n	8001d92 <__aeabi_dmul+0x47a>
 8001d90:	e71e      	b.n	8001bd0 <__aeabi_dmul+0x2b8>
 8001d92:	4656      	mov	r6, sl
 8001d94:	3b08      	subs	r3, #8
 8001d96:	2200      	movs	r2, #0
 8001d98:	409e      	lsls	r6, r3
 8001d9a:	e723      	b.n	8001be4 <__aeabi_dmul+0x2cc>
 8001d9c:	9b00      	ldr	r3, [sp, #0]
 8001d9e:	469c      	mov	ip, r3
 8001da0:	e6e6      	b.n	8001b70 <__aeabi_dmul+0x258>
 8001da2:	4912      	ldr	r1, [pc, #72]	; (8001dec <__aeabi_dmul+0x4d4>)
 8001da4:	0022      	movs	r2, r4
 8001da6:	4461      	add	r1, ip
 8001da8:	002e      	movs	r6, r5
 8001daa:	408d      	lsls	r5, r1
 8001dac:	408a      	lsls	r2, r1
 8001dae:	40c6      	lsrs	r6, r0
 8001db0:	1e69      	subs	r1, r5, #1
 8001db2:	418d      	sbcs	r5, r1
 8001db4:	4332      	orrs	r2, r6
 8001db6:	432a      	orrs	r2, r5
 8001db8:	40c4      	lsrs	r4, r0
 8001dba:	0753      	lsls	r3, r2, #29
 8001dbc:	d0b6      	beq.n	8001d2c <__aeabi_dmul+0x414>
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	4011      	ands	r1, r2
 8001dc2:	2904      	cmp	r1, #4
 8001dc4:	d1ac      	bne.n	8001d20 <__aeabi_dmul+0x408>
 8001dc6:	e7b1      	b.n	8001d2c <__aeabi_dmul+0x414>
 8001dc8:	0765      	lsls	r5, r4, #29
 8001dca:	0264      	lsls	r4, r4, #9
 8001dcc:	0b24      	lsrs	r4, r4, #12
 8001dce:	08d2      	lsrs	r2, r2, #3
 8001dd0:	4315      	orrs	r5, r2
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	e601      	b.n	80019da <__aeabi_dmul+0xc2>
 8001dd6:	2280      	movs	r2, #128	; 0x80
 8001dd8:	0312      	lsls	r2, r2, #12
 8001dda:	4314      	orrs	r4, r2
 8001ddc:	0324      	lsls	r4, r4, #12
 8001dde:	4a01      	ldr	r2, [pc, #4]	; (8001de4 <__aeabi_dmul+0x4cc>)
 8001de0:	0b24      	lsrs	r4, r4, #12
 8001de2:	e5fa      	b.n	80019da <__aeabi_dmul+0xc2>
 8001de4:	000007ff 	.word	0x000007ff
 8001de8:	0000043e 	.word	0x0000043e
 8001dec:	0000041e 	.word	0x0000041e

08001df0 <__aeabi_dsub>:
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	4657      	mov	r7, sl
 8001df4:	464e      	mov	r6, r9
 8001df6:	4645      	mov	r5, r8
 8001df8:	46de      	mov	lr, fp
 8001dfa:	b5e0      	push	{r5, r6, r7, lr}
 8001dfc:	001e      	movs	r6, r3
 8001dfe:	0017      	movs	r7, r2
 8001e00:	004a      	lsls	r2, r1, #1
 8001e02:	030b      	lsls	r3, r1, #12
 8001e04:	0d52      	lsrs	r2, r2, #21
 8001e06:	0a5b      	lsrs	r3, r3, #9
 8001e08:	4690      	mov	r8, r2
 8001e0a:	0f42      	lsrs	r2, r0, #29
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	0fcd      	lsrs	r5, r1, #31
 8001e10:	4ccd      	ldr	r4, [pc, #820]	; (8002148 <__aeabi_dsub+0x358>)
 8001e12:	0331      	lsls	r1, r6, #12
 8001e14:	00c3      	lsls	r3, r0, #3
 8001e16:	4694      	mov	ip, r2
 8001e18:	0070      	lsls	r0, r6, #1
 8001e1a:	0f7a      	lsrs	r2, r7, #29
 8001e1c:	0a49      	lsrs	r1, r1, #9
 8001e1e:	00ff      	lsls	r7, r7, #3
 8001e20:	469a      	mov	sl, r3
 8001e22:	46b9      	mov	r9, r7
 8001e24:	0d40      	lsrs	r0, r0, #21
 8001e26:	0ff6      	lsrs	r6, r6, #31
 8001e28:	4311      	orrs	r1, r2
 8001e2a:	42a0      	cmp	r0, r4
 8001e2c:	d100      	bne.n	8001e30 <__aeabi_dsub+0x40>
 8001e2e:	e0b1      	b.n	8001f94 <__aeabi_dsub+0x1a4>
 8001e30:	2201      	movs	r2, #1
 8001e32:	4056      	eors	r6, r2
 8001e34:	46b3      	mov	fp, r6
 8001e36:	42b5      	cmp	r5, r6
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x4c>
 8001e3a:	e088      	b.n	8001f4e <__aeabi_dsub+0x15e>
 8001e3c:	4642      	mov	r2, r8
 8001e3e:	1a12      	subs	r2, r2, r0
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	dc00      	bgt.n	8001e46 <__aeabi_dsub+0x56>
 8001e44:	e0ae      	b.n	8001fa4 <__aeabi_dsub+0x1b4>
 8001e46:	2800      	cmp	r0, #0
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x5c>
 8001e4a:	e0c1      	b.n	8001fd0 <__aeabi_dsub+0x1e0>
 8001e4c:	48be      	ldr	r0, [pc, #760]	; (8002148 <__aeabi_dsub+0x358>)
 8001e4e:	4580      	cmp	r8, r0
 8001e50:	d100      	bne.n	8001e54 <__aeabi_dsub+0x64>
 8001e52:	e151      	b.n	80020f8 <__aeabi_dsub+0x308>
 8001e54:	2080      	movs	r0, #128	; 0x80
 8001e56:	0400      	lsls	r0, r0, #16
 8001e58:	4301      	orrs	r1, r0
 8001e5a:	2a38      	cmp	r2, #56	; 0x38
 8001e5c:	dd00      	ble.n	8001e60 <__aeabi_dsub+0x70>
 8001e5e:	e17b      	b.n	8002158 <__aeabi_dsub+0x368>
 8001e60:	2a1f      	cmp	r2, #31
 8001e62:	dd00      	ble.n	8001e66 <__aeabi_dsub+0x76>
 8001e64:	e1ee      	b.n	8002244 <__aeabi_dsub+0x454>
 8001e66:	2020      	movs	r0, #32
 8001e68:	003e      	movs	r6, r7
 8001e6a:	1a80      	subs	r0, r0, r2
 8001e6c:	000c      	movs	r4, r1
 8001e6e:	40d6      	lsrs	r6, r2
 8001e70:	40d1      	lsrs	r1, r2
 8001e72:	4087      	lsls	r7, r0
 8001e74:	4662      	mov	r2, ip
 8001e76:	4084      	lsls	r4, r0
 8001e78:	1a52      	subs	r2, r2, r1
 8001e7a:	1e78      	subs	r0, r7, #1
 8001e7c:	4187      	sbcs	r7, r0
 8001e7e:	4694      	mov	ip, r2
 8001e80:	4334      	orrs	r4, r6
 8001e82:	4327      	orrs	r7, r4
 8001e84:	1bdc      	subs	r4, r3, r7
 8001e86:	42a3      	cmp	r3, r4
 8001e88:	419b      	sbcs	r3, r3
 8001e8a:	4662      	mov	r2, ip
 8001e8c:	425b      	negs	r3, r3
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	4699      	mov	r9, r3
 8001e92:	464b      	mov	r3, r9
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	d400      	bmi.n	8001e9a <__aeabi_dsub+0xaa>
 8001e98:	e118      	b.n	80020cc <__aeabi_dsub+0x2dc>
 8001e9a:	464b      	mov	r3, r9
 8001e9c:	0258      	lsls	r0, r3, #9
 8001e9e:	0a43      	lsrs	r3, r0, #9
 8001ea0:	4699      	mov	r9, r3
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d100      	bne.n	8001eaa <__aeabi_dsub+0xba>
 8001ea8:	e137      	b.n	800211a <__aeabi_dsub+0x32a>
 8001eaa:	4648      	mov	r0, r9
 8001eac:	f000 fcac 	bl	8002808 <__clzsi2>
 8001eb0:	0001      	movs	r1, r0
 8001eb2:	3908      	subs	r1, #8
 8001eb4:	2320      	movs	r3, #32
 8001eb6:	0022      	movs	r2, r4
 8001eb8:	4648      	mov	r0, r9
 8001eba:	1a5b      	subs	r3, r3, r1
 8001ebc:	40da      	lsrs	r2, r3
 8001ebe:	4088      	lsls	r0, r1
 8001ec0:	408c      	lsls	r4, r1
 8001ec2:	4643      	mov	r3, r8
 8001ec4:	4310      	orrs	r0, r2
 8001ec6:	4588      	cmp	r8, r1
 8001ec8:	dd00      	ble.n	8001ecc <__aeabi_dsub+0xdc>
 8001eca:	e136      	b.n	800213a <__aeabi_dsub+0x34a>
 8001ecc:	1ac9      	subs	r1, r1, r3
 8001ece:	1c4b      	adds	r3, r1, #1
 8001ed0:	2b1f      	cmp	r3, #31
 8001ed2:	dd00      	ble.n	8001ed6 <__aeabi_dsub+0xe6>
 8001ed4:	e0ea      	b.n	80020ac <__aeabi_dsub+0x2bc>
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	0026      	movs	r6, r4
 8001eda:	1ad2      	subs	r2, r2, r3
 8001edc:	0001      	movs	r1, r0
 8001ede:	4094      	lsls	r4, r2
 8001ee0:	40de      	lsrs	r6, r3
 8001ee2:	40d8      	lsrs	r0, r3
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	4091      	lsls	r1, r2
 8001ee8:	1e62      	subs	r2, r4, #1
 8001eea:	4194      	sbcs	r4, r2
 8001eec:	4681      	mov	r9, r0
 8001eee:	4698      	mov	r8, r3
 8001ef0:	4331      	orrs	r1, r6
 8001ef2:	430c      	orrs	r4, r1
 8001ef4:	0763      	lsls	r3, r4, #29
 8001ef6:	d009      	beq.n	8001f0c <__aeabi_dsub+0x11c>
 8001ef8:	230f      	movs	r3, #15
 8001efa:	4023      	ands	r3, r4
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d005      	beq.n	8001f0c <__aeabi_dsub+0x11c>
 8001f00:	1d23      	adds	r3, r4, #4
 8001f02:	42a3      	cmp	r3, r4
 8001f04:	41a4      	sbcs	r4, r4
 8001f06:	4264      	negs	r4, r4
 8001f08:	44a1      	add	r9, r4
 8001f0a:	001c      	movs	r4, r3
 8001f0c:	464b      	mov	r3, r9
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	d400      	bmi.n	8001f14 <__aeabi_dsub+0x124>
 8001f12:	e0de      	b.n	80020d2 <__aeabi_dsub+0x2e2>
 8001f14:	4641      	mov	r1, r8
 8001f16:	4b8c      	ldr	r3, [pc, #560]	; (8002148 <__aeabi_dsub+0x358>)
 8001f18:	3101      	adds	r1, #1
 8001f1a:	4299      	cmp	r1, r3
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x130>
 8001f1e:	e0e7      	b.n	80020f0 <__aeabi_dsub+0x300>
 8001f20:	464b      	mov	r3, r9
 8001f22:	488a      	ldr	r0, [pc, #552]	; (800214c <__aeabi_dsub+0x35c>)
 8001f24:	08e4      	lsrs	r4, r4, #3
 8001f26:	4003      	ands	r3, r0
 8001f28:	0018      	movs	r0, r3
 8001f2a:	0549      	lsls	r1, r1, #21
 8001f2c:	075b      	lsls	r3, r3, #29
 8001f2e:	0240      	lsls	r0, r0, #9
 8001f30:	4323      	orrs	r3, r4
 8001f32:	0d4a      	lsrs	r2, r1, #21
 8001f34:	0b04      	lsrs	r4, r0, #12
 8001f36:	0512      	lsls	r2, r2, #20
 8001f38:	07ed      	lsls	r5, r5, #31
 8001f3a:	4322      	orrs	r2, r4
 8001f3c:	432a      	orrs	r2, r5
 8001f3e:	0018      	movs	r0, r3
 8001f40:	0011      	movs	r1, r2
 8001f42:	bcf0      	pop	{r4, r5, r6, r7}
 8001f44:	46bb      	mov	fp, r7
 8001f46:	46b2      	mov	sl, r6
 8001f48:	46a9      	mov	r9, r5
 8001f4a:	46a0      	mov	r8, r4
 8001f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f4e:	4642      	mov	r2, r8
 8001f50:	1a12      	subs	r2, r2, r0
 8001f52:	2a00      	cmp	r2, #0
 8001f54:	dd52      	ble.n	8001ffc <__aeabi_dsub+0x20c>
 8001f56:	2800      	cmp	r0, #0
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x16c>
 8001f5a:	e09c      	b.n	8002096 <__aeabi_dsub+0x2a6>
 8001f5c:	45a0      	cmp	r8, r4
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x172>
 8001f60:	e0ca      	b.n	80020f8 <__aeabi_dsub+0x308>
 8001f62:	2080      	movs	r0, #128	; 0x80
 8001f64:	0400      	lsls	r0, r0, #16
 8001f66:	4301      	orrs	r1, r0
 8001f68:	2a38      	cmp	r2, #56	; 0x38
 8001f6a:	dd00      	ble.n	8001f6e <__aeabi_dsub+0x17e>
 8001f6c:	e149      	b.n	8002202 <__aeabi_dsub+0x412>
 8001f6e:	2a1f      	cmp	r2, #31
 8001f70:	dc00      	bgt.n	8001f74 <__aeabi_dsub+0x184>
 8001f72:	e197      	b.n	80022a4 <__aeabi_dsub+0x4b4>
 8001f74:	0010      	movs	r0, r2
 8001f76:	000e      	movs	r6, r1
 8001f78:	3820      	subs	r0, #32
 8001f7a:	40c6      	lsrs	r6, r0
 8001f7c:	2a20      	cmp	r2, #32
 8001f7e:	d004      	beq.n	8001f8a <__aeabi_dsub+0x19a>
 8001f80:	2040      	movs	r0, #64	; 0x40
 8001f82:	1a82      	subs	r2, r0, r2
 8001f84:	4091      	lsls	r1, r2
 8001f86:	430f      	orrs	r7, r1
 8001f88:	46b9      	mov	r9, r7
 8001f8a:	464c      	mov	r4, r9
 8001f8c:	1e62      	subs	r2, r4, #1
 8001f8e:	4194      	sbcs	r4, r2
 8001f90:	4334      	orrs	r4, r6
 8001f92:	e13a      	b.n	800220a <__aeabi_dsub+0x41a>
 8001f94:	000a      	movs	r2, r1
 8001f96:	433a      	orrs	r2, r7
 8001f98:	d028      	beq.n	8001fec <__aeabi_dsub+0x1fc>
 8001f9a:	46b3      	mov	fp, r6
 8001f9c:	42b5      	cmp	r5, r6
 8001f9e:	d02b      	beq.n	8001ff8 <__aeabi_dsub+0x208>
 8001fa0:	4a6b      	ldr	r2, [pc, #428]	; (8002150 <__aeabi_dsub+0x360>)
 8001fa2:	4442      	add	r2, r8
 8001fa4:	2a00      	cmp	r2, #0
 8001fa6:	d05d      	beq.n	8002064 <__aeabi_dsub+0x274>
 8001fa8:	4642      	mov	r2, r8
 8001faa:	4644      	mov	r4, r8
 8001fac:	1a82      	subs	r2, r0, r2
 8001fae:	2c00      	cmp	r4, #0
 8001fb0:	d000      	beq.n	8001fb4 <__aeabi_dsub+0x1c4>
 8001fb2:	e0f5      	b.n	80021a0 <__aeabi_dsub+0x3b0>
 8001fb4:	4665      	mov	r5, ip
 8001fb6:	431d      	orrs	r5, r3
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dsub+0x1cc>
 8001fba:	e19c      	b.n	80022f6 <__aeabi_dsub+0x506>
 8001fbc:	1e55      	subs	r5, r2, #1
 8001fbe:	2a01      	cmp	r2, #1
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x1d4>
 8001fc2:	e1fb      	b.n	80023bc <__aeabi_dsub+0x5cc>
 8001fc4:	4c60      	ldr	r4, [pc, #384]	; (8002148 <__aeabi_dsub+0x358>)
 8001fc6:	42a2      	cmp	r2, r4
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x1dc>
 8001fca:	e1bd      	b.n	8002348 <__aeabi_dsub+0x558>
 8001fcc:	002a      	movs	r2, r5
 8001fce:	e0f0      	b.n	80021b2 <__aeabi_dsub+0x3c2>
 8001fd0:	0008      	movs	r0, r1
 8001fd2:	4338      	orrs	r0, r7
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x1e8>
 8001fd6:	e0c3      	b.n	8002160 <__aeabi_dsub+0x370>
 8001fd8:	1e50      	subs	r0, r2, #1
 8001fda:	2a01      	cmp	r2, #1
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dsub+0x1f0>
 8001fde:	e1a8      	b.n	8002332 <__aeabi_dsub+0x542>
 8001fe0:	4c59      	ldr	r4, [pc, #356]	; (8002148 <__aeabi_dsub+0x358>)
 8001fe2:	42a2      	cmp	r2, r4
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x1f8>
 8001fe6:	e087      	b.n	80020f8 <__aeabi_dsub+0x308>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	e736      	b.n	8001e5a <__aeabi_dsub+0x6a>
 8001fec:	2201      	movs	r2, #1
 8001fee:	4056      	eors	r6, r2
 8001ff0:	46b3      	mov	fp, r6
 8001ff2:	42b5      	cmp	r5, r6
 8001ff4:	d000      	beq.n	8001ff8 <__aeabi_dsub+0x208>
 8001ff6:	e721      	b.n	8001e3c <__aeabi_dsub+0x4c>
 8001ff8:	4a55      	ldr	r2, [pc, #340]	; (8002150 <__aeabi_dsub+0x360>)
 8001ffa:	4442      	add	r2, r8
 8001ffc:	2a00      	cmp	r2, #0
 8001ffe:	d100      	bne.n	8002002 <__aeabi_dsub+0x212>
 8002000:	e0b5      	b.n	800216e <__aeabi_dsub+0x37e>
 8002002:	4642      	mov	r2, r8
 8002004:	4644      	mov	r4, r8
 8002006:	1a82      	subs	r2, r0, r2
 8002008:	2c00      	cmp	r4, #0
 800200a:	d100      	bne.n	800200e <__aeabi_dsub+0x21e>
 800200c:	e138      	b.n	8002280 <__aeabi_dsub+0x490>
 800200e:	4e4e      	ldr	r6, [pc, #312]	; (8002148 <__aeabi_dsub+0x358>)
 8002010:	42b0      	cmp	r0, r6
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x226>
 8002014:	e1de      	b.n	80023d4 <__aeabi_dsub+0x5e4>
 8002016:	2680      	movs	r6, #128	; 0x80
 8002018:	4664      	mov	r4, ip
 800201a:	0436      	lsls	r6, r6, #16
 800201c:	4334      	orrs	r4, r6
 800201e:	46a4      	mov	ip, r4
 8002020:	2a38      	cmp	r2, #56	; 0x38
 8002022:	dd00      	ble.n	8002026 <__aeabi_dsub+0x236>
 8002024:	e196      	b.n	8002354 <__aeabi_dsub+0x564>
 8002026:	2a1f      	cmp	r2, #31
 8002028:	dd00      	ble.n	800202c <__aeabi_dsub+0x23c>
 800202a:	e224      	b.n	8002476 <__aeabi_dsub+0x686>
 800202c:	2620      	movs	r6, #32
 800202e:	1ab4      	subs	r4, r6, r2
 8002030:	46a2      	mov	sl, r4
 8002032:	4664      	mov	r4, ip
 8002034:	4656      	mov	r6, sl
 8002036:	40b4      	lsls	r4, r6
 8002038:	46a1      	mov	r9, r4
 800203a:	001c      	movs	r4, r3
 800203c:	464e      	mov	r6, r9
 800203e:	40d4      	lsrs	r4, r2
 8002040:	4326      	orrs	r6, r4
 8002042:	0034      	movs	r4, r6
 8002044:	4656      	mov	r6, sl
 8002046:	40b3      	lsls	r3, r6
 8002048:	1e5e      	subs	r6, r3, #1
 800204a:	41b3      	sbcs	r3, r6
 800204c:	431c      	orrs	r4, r3
 800204e:	4663      	mov	r3, ip
 8002050:	40d3      	lsrs	r3, r2
 8002052:	18c9      	adds	r1, r1, r3
 8002054:	19e4      	adds	r4, r4, r7
 8002056:	42bc      	cmp	r4, r7
 8002058:	41bf      	sbcs	r7, r7
 800205a:	427f      	negs	r7, r7
 800205c:	46b9      	mov	r9, r7
 800205e:	4680      	mov	r8, r0
 8002060:	4489      	add	r9, r1
 8002062:	e0d8      	b.n	8002216 <__aeabi_dsub+0x426>
 8002064:	4640      	mov	r0, r8
 8002066:	4c3b      	ldr	r4, [pc, #236]	; (8002154 <__aeabi_dsub+0x364>)
 8002068:	3001      	adds	r0, #1
 800206a:	4220      	tst	r0, r4
 800206c:	d000      	beq.n	8002070 <__aeabi_dsub+0x280>
 800206e:	e0b4      	b.n	80021da <__aeabi_dsub+0x3ea>
 8002070:	4640      	mov	r0, r8
 8002072:	2800      	cmp	r0, #0
 8002074:	d000      	beq.n	8002078 <__aeabi_dsub+0x288>
 8002076:	e144      	b.n	8002302 <__aeabi_dsub+0x512>
 8002078:	4660      	mov	r0, ip
 800207a:	4318      	orrs	r0, r3
 800207c:	d100      	bne.n	8002080 <__aeabi_dsub+0x290>
 800207e:	e190      	b.n	80023a2 <__aeabi_dsub+0x5b2>
 8002080:	0008      	movs	r0, r1
 8002082:	4338      	orrs	r0, r7
 8002084:	d000      	beq.n	8002088 <__aeabi_dsub+0x298>
 8002086:	e1aa      	b.n	80023de <__aeabi_dsub+0x5ee>
 8002088:	4661      	mov	r1, ip
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	0749      	lsls	r1, r1, #29
 800208e:	430b      	orrs	r3, r1
 8002090:	4661      	mov	r1, ip
 8002092:	08cc      	lsrs	r4, r1, #3
 8002094:	e027      	b.n	80020e6 <__aeabi_dsub+0x2f6>
 8002096:	0008      	movs	r0, r1
 8002098:	4338      	orrs	r0, r7
 800209a:	d061      	beq.n	8002160 <__aeabi_dsub+0x370>
 800209c:	1e50      	subs	r0, r2, #1
 800209e:	2a01      	cmp	r2, #1
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x2b4>
 80020a2:	e139      	b.n	8002318 <__aeabi_dsub+0x528>
 80020a4:	42a2      	cmp	r2, r4
 80020a6:	d027      	beq.n	80020f8 <__aeabi_dsub+0x308>
 80020a8:	0002      	movs	r2, r0
 80020aa:	e75d      	b.n	8001f68 <__aeabi_dsub+0x178>
 80020ac:	0002      	movs	r2, r0
 80020ae:	391f      	subs	r1, #31
 80020b0:	40ca      	lsrs	r2, r1
 80020b2:	0011      	movs	r1, r2
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d003      	beq.n	80020c0 <__aeabi_dsub+0x2d0>
 80020b8:	2240      	movs	r2, #64	; 0x40
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	4098      	lsls	r0, r3
 80020be:	4304      	orrs	r4, r0
 80020c0:	1e63      	subs	r3, r4, #1
 80020c2:	419c      	sbcs	r4, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	4699      	mov	r9, r3
 80020c8:	4698      	mov	r8, r3
 80020ca:	430c      	orrs	r4, r1
 80020cc:	0763      	lsls	r3, r4, #29
 80020ce:	d000      	beq.n	80020d2 <__aeabi_dsub+0x2e2>
 80020d0:	e712      	b.n	8001ef8 <__aeabi_dsub+0x108>
 80020d2:	464b      	mov	r3, r9
 80020d4:	464a      	mov	r2, r9
 80020d6:	08e4      	lsrs	r4, r4, #3
 80020d8:	075b      	lsls	r3, r3, #29
 80020da:	4323      	orrs	r3, r4
 80020dc:	08d4      	lsrs	r4, r2, #3
 80020de:	4642      	mov	r2, r8
 80020e0:	4919      	ldr	r1, [pc, #100]	; (8002148 <__aeabi_dsub+0x358>)
 80020e2:	428a      	cmp	r2, r1
 80020e4:	d00e      	beq.n	8002104 <__aeabi_dsub+0x314>
 80020e6:	0324      	lsls	r4, r4, #12
 80020e8:	0552      	lsls	r2, r2, #21
 80020ea:	0b24      	lsrs	r4, r4, #12
 80020ec:	0d52      	lsrs	r2, r2, #21
 80020ee:	e722      	b.n	8001f36 <__aeabi_dsub+0x146>
 80020f0:	000a      	movs	r2, r1
 80020f2:	2400      	movs	r4, #0
 80020f4:	2300      	movs	r3, #0
 80020f6:	e71e      	b.n	8001f36 <__aeabi_dsub+0x146>
 80020f8:	08db      	lsrs	r3, r3, #3
 80020fa:	4662      	mov	r2, ip
 80020fc:	0752      	lsls	r2, r2, #29
 80020fe:	4313      	orrs	r3, r2
 8002100:	4662      	mov	r2, ip
 8002102:	08d4      	lsrs	r4, r2, #3
 8002104:	001a      	movs	r2, r3
 8002106:	4322      	orrs	r2, r4
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x31c>
 800210a:	e1fc      	b.n	8002506 <__aeabi_dsub+0x716>
 800210c:	2280      	movs	r2, #128	; 0x80
 800210e:	0312      	lsls	r2, r2, #12
 8002110:	4314      	orrs	r4, r2
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <__aeabi_dsub+0x358>)
 8002116:	0b24      	lsrs	r4, r4, #12
 8002118:	e70d      	b.n	8001f36 <__aeabi_dsub+0x146>
 800211a:	0020      	movs	r0, r4
 800211c:	f000 fb74 	bl	8002808 <__clzsi2>
 8002120:	0001      	movs	r1, r0
 8002122:	3118      	adds	r1, #24
 8002124:	291f      	cmp	r1, #31
 8002126:	dc00      	bgt.n	800212a <__aeabi_dsub+0x33a>
 8002128:	e6c4      	b.n	8001eb4 <__aeabi_dsub+0xc4>
 800212a:	3808      	subs	r0, #8
 800212c:	4084      	lsls	r4, r0
 800212e:	4643      	mov	r3, r8
 8002130:	0020      	movs	r0, r4
 8002132:	2400      	movs	r4, #0
 8002134:	4588      	cmp	r8, r1
 8002136:	dc00      	bgt.n	800213a <__aeabi_dsub+0x34a>
 8002138:	e6c8      	b.n	8001ecc <__aeabi_dsub+0xdc>
 800213a:	4a04      	ldr	r2, [pc, #16]	; (800214c <__aeabi_dsub+0x35c>)
 800213c:	1a5b      	subs	r3, r3, r1
 800213e:	4010      	ands	r0, r2
 8002140:	4698      	mov	r8, r3
 8002142:	4681      	mov	r9, r0
 8002144:	e6d6      	b.n	8001ef4 <__aeabi_dsub+0x104>
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	000007ff 	.word	0x000007ff
 800214c:	ff7fffff 	.word	0xff7fffff
 8002150:	fffff801 	.word	0xfffff801
 8002154:	000007fe 	.word	0x000007fe
 8002158:	430f      	orrs	r7, r1
 800215a:	1e7a      	subs	r2, r7, #1
 800215c:	4197      	sbcs	r7, r2
 800215e:	e691      	b.n	8001e84 <__aeabi_dsub+0x94>
 8002160:	4661      	mov	r1, ip
 8002162:	08db      	lsrs	r3, r3, #3
 8002164:	0749      	lsls	r1, r1, #29
 8002166:	430b      	orrs	r3, r1
 8002168:	4661      	mov	r1, ip
 800216a:	08cc      	lsrs	r4, r1, #3
 800216c:	e7b8      	b.n	80020e0 <__aeabi_dsub+0x2f0>
 800216e:	4640      	mov	r0, r8
 8002170:	4cd3      	ldr	r4, [pc, #844]	; (80024c0 <__aeabi_dsub+0x6d0>)
 8002172:	3001      	adds	r0, #1
 8002174:	4220      	tst	r0, r4
 8002176:	d000      	beq.n	800217a <__aeabi_dsub+0x38a>
 8002178:	e0a2      	b.n	80022c0 <__aeabi_dsub+0x4d0>
 800217a:	4640      	mov	r0, r8
 800217c:	2800      	cmp	r0, #0
 800217e:	d000      	beq.n	8002182 <__aeabi_dsub+0x392>
 8002180:	e101      	b.n	8002386 <__aeabi_dsub+0x596>
 8002182:	4660      	mov	r0, ip
 8002184:	4318      	orrs	r0, r3
 8002186:	d100      	bne.n	800218a <__aeabi_dsub+0x39a>
 8002188:	e15e      	b.n	8002448 <__aeabi_dsub+0x658>
 800218a:	0008      	movs	r0, r1
 800218c:	4338      	orrs	r0, r7
 800218e:	d000      	beq.n	8002192 <__aeabi_dsub+0x3a2>
 8002190:	e15f      	b.n	8002452 <__aeabi_dsub+0x662>
 8002192:	4661      	mov	r1, ip
 8002194:	08db      	lsrs	r3, r3, #3
 8002196:	0749      	lsls	r1, r1, #29
 8002198:	430b      	orrs	r3, r1
 800219a:	4661      	mov	r1, ip
 800219c:	08cc      	lsrs	r4, r1, #3
 800219e:	e7a2      	b.n	80020e6 <__aeabi_dsub+0x2f6>
 80021a0:	4dc8      	ldr	r5, [pc, #800]	; (80024c4 <__aeabi_dsub+0x6d4>)
 80021a2:	42a8      	cmp	r0, r5
 80021a4:	d100      	bne.n	80021a8 <__aeabi_dsub+0x3b8>
 80021a6:	e0cf      	b.n	8002348 <__aeabi_dsub+0x558>
 80021a8:	2580      	movs	r5, #128	; 0x80
 80021aa:	4664      	mov	r4, ip
 80021ac:	042d      	lsls	r5, r5, #16
 80021ae:	432c      	orrs	r4, r5
 80021b0:	46a4      	mov	ip, r4
 80021b2:	2a38      	cmp	r2, #56	; 0x38
 80021b4:	dc56      	bgt.n	8002264 <__aeabi_dsub+0x474>
 80021b6:	2a1f      	cmp	r2, #31
 80021b8:	dd00      	ble.n	80021bc <__aeabi_dsub+0x3cc>
 80021ba:	e0d1      	b.n	8002360 <__aeabi_dsub+0x570>
 80021bc:	2520      	movs	r5, #32
 80021be:	001e      	movs	r6, r3
 80021c0:	1aad      	subs	r5, r5, r2
 80021c2:	4664      	mov	r4, ip
 80021c4:	40ab      	lsls	r3, r5
 80021c6:	40ac      	lsls	r4, r5
 80021c8:	40d6      	lsrs	r6, r2
 80021ca:	1e5d      	subs	r5, r3, #1
 80021cc:	41ab      	sbcs	r3, r5
 80021ce:	4334      	orrs	r4, r6
 80021d0:	4323      	orrs	r3, r4
 80021d2:	4664      	mov	r4, ip
 80021d4:	40d4      	lsrs	r4, r2
 80021d6:	1b09      	subs	r1, r1, r4
 80021d8:	e049      	b.n	800226e <__aeabi_dsub+0x47e>
 80021da:	4660      	mov	r0, ip
 80021dc:	1bdc      	subs	r4, r3, r7
 80021de:	1a46      	subs	r6, r0, r1
 80021e0:	42a3      	cmp	r3, r4
 80021e2:	4180      	sbcs	r0, r0
 80021e4:	4240      	negs	r0, r0
 80021e6:	4681      	mov	r9, r0
 80021e8:	0030      	movs	r0, r6
 80021ea:	464e      	mov	r6, r9
 80021ec:	1b80      	subs	r0, r0, r6
 80021ee:	4681      	mov	r9, r0
 80021f0:	0200      	lsls	r0, r0, #8
 80021f2:	d476      	bmi.n	80022e2 <__aeabi_dsub+0x4f2>
 80021f4:	464b      	mov	r3, r9
 80021f6:	4323      	orrs	r3, r4
 80021f8:	d000      	beq.n	80021fc <__aeabi_dsub+0x40c>
 80021fa:	e652      	b.n	8001ea2 <__aeabi_dsub+0xb2>
 80021fc:	2400      	movs	r4, #0
 80021fe:	2500      	movs	r5, #0
 8002200:	e771      	b.n	80020e6 <__aeabi_dsub+0x2f6>
 8002202:	4339      	orrs	r1, r7
 8002204:	000c      	movs	r4, r1
 8002206:	1e62      	subs	r2, r4, #1
 8002208:	4194      	sbcs	r4, r2
 800220a:	18e4      	adds	r4, r4, r3
 800220c:	429c      	cmp	r4, r3
 800220e:	419b      	sbcs	r3, r3
 8002210:	425b      	negs	r3, r3
 8002212:	4463      	add	r3, ip
 8002214:	4699      	mov	r9, r3
 8002216:	464b      	mov	r3, r9
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	d400      	bmi.n	800221e <__aeabi_dsub+0x42e>
 800221c:	e756      	b.n	80020cc <__aeabi_dsub+0x2dc>
 800221e:	2301      	movs	r3, #1
 8002220:	469c      	mov	ip, r3
 8002222:	4ba8      	ldr	r3, [pc, #672]	; (80024c4 <__aeabi_dsub+0x6d4>)
 8002224:	44e0      	add	r8, ip
 8002226:	4598      	cmp	r8, r3
 8002228:	d038      	beq.n	800229c <__aeabi_dsub+0x4ac>
 800222a:	464b      	mov	r3, r9
 800222c:	48a6      	ldr	r0, [pc, #664]	; (80024c8 <__aeabi_dsub+0x6d8>)
 800222e:	2201      	movs	r2, #1
 8002230:	4003      	ands	r3, r0
 8002232:	0018      	movs	r0, r3
 8002234:	0863      	lsrs	r3, r4, #1
 8002236:	4014      	ands	r4, r2
 8002238:	431c      	orrs	r4, r3
 800223a:	07c3      	lsls	r3, r0, #31
 800223c:	431c      	orrs	r4, r3
 800223e:	0843      	lsrs	r3, r0, #1
 8002240:	4699      	mov	r9, r3
 8002242:	e657      	b.n	8001ef4 <__aeabi_dsub+0x104>
 8002244:	0010      	movs	r0, r2
 8002246:	000e      	movs	r6, r1
 8002248:	3820      	subs	r0, #32
 800224a:	40c6      	lsrs	r6, r0
 800224c:	2a20      	cmp	r2, #32
 800224e:	d004      	beq.n	800225a <__aeabi_dsub+0x46a>
 8002250:	2040      	movs	r0, #64	; 0x40
 8002252:	1a82      	subs	r2, r0, r2
 8002254:	4091      	lsls	r1, r2
 8002256:	430f      	orrs	r7, r1
 8002258:	46b9      	mov	r9, r7
 800225a:	464f      	mov	r7, r9
 800225c:	1e7a      	subs	r2, r7, #1
 800225e:	4197      	sbcs	r7, r2
 8002260:	4337      	orrs	r7, r6
 8002262:	e60f      	b.n	8001e84 <__aeabi_dsub+0x94>
 8002264:	4662      	mov	r2, ip
 8002266:	431a      	orrs	r2, r3
 8002268:	0013      	movs	r3, r2
 800226a:	1e5a      	subs	r2, r3, #1
 800226c:	4193      	sbcs	r3, r2
 800226e:	1afc      	subs	r4, r7, r3
 8002270:	42a7      	cmp	r7, r4
 8002272:	41bf      	sbcs	r7, r7
 8002274:	427f      	negs	r7, r7
 8002276:	1bcb      	subs	r3, r1, r7
 8002278:	4699      	mov	r9, r3
 800227a:	465d      	mov	r5, fp
 800227c:	4680      	mov	r8, r0
 800227e:	e608      	b.n	8001e92 <__aeabi_dsub+0xa2>
 8002280:	4666      	mov	r6, ip
 8002282:	431e      	orrs	r6, r3
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x498>
 8002286:	e0be      	b.n	8002406 <__aeabi_dsub+0x616>
 8002288:	1e56      	subs	r6, r2, #1
 800228a:	2a01      	cmp	r2, #1
 800228c:	d100      	bne.n	8002290 <__aeabi_dsub+0x4a0>
 800228e:	e109      	b.n	80024a4 <__aeabi_dsub+0x6b4>
 8002290:	4c8c      	ldr	r4, [pc, #560]	; (80024c4 <__aeabi_dsub+0x6d4>)
 8002292:	42a2      	cmp	r2, r4
 8002294:	d100      	bne.n	8002298 <__aeabi_dsub+0x4a8>
 8002296:	e119      	b.n	80024cc <__aeabi_dsub+0x6dc>
 8002298:	0032      	movs	r2, r6
 800229a:	e6c1      	b.n	8002020 <__aeabi_dsub+0x230>
 800229c:	4642      	mov	r2, r8
 800229e:	2400      	movs	r4, #0
 80022a0:	2300      	movs	r3, #0
 80022a2:	e648      	b.n	8001f36 <__aeabi_dsub+0x146>
 80022a4:	2020      	movs	r0, #32
 80022a6:	000c      	movs	r4, r1
 80022a8:	1a80      	subs	r0, r0, r2
 80022aa:	003e      	movs	r6, r7
 80022ac:	4087      	lsls	r7, r0
 80022ae:	4084      	lsls	r4, r0
 80022b0:	40d6      	lsrs	r6, r2
 80022b2:	1e78      	subs	r0, r7, #1
 80022b4:	4187      	sbcs	r7, r0
 80022b6:	40d1      	lsrs	r1, r2
 80022b8:	4334      	orrs	r4, r6
 80022ba:	433c      	orrs	r4, r7
 80022bc:	448c      	add	ip, r1
 80022be:	e7a4      	b.n	800220a <__aeabi_dsub+0x41a>
 80022c0:	4a80      	ldr	r2, [pc, #512]	; (80024c4 <__aeabi_dsub+0x6d4>)
 80022c2:	4290      	cmp	r0, r2
 80022c4:	d100      	bne.n	80022c8 <__aeabi_dsub+0x4d8>
 80022c6:	e0e9      	b.n	800249c <__aeabi_dsub+0x6ac>
 80022c8:	19df      	adds	r7, r3, r7
 80022ca:	429f      	cmp	r7, r3
 80022cc:	419b      	sbcs	r3, r3
 80022ce:	4461      	add	r1, ip
 80022d0:	425b      	negs	r3, r3
 80022d2:	18c9      	adds	r1, r1, r3
 80022d4:	07cc      	lsls	r4, r1, #31
 80022d6:	087f      	lsrs	r7, r7, #1
 80022d8:	084b      	lsrs	r3, r1, #1
 80022da:	4699      	mov	r9, r3
 80022dc:	4680      	mov	r8, r0
 80022de:	433c      	orrs	r4, r7
 80022e0:	e6f4      	b.n	80020cc <__aeabi_dsub+0x2dc>
 80022e2:	1afc      	subs	r4, r7, r3
 80022e4:	42a7      	cmp	r7, r4
 80022e6:	41bf      	sbcs	r7, r7
 80022e8:	4663      	mov	r3, ip
 80022ea:	427f      	negs	r7, r7
 80022ec:	1ac9      	subs	r1, r1, r3
 80022ee:	1bcb      	subs	r3, r1, r7
 80022f0:	4699      	mov	r9, r3
 80022f2:	465d      	mov	r5, fp
 80022f4:	e5d5      	b.n	8001ea2 <__aeabi_dsub+0xb2>
 80022f6:	08ff      	lsrs	r7, r7, #3
 80022f8:	074b      	lsls	r3, r1, #29
 80022fa:	465d      	mov	r5, fp
 80022fc:	433b      	orrs	r3, r7
 80022fe:	08cc      	lsrs	r4, r1, #3
 8002300:	e6ee      	b.n	80020e0 <__aeabi_dsub+0x2f0>
 8002302:	4662      	mov	r2, ip
 8002304:	431a      	orrs	r2, r3
 8002306:	d000      	beq.n	800230a <__aeabi_dsub+0x51a>
 8002308:	e082      	b.n	8002410 <__aeabi_dsub+0x620>
 800230a:	000b      	movs	r3, r1
 800230c:	433b      	orrs	r3, r7
 800230e:	d11b      	bne.n	8002348 <__aeabi_dsub+0x558>
 8002310:	2480      	movs	r4, #128	; 0x80
 8002312:	2500      	movs	r5, #0
 8002314:	0324      	lsls	r4, r4, #12
 8002316:	e6f9      	b.n	800210c <__aeabi_dsub+0x31c>
 8002318:	19dc      	adds	r4, r3, r7
 800231a:	429c      	cmp	r4, r3
 800231c:	419b      	sbcs	r3, r3
 800231e:	4461      	add	r1, ip
 8002320:	4689      	mov	r9, r1
 8002322:	425b      	negs	r3, r3
 8002324:	4499      	add	r9, r3
 8002326:	464b      	mov	r3, r9
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	d444      	bmi.n	80023b6 <__aeabi_dsub+0x5c6>
 800232c:	2301      	movs	r3, #1
 800232e:	4698      	mov	r8, r3
 8002330:	e6cc      	b.n	80020cc <__aeabi_dsub+0x2dc>
 8002332:	1bdc      	subs	r4, r3, r7
 8002334:	4662      	mov	r2, ip
 8002336:	42a3      	cmp	r3, r4
 8002338:	419b      	sbcs	r3, r3
 800233a:	1a51      	subs	r1, r2, r1
 800233c:	425b      	negs	r3, r3
 800233e:	1acb      	subs	r3, r1, r3
 8002340:	4699      	mov	r9, r3
 8002342:	2301      	movs	r3, #1
 8002344:	4698      	mov	r8, r3
 8002346:	e5a4      	b.n	8001e92 <__aeabi_dsub+0xa2>
 8002348:	08ff      	lsrs	r7, r7, #3
 800234a:	074b      	lsls	r3, r1, #29
 800234c:	465d      	mov	r5, fp
 800234e:	433b      	orrs	r3, r7
 8002350:	08cc      	lsrs	r4, r1, #3
 8002352:	e6d7      	b.n	8002104 <__aeabi_dsub+0x314>
 8002354:	4662      	mov	r2, ip
 8002356:	431a      	orrs	r2, r3
 8002358:	0014      	movs	r4, r2
 800235a:	1e63      	subs	r3, r4, #1
 800235c:	419c      	sbcs	r4, r3
 800235e:	e679      	b.n	8002054 <__aeabi_dsub+0x264>
 8002360:	0015      	movs	r5, r2
 8002362:	4664      	mov	r4, ip
 8002364:	3d20      	subs	r5, #32
 8002366:	40ec      	lsrs	r4, r5
 8002368:	46a0      	mov	r8, r4
 800236a:	2a20      	cmp	r2, #32
 800236c:	d005      	beq.n	800237a <__aeabi_dsub+0x58a>
 800236e:	2540      	movs	r5, #64	; 0x40
 8002370:	4664      	mov	r4, ip
 8002372:	1aaa      	subs	r2, r5, r2
 8002374:	4094      	lsls	r4, r2
 8002376:	4323      	orrs	r3, r4
 8002378:	469a      	mov	sl, r3
 800237a:	4654      	mov	r4, sl
 800237c:	1e63      	subs	r3, r4, #1
 800237e:	419c      	sbcs	r4, r3
 8002380:	4643      	mov	r3, r8
 8002382:	4323      	orrs	r3, r4
 8002384:	e773      	b.n	800226e <__aeabi_dsub+0x47e>
 8002386:	4662      	mov	r2, ip
 8002388:	431a      	orrs	r2, r3
 800238a:	d023      	beq.n	80023d4 <__aeabi_dsub+0x5e4>
 800238c:	000a      	movs	r2, r1
 800238e:	433a      	orrs	r2, r7
 8002390:	d000      	beq.n	8002394 <__aeabi_dsub+0x5a4>
 8002392:	e0a0      	b.n	80024d6 <__aeabi_dsub+0x6e6>
 8002394:	4662      	mov	r2, ip
 8002396:	08db      	lsrs	r3, r3, #3
 8002398:	0752      	lsls	r2, r2, #29
 800239a:	4313      	orrs	r3, r2
 800239c:	4662      	mov	r2, ip
 800239e:	08d4      	lsrs	r4, r2, #3
 80023a0:	e6b0      	b.n	8002104 <__aeabi_dsub+0x314>
 80023a2:	000b      	movs	r3, r1
 80023a4:	433b      	orrs	r3, r7
 80023a6:	d100      	bne.n	80023aa <__aeabi_dsub+0x5ba>
 80023a8:	e728      	b.n	80021fc <__aeabi_dsub+0x40c>
 80023aa:	08ff      	lsrs	r7, r7, #3
 80023ac:	074b      	lsls	r3, r1, #29
 80023ae:	465d      	mov	r5, fp
 80023b0:	433b      	orrs	r3, r7
 80023b2:	08cc      	lsrs	r4, r1, #3
 80023b4:	e697      	b.n	80020e6 <__aeabi_dsub+0x2f6>
 80023b6:	2302      	movs	r3, #2
 80023b8:	4698      	mov	r8, r3
 80023ba:	e736      	b.n	800222a <__aeabi_dsub+0x43a>
 80023bc:	1afc      	subs	r4, r7, r3
 80023be:	42a7      	cmp	r7, r4
 80023c0:	41bf      	sbcs	r7, r7
 80023c2:	4663      	mov	r3, ip
 80023c4:	427f      	negs	r7, r7
 80023c6:	1ac9      	subs	r1, r1, r3
 80023c8:	1bcb      	subs	r3, r1, r7
 80023ca:	4699      	mov	r9, r3
 80023cc:	2301      	movs	r3, #1
 80023ce:	465d      	mov	r5, fp
 80023d0:	4698      	mov	r8, r3
 80023d2:	e55e      	b.n	8001e92 <__aeabi_dsub+0xa2>
 80023d4:	074b      	lsls	r3, r1, #29
 80023d6:	08ff      	lsrs	r7, r7, #3
 80023d8:	433b      	orrs	r3, r7
 80023da:	08cc      	lsrs	r4, r1, #3
 80023dc:	e692      	b.n	8002104 <__aeabi_dsub+0x314>
 80023de:	1bdc      	subs	r4, r3, r7
 80023e0:	4660      	mov	r0, ip
 80023e2:	42a3      	cmp	r3, r4
 80023e4:	41b6      	sbcs	r6, r6
 80023e6:	1a40      	subs	r0, r0, r1
 80023e8:	4276      	negs	r6, r6
 80023ea:	1b80      	subs	r0, r0, r6
 80023ec:	4681      	mov	r9, r0
 80023ee:	0200      	lsls	r0, r0, #8
 80023f0:	d560      	bpl.n	80024b4 <__aeabi_dsub+0x6c4>
 80023f2:	1afc      	subs	r4, r7, r3
 80023f4:	42a7      	cmp	r7, r4
 80023f6:	41bf      	sbcs	r7, r7
 80023f8:	4663      	mov	r3, ip
 80023fa:	427f      	negs	r7, r7
 80023fc:	1ac9      	subs	r1, r1, r3
 80023fe:	1bcb      	subs	r3, r1, r7
 8002400:	4699      	mov	r9, r3
 8002402:	465d      	mov	r5, fp
 8002404:	e576      	b.n	8001ef4 <__aeabi_dsub+0x104>
 8002406:	08ff      	lsrs	r7, r7, #3
 8002408:	074b      	lsls	r3, r1, #29
 800240a:	433b      	orrs	r3, r7
 800240c:	08cc      	lsrs	r4, r1, #3
 800240e:	e667      	b.n	80020e0 <__aeabi_dsub+0x2f0>
 8002410:	000a      	movs	r2, r1
 8002412:	08db      	lsrs	r3, r3, #3
 8002414:	433a      	orrs	r2, r7
 8002416:	d100      	bne.n	800241a <__aeabi_dsub+0x62a>
 8002418:	e66f      	b.n	80020fa <__aeabi_dsub+0x30a>
 800241a:	4662      	mov	r2, ip
 800241c:	0752      	lsls	r2, r2, #29
 800241e:	4313      	orrs	r3, r2
 8002420:	4662      	mov	r2, ip
 8002422:	08d4      	lsrs	r4, r2, #3
 8002424:	2280      	movs	r2, #128	; 0x80
 8002426:	0312      	lsls	r2, r2, #12
 8002428:	4214      	tst	r4, r2
 800242a:	d007      	beq.n	800243c <__aeabi_dsub+0x64c>
 800242c:	08c8      	lsrs	r0, r1, #3
 800242e:	4210      	tst	r0, r2
 8002430:	d104      	bne.n	800243c <__aeabi_dsub+0x64c>
 8002432:	465d      	mov	r5, fp
 8002434:	0004      	movs	r4, r0
 8002436:	08fb      	lsrs	r3, r7, #3
 8002438:	0749      	lsls	r1, r1, #29
 800243a:	430b      	orrs	r3, r1
 800243c:	0f5a      	lsrs	r2, r3, #29
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	08db      	lsrs	r3, r3, #3
 8002442:	0752      	lsls	r2, r2, #29
 8002444:	4313      	orrs	r3, r2
 8002446:	e65d      	b.n	8002104 <__aeabi_dsub+0x314>
 8002448:	074b      	lsls	r3, r1, #29
 800244a:	08ff      	lsrs	r7, r7, #3
 800244c:	433b      	orrs	r3, r7
 800244e:	08cc      	lsrs	r4, r1, #3
 8002450:	e649      	b.n	80020e6 <__aeabi_dsub+0x2f6>
 8002452:	19dc      	adds	r4, r3, r7
 8002454:	429c      	cmp	r4, r3
 8002456:	419b      	sbcs	r3, r3
 8002458:	4461      	add	r1, ip
 800245a:	4689      	mov	r9, r1
 800245c:	425b      	negs	r3, r3
 800245e:	4499      	add	r9, r3
 8002460:	464b      	mov	r3, r9
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	d400      	bmi.n	8002468 <__aeabi_dsub+0x678>
 8002466:	e631      	b.n	80020cc <__aeabi_dsub+0x2dc>
 8002468:	464a      	mov	r2, r9
 800246a:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <__aeabi_dsub+0x6d8>)
 800246c:	401a      	ands	r2, r3
 800246e:	2301      	movs	r3, #1
 8002470:	4691      	mov	r9, r2
 8002472:	4698      	mov	r8, r3
 8002474:	e62a      	b.n	80020cc <__aeabi_dsub+0x2dc>
 8002476:	0016      	movs	r6, r2
 8002478:	4664      	mov	r4, ip
 800247a:	3e20      	subs	r6, #32
 800247c:	40f4      	lsrs	r4, r6
 800247e:	46a0      	mov	r8, r4
 8002480:	2a20      	cmp	r2, #32
 8002482:	d005      	beq.n	8002490 <__aeabi_dsub+0x6a0>
 8002484:	2640      	movs	r6, #64	; 0x40
 8002486:	4664      	mov	r4, ip
 8002488:	1ab2      	subs	r2, r6, r2
 800248a:	4094      	lsls	r4, r2
 800248c:	4323      	orrs	r3, r4
 800248e:	469a      	mov	sl, r3
 8002490:	4654      	mov	r4, sl
 8002492:	1e63      	subs	r3, r4, #1
 8002494:	419c      	sbcs	r4, r3
 8002496:	4643      	mov	r3, r8
 8002498:	431c      	orrs	r4, r3
 800249a:	e5db      	b.n	8002054 <__aeabi_dsub+0x264>
 800249c:	0002      	movs	r2, r0
 800249e:	2400      	movs	r4, #0
 80024a0:	2300      	movs	r3, #0
 80024a2:	e548      	b.n	8001f36 <__aeabi_dsub+0x146>
 80024a4:	19dc      	adds	r4, r3, r7
 80024a6:	42bc      	cmp	r4, r7
 80024a8:	41bf      	sbcs	r7, r7
 80024aa:	4461      	add	r1, ip
 80024ac:	4689      	mov	r9, r1
 80024ae:	427f      	negs	r7, r7
 80024b0:	44b9      	add	r9, r7
 80024b2:	e738      	b.n	8002326 <__aeabi_dsub+0x536>
 80024b4:	464b      	mov	r3, r9
 80024b6:	4323      	orrs	r3, r4
 80024b8:	d100      	bne.n	80024bc <__aeabi_dsub+0x6cc>
 80024ba:	e69f      	b.n	80021fc <__aeabi_dsub+0x40c>
 80024bc:	e606      	b.n	80020cc <__aeabi_dsub+0x2dc>
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	000007fe 	.word	0x000007fe
 80024c4:	000007ff 	.word	0x000007ff
 80024c8:	ff7fffff 	.word	0xff7fffff
 80024cc:	08ff      	lsrs	r7, r7, #3
 80024ce:	074b      	lsls	r3, r1, #29
 80024d0:	433b      	orrs	r3, r7
 80024d2:	08cc      	lsrs	r4, r1, #3
 80024d4:	e616      	b.n	8002104 <__aeabi_dsub+0x314>
 80024d6:	4662      	mov	r2, ip
 80024d8:	08db      	lsrs	r3, r3, #3
 80024da:	0752      	lsls	r2, r2, #29
 80024dc:	4313      	orrs	r3, r2
 80024de:	4662      	mov	r2, ip
 80024e0:	08d4      	lsrs	r4, r2, #3
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	0312      	lsls	r2, r2, #12
 80024e6:	4214      	tst	r4, r2
 80024e8:	d007      	beq.n	80024fa <__aeabi_dsub+0x70a>
 80024ea:	08c8      	lsrs	r0, r1, #3
 80024ec:	4210      	tst	r0, r2
 80024ee:	d104      	bne.n	80024fa <__aeabi_dsub+0x70a>
 80024f0:	465d      	mov	r5, fp
 80024f2:	0004      	movs	r4, r0
 80024f4:	08fb      	lsrs	r3, r7, #3
 80024f6:	0749      	lsls	r1, r1, #29
 80024f8:	430b      	orrs	r3, r1
 80024fa:	0f5a      	lsrs	r2, r3, #29
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	0752      	lsls	r2, r2, #29
 8002500:	08db      	lsrs	r3, r3, #3
 8002502:	4313      	orrs	r3, r2
 8002504:	e5fe      	b.n	8002104 <__aeabi_dsub+0x314>
 8002506:	2300      	movs	r3, #0
 8002508:	4a01      	ldr	r2, [pc, #4]	; (8002510 <__aeabi_dsub+0x720>)
 800250a:	001c      	movs	r4, r3
 800250c:	e513      	b.n	8001f36 <__aeabi_dsub+0x146>
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	000007ff 	.word	0x000007ff

08002514 <__aeabi_dcmpun>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	0005      	movs	r5, r0
 8002518:	480c      	ldr	r0, [pc, #48]	; (800254c <__aeabi_dcmpun+0x38>)
 800251a:	031c      	lsls	r4, r3, #12
 800251c:	0016      	movs	r6, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	030a      	lsls	r2, r1, #12
 8002522:	0049      	lsls	r1, r1, #1
 8002524:	0b12      	lsrs	r2, r2, #12
 8002526:	0d49      	lsrs	r1, r1, #21
 8002528:	0b24      	lsrs	r4, r4, #12
 800252a:	0d5b      	lsrs	r3, r3, #21
 800252c:	4281      	cmp	r1, r0
 800252e:	d008      	beq.n	8002542 <__aeabi_dcmpun+0x2e>
 8002530:	4a06      	ldr	r2, [pc, #24]	; (800254c <__aeabi_dcmpun+0x38>)
 8002532:	2000      	movs	r0, #0
 8002534:	4293      	cmp	r3, r2
 8002536:	d103      	bne.n	8002540 <__aeabi_dcmpun+0x2c>
 8002538:	0020      	movs	r0, r4
 800253a:	4330      	orrs	r0, r6
 800253c:	1e43      	subs	r3, r0, #1
 800253e:	4198      	sbcs	r0, r3
 8002540:	bd70      	pop	{r4, r5, r6, pc}
 8002542:	2001      	movs	r0, #1
 8002544:	432a      	orrs	r2, r5
 8002546:	d1fb      	bne.n	8002540 <__aeabi_dcmpun+0x2c>
 8002548:	e7f2      	b.n	8002530 <__aeabi_dcmpun+0x1c>
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	000007ff 	.word	0x000007ff

08002550 <__aeabi_d2iz>:
 8002550:	000a      	movs	r2, r1
 8002552:	b530      	push	{r4, r5, lr}
 8002554:	4c13      	ldr	r4, [pc, #76]	; (80025a4 <__aeabi_d2iz+0x54>)
 8002556:	0053      	lsls	r3, r2, #1
 8002558:	0309      	lsls	r1, r1, #12
 800255a:	0005      	movs	r5, r0
 800255c:	0b09      	lsrs	r1, r1, #12
 800255e:	2000      	movs	r0, #0
 8002560:	0d5b      	lsrs	r3, r3, #21
 8002562:	0fd2      	lsrs	r2, r2, #31
 8002564:	42a3      	cmp	r3, r4
 8002566:	dd04      	ble.n	8002572 <__aeabi_d2iz+0x22>
 8002568:	480f      	ldr	r0, [pc, #60]	; (80025a8 <__aeabi_d2iz+0x58>)
 800256a:	4283      	cmp	r3, r0
 800256c:	dd02      	ble.n	8002574 <__aeabi_d2iz+0x24>
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <__aeabi_d2iz+0x5c>)
 8002570:	18d0      	adds	r0, r2, r3
 8002572:	bd30      	pop	{r4, r5, pc}
 8002574:	2080      	movs	r0, #128	; 0x80
 8002576:	0340      	lsls	r0, r0, #13
 8002578:	4301      	orrs	r1, r0
 800257a:	480d      	ldr	r0, [pc, #52]	; (80025b0 <__aeabi_d2iz+0x60>)
 800257c:	1ac0      	subs	r0, r0, r3
 800257e:	281f      	cmp	r0, #31
 8002580:	dd08      	ble.n	8002594 <__aeabi_d2iz+0x44>
 8002582:	480c      	ldr	r0, [pc, #48]	; (80025b4 <__aeabi_d2iz+0x64>)
 8002584:	1ac3      	subs	r3, r0, r3
 8002586:	40d9      	lsrs	r1, r3
 8002588:	000b      	movs	r3, r1
 800258a:	4258      	negs	r0, r3
 800258c:	2a00      	cmp	r2, #0
 800258e:	d1f0      	bne.n	8002572 <__aeabi_d2iz+0x22>
 8002590:	0018      	movs	r0, r3
 8002592:	e7ee      	b.n	8002572 <__aeabi_d2iz+0x22>
 8002594:	4c08      	ldr	r4, [pc, #32]	; (80025b8 <__aeabi_d2iz+0x68>)
 8002596:	40c5      	lsrs	r5, r0
 8002598:	46a4      	mov	ip, r4
 800259a:	4463      	add	r3, ip
 800259c:	4099      	lsls	r1, r3
 800259e:	000b      	movs	r3, r1
 80025a0:	432b      	orrs	r3, r5
 80025a2:	e7f2      	b.n	800258a <__aeabi_d2iz+0x3a>
 80025a4:	000003fe 	.word	0x000003fe
 80025a8:	0000041d 	.word	0x0000041d
 80025ac:	7fffffff 	.word	0x7fffffff
 80025b0:	00000433 	.word	0x00000433
 80025b4:	00000413 	.word	0x00000413
 80025b8:	fffffbed 	.word	0xfffffbed

080025bc <__aeabi_i2d>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	2800      	cmp	r0, #0
 80025c0:	d016      	beq.n	80025f0 <__aeabi_i2d+0x34>
 80025c2:	17c3      	asrs	r3, r0, #31
 80025c4:	18c5      	adds	r5, r0, r3
 80025c6:	405d      	eors	r5, r3
 80025c8:	0fc4      	lsrs	r4, r0, #31
 80025ca:	0028      	movs	r0, r5
 80025cc:	f000 f91c 	bl	8002808 <__clzsi2>
 80025d0:	4a11      	ldr	r2, [pc, #68]	; (8002618 <__aeabi_i2d+0x5c>)
 80025d2:	1a12      	subs	r2, r2, r0
 80025d4:	280a      	cmp	r0, #10
 80025d6:	dc16      	bgt.n	8002606 <__aeabi_i2d+0x4a>
 80025d8:	0003      	movs	r3, r0
 80025da:	002e      	movs	r6, r5
 80025dc:	3315      	adds	r3, #21
 80025de:	409e      	lsls	r6, r3
 80025e0:	230b      	movs	r3, #11
 80025e2:	1a18      	subs	r0, r3, r0
 80025e4:	40c5      	lsrs	r5, r0
 80025e6:	0552      	lsls	r2, r2, #21
 80025e8:	032d      	lsls	r5, r5, #12
 80025ea:	0b2d      	lsrs	r5, r5, #12
 80025ec:	0d53      	lsrs	r3, r2, #21
 80025ee:	e003      	b.n	80025f8 <__aeabi_i2d+0x3c>
 80025f0:	2400      	movs	r4, #0
 80025f2:	2300      	movs	r3, #0
 80025f4:	2500      	movs	r5, #0
 80025f6:	2600      	movs	r6, #0
 80025f8:	051b      	lsls	r3, r3, #20
 80025fa:	432b      	orrs	r3, r5
 80025fc:	07e4      	lsls	r4, r4, #31
 80025fe:	4323      	orrs	r3, r4
 8002600:	0030      	movs	r0, r6
 8002602:	0019      	movs	r1, r3
 8002604:	bd70      	pop	{r4, r5, r6, pc}
 8002606:	380b      	subs	r0, #11
 8002608:	4085      	lsls	r5, r0
 800260a:	0552      	lsls	r2, r2, #21
 800260c:	032d      	lsls	r5, r5, #12
 800260e:	2600      	movs	r6, #0
 8002610:	0b2d      	lsrs	r5, r5, #12
 8002612:	0d53      	lsrs	r3, r2, #21
 8002614:	e7f0      	b.n	80025f8 <__aeabi_i2d+0x3c>
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	0000041e 	.word	0x0000041e

0800261c <__aeabi_ui2d>:
 800261c:	b510      	push	{r4, lr}
 800261e:	1e04      	subs	r4, r0, #0
 8002620:	d010      	beq.n	8002644 <__aeabi_ui2d+0x28>
 8002622:	f000 f8f1 	bl	8002808 <__clzsi2>
 8002626:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <__aeabi_ui2d+0x48>)
 8002628:	1a1b      	subs	r3, r3, r0
 800262a:	280a      	cmp	r0, #10
 800262c:	dc11      	bgt.n	8002652 <__aeabi_ui2d+0x36>
 800262e:	220b      	movs	r2, #11
 8002630:	0021      	movs	r1, r4
 8002632:	1a12      	subs	r2, r2, r0
 8002634:	40d1      	lsrs	r1, r2
 8002636:	3015      	adds	r0, #21
 8002638:	030a      	lsls	r2, r1, #12
 800263a:	055b      	lsls	r3, r3, #21
 800263c:	4084      	lsls	r4, r0
 800263e:	0b12      	lsrs	r2, r2, #12
 8002640:	0d5b      	lsrs	r3, r3, #21
 8002642:	e001      	b.n	8002648 <__aeabi_ui2d+0x2c>
 8002644:	2300      	movs	r3, #0
 8002646:	2200      	movs	r2, #0
 8002648:	051b      	lsls	r3, r3, #20
 800264a:	4313      	orrs	r3, r2
 800264c:	0020      	movs	r0, r4
 800264e:	0019      	movs	r1, r3
 8002650:	bd10      	pop	{r4, pc}
 8002652:	0022      	movs	r2, r4
 8002654:	380b      	subs	r0, #11
 8002656:	4082      	lsls	r2, r0
 8002658:	055b      	lsls	r3, r3, #21
 800265a:	0312      	lsls	r2, r2, #12
 800265c:	2400      	movs	r4, #0
 800265e:	0b12      	lsrs	r2, r2, #12
 8002660:	0d5b      	lsrs	r3, r3, #21
 8002662:	e7f1      	b.n	8002648 <__aeabi_ui2d+0x2c>
 8002664:	0000041e 	.word	0x0000041e

08002668 <__aeabi_f2d>:
 8002668:	b570      	push	{r4, r5, r6, lr}
 800266a:	0043      	lsls	r3, r0, #1
 800266c:	0246      	lsls	r6, r0, #9
 800266e:	0fc4      	lsrs	r4, r0, #31
 8002670:	20fe      	movs	r0, #254	; 0xfe
 8002672:	0e1b      	lsrs	r3, r3, #24
 8002674:	1c59      	adds	r1, r3, #1
 8002676:	0a75      	lsrs	r5, r6, #9
 8002678:	4208      	tst	r0, r1
 800267a:	d00c      	beq.n	8002696 <__aeabi_f2d+0x2e>
 800267c:	22e0      	movs	r2, #224	; 0xe0
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	4694      	mov	ip, r2
 8002682:	076d      	lsls	r5, r5, #29
 8002684:	0b36      	lsrs	r6, r6, #12
 8002686:	4463      	add	r3, ip
 8002688:	051b      	lsls	r3, r3, #20
 800268a:	4333      	orrs	r3, r6
 800268c:	07e4      	lsls	r4, r4, #31
 800268e:	4323      	orrs	r3, r4
 8002690:	0028      	movs	r0, r5
 8002692:	0019      	movs	r1, r3
 8002694:	bd70      	pop	{r4, r5, r6, pc}
 8002696:	2b00      	cmp	r3, #0
 8002698:	d114      	bne.n	80026c4 <__aeabi_f2d+0x5c>
 800269a:	2d00      	cmp	r5, #0
 800269c:	d01b      	beq.n	80026d6 <__aeabi_f2d+0x6e>
 800269e:	0028      	movs	r0, r5
 80026a0:	f000 f8b2 	bl	8002808 <__clzsi2>
 80026a4:	280a      	cmp	r0, #10
 80026a6:	dc1c      	bgt.n	80026e2 <__aeabi_f2d+0x7a>
 80026a8:	230b      	movs	r3, #11
 80026aa:	002e      	movs	r6, r5
 80026ac:	1a1b      	subs	r3, r3, r0
 80026ae:	40de      	lsrs	r6, r3
 80026b0:	0003      	movs	r3, r0
 80026b2:	3315      	adds	r3, #21
 80026b4:	409d      	lsls	r5, r3
 80026b6:	4a0e      	ldr	r2, [pc, #56]	; (80026f0 <__aeabi_f2d+0x88>)
 80026b8:	0336      	lsls	r6, r6, #12
 80026ba:	1a12      	subs	r2, r2, r0
 80026bc:	0552      	lsls	r2, r2, #21
 80026be:	0b36      	lsrs	r6, r6, #12
 80026c0:	0d53      	lsrs	r3, r2, #21
 80026c2:	e7e1      	b.n	8002688 <__aeabi_f2d+0x20>
 80026c4:	2d00      	cmp	r5, #0
 80026c6:	d009      	beq.n	80026dc <__aeabi_f2d+0x74>
 80026c8:	2280      	movs	r2, #128	; 0x80
 80026ca:	0b36      	lsrs	r6, r6, #12
 80026cc:	0312      	lsls	r2, r2, #12
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <__aeabi_f2d+0x8c>)
 80026d0:	076d      	lsls	r5, r5, #29
 80026d2:	4316      	orrs	r6, r2
 80026d4:	e7d8      	b.n	8002688 <__aeabi_f2d+0x20>
 80026d6:	2300      	movs	r3, #0
 80026d8:	2600      	movs	r6, #0
 80026da:	e7d5      	b.n	8002688 <__aeabi_f2d+0x20>
 80026dc:	2600      	movs	r6, #0
 80026de:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <__aeabi_f2d+0x8c>)
 80026e0:	e7d2      	b.n	8002688 <__aeabi_f2d+0x20>
 80026e2:	0003      	movs	r3, r0
 80026e4:	3b0b      	subs	r3, #11
 80026e6:	409d      	lsls	r5, r3
 80026e8:	002e      	movs	r6, r5
 80026ea:	2500      	movs	r5, #0
 80026ec:	e7e3      	b.n	80026b6 <__aeabi_f2d+0x4e>
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	00000389 	.word	0x00000389
 80026f4:	000007ff 	.word	0x000007ff

080026f8 <__aeabi_d2f>:
 80026f8:	0002      	movs	r2, r0
 80026fa:	004b      	lsls	r3, r1, #1
 80026fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026fe:	0d5b      	lsrs	r3, r3, #21
 8002700:	030c      	lsls	r4, r1, #12
 8002702:	4e3d      	ldr	r6, [pc, #244]	; (80027f8 <__aeabi_d2f+0x100>)
 8002704:	0a64      	lsrs	r4, r4, #9
 8002706:	0f40      	lsrs	r0, r0, #29
 8002708:	1c5f      	adds	r7, r3, #1
 800270a:	0fc9      	lsrs	r1, r1, #31
 800270c:	4304      	orrs	r4, r0
 800270e:	00d5      	lsls	r5, r2, #3
 8002710:	4237      	tst	r7, r6
 8002712:	d00a      	beq.n	800272a <__aeabi_d2f+0x32>
 8002714:	4839      	ldr	r0, [pc, #228]	; (80027fc <__aeabi_d2f+0x104>)
 8002716:	181e      	adds	r6, r3, r0
 8002718:	2efe      	cmp	r6, #254	; 0xfe
 800271a:	dd16      	ble.n	800274a <__aeabi_d2f+0x52>
 800271c:	20ff      	movs	r0, #255	; 0xff
 800271e:	2400      	movs	r4, #0
 8002720:	05c0      	lsls	r0, r0, #23
 8002722:	4320      	orrs	r0, r4
 8002724:	07c9      	lsls	r1, r1, #31
 8002726:	4308      	orrs	r0, r1
 8002728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <__aeabi_d2f+0x44>
 800272e:	432c      	orrs	r4, r5
 8002730:	d026      	beq.n	8002780 <__aeabi_d2f+0x88>
 8002732:	2205      	movs	r2, #5
 8002734:	0192      	lsls	r2, r2, #6
 8002736:	0a54      	lsrs	r4, r2, #9
 8002738:	b2d8      	uxtb	r0, r3
 800273a:	e7f1      	b.n	8002720 <__aeabi_d2f+0x28>
 800273c:	4325      	orrs	r5, r4
 800273e:	d0ed      	beq.n	800271c <__aeabi_d2f+0x24>
 8002740:	2080      	movs	r0, #128	; 0x80
 8002742:	03c0      	lsls	r0, r0, #15
 8002744:	4304      	orrs	r4, r0
 8002746:	20ff      	movs	r0, #255	; 0xff
 8002748:	e7ea      	b.n	8002720 <__aeabi_d2f+0x28>
 800274a:	2e00      	cmp	r6, #0
 800274c:	dd1b      	ble.n	8002786 <__aeabi_d2f+0x8e>
 800274e:	0192      	lsls	r2, r2, #6
 8002750:	1e53      	subs	r3, r2, #1
 8002752:	419a      	sbcs	r2, r3
 8002754:	00e4      	lsls	r4, r4, #3
 8002756:	0f6d      	lsrs	r5, r5, #29
 8002758:	4322      	orrs	r2, r4
 800275a:	432a      	orrs	r2, r5
 800275c:	0753      	lsls	r3, r2, #29
 800275e:	d048      	beq.n	80027f2 <__aeabi_d2f+0xfa>
 8002760:	230f      	movs	r3, #15
 8002762:	4013      	ands	r3, r2
 8002764:	2b04      	cmp	r3, #4
 8002766:	d000      	beq.n	800276a <__aeabi_d2f+0x72>
 8002768:	3204      	adds	r2, #4
 800276a:	2380      	movs	r3, #128	; 0x80
 800276c:	04db      	lsls	r3, r3, #19
 800276e:	4013      	ands	r3, r2
 8002770:	d03f      	beq.n	80027f2 <__aeabi_d2f+0xfa>
 8002772:	1c70      	adds	r0, r6, #1
 8002774:	2efe      	cmp	r6, #254	; 0xfe
 8002776:	d0d1      	beq.n	800271c <__aeabi_d2f+0x24>
 8002778:	0192      	lsls	r2, r2, #6
 800277a:	0a54      	lsrs	r4, r2, #9
 800277c:	b2c0      	uxtb	r0, r0
 800277e:	e7cf      	b.n	8002720 <__aeabi_d2f+0x28>
 8002780:	2000      	movs	r0, #0
 8002782:	2400      	movs	r4, #0
 8002784:	e7cc      	b.n	8002720 <__aeabi_d2f+0x28>
 8002786:	0032      	movs	r2, r6
 8002788:	3217      	adds	r2, #23
 800278a:	db22      	blt.n	80027d2 <__aeabi_d2f+0xda>
 800278c:	2080      	movs	r0, #128	; 0x80
 800278e:	0400      	lsls	r0, r0, #16
 8002790:	4320      	orrs	r0, r4
 8002792:	241e      	movs	r4, #30
 8002794:	1ba4      	subs	r4, r4, r6
 8002796:	2c1f      	cmp	r4, #31
 8002798:	dd1d      	ble.n	80027d6 <__aeabi_d2f+0xde>
 800279a:	2202      	movs	r2, #2
 800279c:	4252      	negs	r2, r2
 800279e:	1b96      	subs	r6, r2, r6
 80027a0:	0002      	movs	r2, r0
 80027a2:	40f2      	lsrs	r2, r6
 80027a4:	0016      	movs	r6, r2
 80027a6:	2c20      	cmp	r4, #32
 80027a8:	d004      	beq.n	80027b4 <__aeabi_d2f+0xbc>
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <__aeabi_d2f+0x108>)
 80027ac:	4694      	mov	ip, r2
 80027ae:	4463      	add	r3, ip
 80027b0:	4098      	lsls	r0, r3
 80027b2:	4305      	orrs	r5, r0
 80027b4:	002a      	movs	r2, r5
 80027b6:	1e53      	subs	r3, r2, #1
 80027b8:	419a      	sbcs	r2, r3
 80027ba:	4332      	orrs	r2, r6
 80027bc:	2600      	movs	r6, #0
 80027be:	0753      	lsls	r3, r2, #29
 80027c0:	d1ce      	bne.n	8002760 <__aeabi_d2f+0x68>
 80027c2:	2480      	movs	r4, #128	; 0x80
 80027c4:	0013      	movs	r3, r2
 80027c6:	04e4      	lsls	r4, r4, #19
 80027c8:	2001      	movs	r0, #1
 80027ca:	4023      	ands	r3, r4
 80027cc:	4222      	tst	r2, r4
 80027ce:	d1d3      	bne.n	8002778 <__aeabi_d2f+0x80>
 80027d0:	e7b0      	b.n	8002734 <__aeabi_d2f+0x3c>
 80027d2:	2300      	movs	r3, #0
 80027d4:	e7ad      	b.n	8002732 <__aeabi_d2f+0x3a>
 80027d6:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <__aeabi_d2f+0x10c>)
 80027d8:	4694      	mov	ip, r2
 80027da:	002a      	movs	r2, r5
 80027dc:	40e2      	lsrs	r2, r4
 80027de:	0014      	movs	r4, r2
 80027e0:	002a      	movs	r2, r5
 80027e2:	4463      	add	r3, ip
 80027e4:	409a      	lsls	r2, r3
 80027e6:	4098      	lsls	r0, r3
 80027e8:	1e55      	subs	r5, r2, #1
 80027ea:	41aa      	sbcs	r2, r5
 80027ec:	4302      	orrs	r2, r0
 80027ee:	4322      	orrs	r2, r4
 80027f0:	e7e4      	b.n	80027bc <__aeabi_d2f+0xc4>
 80027f2:	0033      	movs	r3, r6
 80027f4:	e79e      	b.n	8002734 <__aeabi_d2f+0x3c>
 80027f6:	46c0      	nop			; (mov r8, r8)
 80027f8:	000007fe 	.word	0x000007fe
 80027fc:	fffffc80 	.word	0xfffffc80
 8002800:	fffffca2 	.word	0xfffffca2
 8002804:	fffffc82 	.word	0xfffffc82

08002808 <__clzsi2>:
 8002808:	211c      	movs	r1, #28
 800280a:	2301      	movs	r3, #1
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	4298      	cmp	r0, r3
 8002810:	d301      	bcc.n	8002816 <__clzsi2+0xe>
 8002812:	0c00      	lsrs	r0, r0, #16
 8002814:	3910      	subs	r1, #16
 8002816:	0a1b      	lsrs	r3, r3, #8
 8002818:	4298      	cmp	r0, r3
 800281a:	d301      	bcc.n	8002820 <__clzsi2+0x18>
 800281c:	0a00      	lsrs	r0, r0, #8
 800281e:	3908      	subs	r1, #8
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	4298      	cmp	r0, r3
 8002824:	d301      	bcc.n	800282a <__clzsi2+0x22>
 8002826:	0900      	lsrs	r0, r0, #4
 8002828:	3904      	subs	r1, #4
 800282a:	a202      	add	r2, pc, #8	; (adr r2, 8002834 <__clzsi2+0x2c>)
 800282c:	5c10      	ldrb	r0, [r2, r0]
 800282e:	1840      	adds	r0, r0, r1
 8002830:	4770      	bx	lr
 8002832:	46c0      	nop			; (mov r8, r8)
 8002834:	02020304 	.word	0x02020304
 8002838:	01010101 	.word	0x01010101
	...

08002844 <__clzdi2>:
 8002844:	b510      	push	{r4, lr}
 8002846:	2900      	cmp	r1, #0
 8002848:	d103      	bne.n	8002852 <__clzdi2+0xe>
 800284a:	f7ff ffdd 	bl	8002808 <__clzsi2>
 800284e:	3020      	adds	r0, #32
 8002850:	e002      	b.n	8002858 <__clzdi2+0x14>
 8002852:	0008      	movs	r0, r1
 8002854:	f7ff ffd8 	bl	8002808 <__clzsi2>
 8002858:	bd10      	pop	{r4, pc}
 800285a:	46c0      	nop			; (mov r8, r8)

0800285c <main>:

const float speedOfSound = 0.0343 / 2;
float distance;
char uartBuf[100];

int main(void) {
 800285c:	b5b0      	push	{r4, r5, r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002862:	f000 fb9d 	bl	8002fa0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8002866:	f000 f8c9 	bl	80029fc <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800286a:	f000 f9bd 	bl	8002be8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800286e:	f000 f98b 	bl	8002b88 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8002872:	f000 f935 	bl	8002ae0 <MX_TIM2_Init>

	uint32_t numTicks = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]

	while (1) {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	483c      	ldr	r0, [pc, #240]	; (8002970 <main+0x114>)
 8002880:	2200      	movs	r2, #0
 8002882:	0019      	movs	r1, r3
 8002884:	f000 fe6f 	bl	8003566 <HAL_GPIO_WritePin>
		usDelay(3);
 8002888:	2003      	movs	r0, #3
 800288a:	f000 f881 	bl	8002990 <usDelay>
		//*** START Ultrasonic measure routine ***//
		//1. Output 10 usec TRIG
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4837      	ldr	r0, [pc, #220]	; (8002970 <main+0x114>)
 8002894:	2201      	movs	r2, #1
 8002896:	0019      	movs	r1, r3
 8002898:	f000 fe65 	bl	8003566 <HAL_GPIO_WritePin>
		usDelay(10);
 800289c:	200a      	movs	r0, #10
 800289e:	f000 f877 	bl	8002990 <usDelay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4832      	ldr	r0, [pc, #200]	; (8002970 <main+0x114>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	0019      	movs	r1, r3
 80028ac:	f000 fe5b 	bl	8003566 <HAL_GPIO_WritePin>
		//2. Wait for ECHO pin rising edge
		while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_RESET)
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	4a2e      	ldr	r2, [pc, #184]	; (8002970 <main+0x114>)
 80028b8:	0019      	movs	r1, r3
 80028ba:	0010      	movs	r0, r2
 80028bc:	f000 fe36 	bl	800352c <HAL_GPIO_ReadPin>
 80028c0:	1e03      	subs	r3, r0, #0
 80028c2:	d0f6      	beq.n	80028b2 <main+0x56>
			;
		//3. Start measuring ECHO pulse width in usec
		numTicks = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	607b      	str	r3, [r7, #4]
		while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET) {
 80028c8:	e005      	b.n	80028d6 <main+0x7a>
			numTicks++;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3301      	adds	r3, #1
 80028ce:	607b      	str	r3, [r7, #4]
			usDelay(2); //2.8usec
 80028d0:	2002      	movs	r0, #2
 80028d2:	f000 f85d 	bl	8002990 <usDelay>
		while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == GPIO_PIN_SET) {
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4a25      	ldr	r2, [pc, #148]	; (8002970 <main+0x114>)
 80028dc:	0019      	movs	r1, r3
 80028de:	0010      	movs	r0, r2
 80028e0:	f000 fe24 	bl	800352c <HAL_GPIO_ReadPin>
 80028e4:	0003      	movs	r3, r0
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d0ef      	beq.n	80028ca <main+0x6e>
		};
		//4. Estimate distance in cm
		distance = (numTicks + 0.0f) * 2.8 * speedOfSound;
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7fe f894 	bl	8000a18 <__aeabi_ui2f>
 80028f0:	1c03      	adds	r3, r0, #0
 80028f2:	2100      	movs	r1, #0
 80028f4:	1c18      	adds	r0, r3, #0
 80028f6:	f7fd fef1 	bl	80006dc <__aeabi_fadd>
 80028fa:	1c03      	adds	r3, r0, #0
 80028fc:	1c18      	adds	r0, r3, #0
 80028fe:	f7ff feb3 	bl	8002668 <__aeabi_f2d>
 8002902:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <main+0x118>)
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <main+0x11c>)
 8002906:	f7ff f807 	bl	8001918 <__aeabi_dmul>
 800290a:	0002      	movs	r2, r0
 800290c:	000b      	movs	r3, r1
 800290e:	0014      	movs	r4, r2
 8002910:	001d      	movs	r5, r3
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <main+0x120>)
 8002914:	1c18      	adds	r0, r3, #0
 8002916:	f7ff fea7 	bl	8002668 <__aeabi_f2d>
 800291a:	0002      	movs	r2, r0
 800291c:	000b      	movs	r3, r1
 800291e:	0020      	movs	r0, r4
 8002920:	0029      	movs	r1, r5
 8002922:	f7fe fff9 	bl	8001918 <__aeabi_dmul>
 8002926:	0002      	movs	r2, r0
 8002928:	000b      	movs	r3, r1
 800292a:	0010      	movs	r0, r2
 800292c:	0019      	movs	r1, r3
 800292e:	f7ff fee3 	bl	80026f8 <__aeabi_d2f>
 8002932:	1c02      	adds	r2, r0, #0
 8002934:	4b12      	ldr	r3, [pc, #72]	; (8002980 <main+0x124>)
 8002936:	601a      	str	r2, [r3, #0]
		//5. Print to UART terminal for debugging
		sprintf(uartBuf, "Distance (cm)  = %.1f\r\n", distance);
 8002938:	4b11      	ldr	r3, [pc, #68]	; (8002980 <main+0x124>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	1c18      	adds	r0, r3, #0
 800293e:	f7ff fe93 	bl	8002668 <__aeabi_f2d>
 8002942:	0002      	movs	r2, r0
 8002944:	000b      	movs	r3, r1
 8002946:	490f      	ldr	r1, [pc, #60]	; (8002984 <main+0x128>)
 8002948:	480f      	ldr	r0, [pc, #60]	; (8002988 <main+0x12c>)
 800294a:	f003 fa43 	bl	8005dd4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) uartBuf, strlen(uartBuf), 100);
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <main+0x12c>)
 8002950:	0018      	movs	r0, r3
 8002952:	f7fd fbd9 	bl	8000108 <strlen>
 8002956:	0003      	movs	r3, r0
 8002958:	b29a      	uxth	r2, r3
 800295a:	490b      	ldr	r1, [pc, #44]	; (8002988 <main+0x12c>)
 800295c:	480b      	ldr	r0, [pc, #44]	; (800298c <main+0x130>)
 800295e:	2364      	movs	r3, #100	; 0x64
 8002960:	f002 f830 	bl	80049c4 <HAL_UART_Transmit>
		HAL_Delay(1000);
 8002964:	23fa      	movs	r3, #250	; 0xfa
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	0018      	movs	r0, r3
 800296a:	f000 fb89 	bl	8003080 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800296e:	e784      	b.n	800287a <main+0x1e>
 8002970:	50000400 	.word	0x50000400
 8002974:	66666666 	.word	0x66666666
 8002978:	40066666 	.word	0x40066666
 800297c:	3c8c7e28 	.word	0x3c8c7e28
 8002980:	200002c0 	.word	0x200002c0
 8002984:	08008448 	.word	0x08008448
 8002988:	200002c4 	.word	0x200002c4
 800298c:	20000238 	.word	0x20000238

08002990 <usDelay>:
	}

}


void usDelay(uint32_t uSec){
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 if(uSec < 2) uSec = 2;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d801      	bhi.n	80029a2 <usDelay+0x12>
 800299e:	2302      	movs	r3, #2
 80029a0:	607b      	str	r3, [r7, #4]
 usTIM->ARR = uSec - 1;  /*sets the value in the auto-reload register*/
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	05db      	lsls	r3, r3, #23
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	3a01      	subs	r2, #1
 80029aa:	62da      	str	r2, [r3, #44]	; 0x2c
 usTIM->EGR = 1;    /*Re-initialises the timer*/
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	05db      	lsls	r3, r3, #23
 80029b0:	2201      	movs	r2, #1
 80029b2:	615a      	str	r2, [r3, #20]
 usTIM->SR &= ~1;   //Resets the flag
 80029b4:	2380      	movs	r3, #128	; 0x80
 80029b6:	05db      	lsls	r3, r3, #23
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	05db      	lsls	r3, r3, #23
 80029be:	2101      	movs	r1, #1
 80029c0:	438a      	bics	r2, r1
 80029c2:	611a      	str	r2, [r3, #16]
 usTIM->CR1 |= 1;   //Enables the counter
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	05db      	lsls	r3, r3, #23
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	05db      	lsls	r3, r3, #23
 80029ce:	2101      	movs	r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]
 while((usTIM->SR&0x0001) != 1);
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	05db      	lsls	r3, r3, #23
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	2201      	movs	r2, #1
 80029de:	4013      	ands	r3, r2
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d1f8      	bne.n	80029d6 <usDelay+0x46>
 usTIM->SR &= ~(0x0001);
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	05db      	lsls	r3, r3, #23
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	2380      	movs	r3, #128	; 0x80
 80029ec:	05db      	lsls	r3, r3, #23
 80029ee:	2101      	movs	r1, #1
 80029f0:	438a      	bics	r2, r1
 80029f2:	611a      	str	r2, [r3, #16]
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bd80      	pop	{r7, pc}

080029fc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b09d      	sub	sp, #116	; 0x74
 8002a00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002a02:	2438      	movs	r4, #56	; 0x38
 8002a04:	193b      	adds	r3, r7, r4
 8002a06:	0018      	movs	r0, r3
 8002a08:	2338      	movs	r3, #56	; 0x38
 8002a0a:	001a      	movs	r2, r3
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	f002 fd6b 	bl	80054e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002a12:	2324      	movs	r3, #36	; 0x24
 8002a14:	18fb      	adds	r3, r7, r3
 8002a16:	0018      	movs	r0, r3
 8002a18:	2314      	movs	r3, #20
 8002a1a:	001a      	movs	r2, r3
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	f002 fd63 	bl	80054e8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002a22:	003b      	movs	r3, r7
 8002a24:	0018      	movs	r0, r3
 8002a26:	2324      	movs	r3, #36	; 0x24
 8002a28:	001a      	movs	r2, r3
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	f002 fd5c 	bl	80054e8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a30:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <SystemClock_Config+0xdc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a29      	ldr	r2, [pc, #164]	; (8002adc <SystemClock_Config+0xe0>)
 8002a36:	401a      	ands	r2, r3
 8002a38:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <SystemClock_Config+0xdc>)
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	0109      	lsls	r1, r1, #4
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a42:	0021      	movs	r1, r4
 8002a44:	187b      	adds	r3, r7, r1
 8002a46:	2202      	movs	r2, #2
 8002a48:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	2210      	movs	r2, #16
 8002a54:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	2202      	movs	r2, #2
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	2200      	movs	r2, #0
 8002a60:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	2280      	movs	r2, #128	; 0x80
 8002a66:	0312      	lsls	r2, r2, #12
 8002a68:	631a      	str	r2, [r3, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	0412      	lsls	r2, r2, #16
 8002a70:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002a72:	187b      	adds	r3, r7, r1
 8002a74:	0018      	movs	r0, r3
 8002a76:	f000 fd93 	bl	80035a0 <HAL_RCC_OscConfig>
 8002a7a:	1e03      	subs	r3, r0, #0
 8002a7c:	d001      	beq.n	8002a82 <SystemClock_Config+0x86>
		Error_Handler();
 8002a7e:	f000 f915 	bl	8002cac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002a82:	2124      	movs	r1, #36	; 0x24
 8002a84:	187b      	adds	r3, r7, r1
 8002a86:	220f      	movs	r2, #15
 8002a88:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a9c:	187b      	adds	r3, r7, r1
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002aa2:	187b      	adds	r3, r7, r1
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f001 f94e 	bl	8003d48 <HAL_RCC_ClockConfig>
 8002aac:	1e03      	subs	r3, r0, #0
 8002aae:	d001      	beq.n	8002ab4 <SystemClock_Config+0xb8>
		Error_Handler();
 8002ab0:	f000 f8fc 	bl	8002cac <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ab4:	003b      	movs	r3, r7
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002aba:	003b      	movs	r3, r7
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002ac0:	003b      	movs	r3, r7
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f001 fb64 	bl	8004190 <HAL_RCCEx_PeriphCLKConfig>
 8002ac8:	1e03      	subs	r3, r0, #0
 8002aca:	d001      	beq.n	8002ad0 <SystemClock_Config+0xd4>
		Error_Handler();
 8002acc:	f000 f8ee 	bl	8002cac <Error_Handler>
	}
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b01d      	add	sp, #116	; 0x74
 8002ad6:	bd90      	pop	{r4, r7, pc}
 8002ad8:	40007000 	.word	0x40007000
 8002adc:	ffffe7ff 	.word	0xffffe7ff

08002ae0 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	18fb      	adds	r3, r7, r3
 8002aea:	0018      	movs	r0, r3
 8002aec:	2310      	movs	r3, #16
 8002aee:	001a      	movs	r2, r3
 8002af0:	2100      	movs	r1, #0
 8002af2:	f002 fcf9 	bl	80054e8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002af6:	003b      	movs	r3, r7
 8002af8:	0018      	movs	r0, r3
 8002afa:	2308      	movs	r3, #8
 8002afc:	001a      	movs	r2, r3
 8002afe:	2100      	movs	r1, #0
 8002b00:	f002 fcf2 	bl	80054e8 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002b04:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <MX_TIM2_Init+0xa0>)
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	05d2      	lsls	r2, r2, #23
 8002b0a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <MX_TIM2_Init+0xa0>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b12:	4b1b      	ldr	r3, [pc, #108]	; (8002b80 <MX_TIM2_Init+0xa0>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <MX_TIM2_Init+0xa0>)
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <MX_TIM2_Init+0xa4>)
 8002b1c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b1e:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <MX_TIM2_Init+0xa0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b24:	4b16      	ldr	r3, [pc, #88]	; (8002b80 <MX_TIM2_Init+0xa0>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <MX_TIM2_Init+0xa0>)
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f001 fc8b 	bl	8004448 <HAL_TIM_Base_Init>
 8002b32:	1e03      	subs	r3, r0, #0
 8002b34:	d001      	beq.n	8002b3a <MX_TIM2_Init+0x5a>
		Error_Handler();
 8002b36:	f000 f8b9 	bl	8002cac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b3a:	2108      	movs	r1, #8
 8002b3c:	187b      	adds	r3, r7, r1
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	0152      	lsls	r2, r2, #5
 8002b42:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002b44:	187a      	adds	r2, r7, r1
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <MX_TIM2_Init+0xa0>)
 8002b48:	0011      	movs	r1, r2
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f001 fcbc 	bl	80044c8 <HAL_TIM_ConfigClockSource>
 8002b50:	1e03      	subs	r3, r0, #0
 8002b52:	d001      	beq.n	8002b58 <MX_TIM2_Init+0x78>
		Error_Handler();
 8002b54:	f000 f8aa 	bl	8002cac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b58:	003b      	movs	r3, r7
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b5e:	003b      	movs	r3, r7
 8002b60:	2200      	movs	r2, #0
 8002b62:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002b64:	003a      	movs	r2, r7
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <MX_TIM2_Init+0xa0>)
 8002b68:	0011      	movs	r1, r2
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f001 fe78 	bl	8004860 <HAL_TIMEx_MasterConfigSynchronization>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM2_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8002b74:	f000 f89a 	bl	8002cac <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002b78:	46c0      	nop			; (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b006      	add	sp, #24
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	200001f8 	.word	0x200001f8
 8002b84:	0000ffff 	.word	0x0000ffff

08002b88 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <MX_USART2_UART_Init+0x58>)
 8002b8e:	4a15      	ldr	r2, [pc, #84]	; (8002be4 <MX_USART2_UART_Init+0x5c>)
 8002b90:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002b92:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <MX_USART2_UART_Init+0x58>)
 8002b94:	22e1      	movs	r2, #225	; 0xe1
 8002b96:	0252      	lsls	r2, r2, #9
 8002b98:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <MX_USART2_UART_Init+0x58>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <MX_USART2_UART_Init+0x58>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <MX_USART2_UART_Init+0x58>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <MX_USART2_UART_Init+0x58>)
 8002bae:	220c      	movs	r2, #12
 8002bb0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bb2:	4b0b      	ldr	r3, [pc, #44]	; (8002be0 <MX_USART2_UART_Init+0x58>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb8:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <MX_USART2_UART_Init+0x58>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bbe:	4b08      	ldr	r3, [pc, #32]	; (8002be0 <MX_USART2_UART_Init+0x58>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <MX_USART2_UART_Init+0x58>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <MX_USART2_UART_Init+0x58>)
 8002bcc:	0018      	movs	r0, r3
 8002bce:	f001 fea5 	bl	800491c <HAL_UART_Init>
 8002bd2:	1e03      	subs	r3, r0, #0
 8002bd4:	d001      	beq.n	8002bda <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8002bd6:	f000 f869 	bl	8002cac <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000238 	.word	0x20000238
 8002be4:	40004400 	.word	0x40004400

08002be8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b089      	sub	sp, #36	; 0x24
 8002bec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002bee:	240c      	movs	r4, #12
 8002bf0:	193b      	adds	r3, r7, r4
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	2314      	movs	r3, #20
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	f002 fc75 	bl	80054e8 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <MX_GPIO_Init+0xbc>)
 8002c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c02:	4b28      	ldr	r3, [pc, #160]	; (8002ca4 <MX_GPIO_Init+0xbc>)
 8002c04:	2101      	movs	r1, #1
 8002c06:	430a      	orrs	r2, r1
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c0a:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <MX_GPIO_Init+0xbc>)
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c16:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <MX_GPIO_Init+0xbc>)
 8002c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <MX_GPIO_Init+0xbc>)
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c22:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <MX_GPIO_Init+0xbc>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	2202      	movs	r2, #2
 8002c28:	4013      	ands	r3, r2
 8002c2a:	607b      	str	r3, [r7, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002c2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <MX_GPIO_Init+0xbc>)
 8002c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <MX_GPIO_Init+0xbc>)
 8002c34:	2180      	movs	r1, #128	; 0x80
 8002c36:	430a      	orrs	r2, r1
 8002c38:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <MX_GPIO_Init+0xbc>)
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	4013      	ands	r3, r2
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4817      	ldr	r0, [pc, #92]	; (8002ca8 <MX_GPIO_Init+0xc0>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	0019      	movs	r1, r3
 8002c50:	f000 fc89 	bl	8003566 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c54:	193b      	adds	r3, r7, r4
 8002c56:	2280      	movs	r2, #128	; 0x80
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5c:	193b      	adds	r3, r7, r4
 8002c5e:	2201      	movs	r2, #1
 8002c60:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	193b      	adds	r3, r7, r4
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6e:	193b      	adds	r3, r7, r4
 8002c70:	4a0d      	ldr	r2, [pc, #52]	; (8002ca8 <MX_GPIO_Init+0xc0>)
 8002c72:	0019      	movs	r1, r3
 8002c74:	0010      	movs	r0, r2
 8002c76:	f000 fadb 	bl	8003230 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c7a:	0021      	movs	r1, r4
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	2280      	movs	r2, #128	; 0x80
 8002c80:	0052      	lsls	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c84:	187b      	adds	r3, r7, r1
 8002c86:	2200      	movs	r2, #0
 8002c88:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	187b      	adds	r3, r7, r1
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c90:	187b      	adds	r3, r7, r1
 8002c92:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <MX_GPIO_Init+0xc0>)
 8002c94:	0019      	movs	r1, r3
 8002c96:	0010      	movs	r0, r2
 8002c98:	f000 faca 	bl	8003230 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b009      	add	sp, #36	; 0x24
 8002ca2:	bd90      	pop	{r4, r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	50000400 	.word	0x50000400

08002cac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb0:	b672      	cpsid	i
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002cb4:	e7fe      	b.n	8002cb4 <Error_Handler+0x8>
	...

08002cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cbc:	4b07      	ldr	r3, [pc, #28]	; (8002cdc <HAL_MspInit+0x24>)
 8002cbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_MspInit+0x24>)
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc8:	4b04      	ldr	r3, [pc, #16]	; (8002cdc <HAL_MspInit+0x24>)
 8002cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_MspInit+0x24>)
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	0549      	lsls	r1, r1, #21
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	05db      	lsls	r3, r3, #23
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d105      	bne.n	8002d00 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <HAL_TIM_Base_MspInit+0x28>)
 8002cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf8:	4b03      	ldr	r3, [pc, #12]	; (8002d08 <HAL_TIM_Base_MspInit+0x28>)
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	40021000 	.word	0x40021000

08002d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	240c      	movs	r4, #12
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	0018      	movs	r0, r3
 8002d1a:	2314      	movs	r3, #20
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	2100      	movs	r1, #0
 8002d20:	f002 fbe2 	bl	80054e8 <memset>
  if(huart->Instance==USART2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a18      	ldr	r2, [pc, #96]	; (8002d8c <HAL_UART_MspInit+0x80>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d129      	bne.n	8002d82 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d2e:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <HAL_UART_MspInit+0x84>)
 8002d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d32:	4b17      	ldr	r3, [pc, #92]	; (8002d90 <HAL_UART_MspInit+0x84>)
 8002d34:	2180      	movs	r1, #128	; 0x80
 8002d36:	0289      	lsls	r1, r1, #10
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <HAL_UART_MspInit+0x84>)
 8002d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d40:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_UART_MspInit+0x84>)
 8002d42:	2101      	movs	r1, #1
 8002d44:	430a      	orrs	r2, r1
 8002d46:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_UART_MspInit+0x84>)
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4013      	ands	r3, r2
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA15     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_2;
 8002d54:	0021      	movs	r1, r4
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	4a0e      	ldr	r2, [pc, #56]	; (8002d94 <HAL_UART_MspInit+0x88>)
 8002d5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	187b      	adds	r3, r7, r1
 8002d5e:	2202      	movs	r2, #2
 8002d60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	187b      	adds	r3, r7, r1
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002d6e:	187b      	adds	r3, r7, r1
 8002d70:	2204      	movs	r2, #4
 8002d72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d74:	187a      	adds	r2, r7, r1
 8002d76:	23a0      	movs	r3, #160	; 0xa0
 8002d78:	05db      	lsls	r3, r3, #23
 8002d7a:	0011      	movs	r1, r2
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f000 fa57 	bl	8003230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b009      	add	sp, #36	; 0x24
 8002d88:	bd90      	pop	{r4, r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	40004400 	.word	0x40004400
 8002d90:	40021000 	.word	0x40021000
 8002d94:	00008004 	.word	0x00008004

08002d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d9c:	e7fe      	b.n	8002d9c <NMI_Handler+0x4>

08002d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da2:	e7fe      	b.n	8002da2 <HardFault_Handler+0x4>

08002da4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002da8:	46c0      	nop			; (mov r8, r8)
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dbc:	f000 f944 	bl	8003048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	af00      	add	r7, sp, #0
  return 1;
 8002dca:	2301      	movs	r3, #1
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_kill>:

int _kill(int pid, int sig)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ddc:	f002 fb5a 	bl	8005494 <__errno>
 8002de0:	0003      	movs	r3, r0
 8002de2:	2216      	movs	r2, #22
 8002de4:	601a      	str	r2, [r3, #0]
  return -1;
 8002de6:	2301      	movs	r3, #1
 8002de8:	425b      	negs	r3, r3
}
 8002dea:	0018      	movs	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b002      	add	sp, #8
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_exit>:

void _exit (int status)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	425a      	negs	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	0011      	movs	r1, r2
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7ff ffe5 	bl	8002dd2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e08:	e7fe      	b.n	8002e08 <_exit+0x16>

08002e0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e16:	2300      	movs	r3, #0
 8002e18:	617b      	str	r3, [r7, #20]
 8002e1a:	e00a      	b.n	8002e32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e1c:	e000      	b.n	8002e20 <_read+0x16>
 8002e1e:	bf00      	nop
 8002e20:	0001      	movs	r1, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	60ba      	str	r2, [r7, #8]
 8002e28:	b2ca      	uxtb	r2, r1
 8002e2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	dbf0      	blt.n	8002e1c <_read+0x12>
  }

  return len;
 8002e3a:	687b      	ldr	r3, [r7, #4]
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b006      	add	sp, #24
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e009      	b.n	8002e6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	1c5a      	adds	r2, r3, #1
 8002e5a:	60ba      	str	r2, [r7, #8]
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	e000      	b.n	8002e64 <_write+0x20>
 8002e62:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	3301      	adds	r3, #1
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	dbf1      	blt.n	8002e56 <_write+0x12>
  }
  return len;
 8002e72:	687b      	ldr	r3, [r7, #4]
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b006      	add	sp, #24
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_close>:

int _close(int file)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e84:	2301      	movs	r3, #1
 8002e86:	425b      	negs	r3, r3
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2280      	movs	r2, #128	; 0x80
 8002e9e:	0192      	lsls	r2, r2, #6
 8002ea0:	605a      	str	r2, [r3, #4]
  return 0;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <_isatty>:

int _isatty(int file)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002eb4:	2301      	movs	r3, #1
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b002      	add	sp, #8
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b004      	add	sp, #16
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002edc:	4a14      	ldr	r2, [pc, #80]	; (8002f30 <_sbrk+0x5c>)
 8002ede:	4b15      	ldr	r3, [pc, #84]	; (8002f34 <_sbrk+0x60>)
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <_sbrk+0x64>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <_sbrk+0x64>)
 8002ef2:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <_sbrk+0x68>)
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <_sbrk+0x64>)
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	18d3      	adds	r3, r2, r3
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d207      	bcs.n	8002f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f04:	f002 fac6 	bl	8005494 <__errno>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	220c      	movs	r2, #12
 8002f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	425b      	negs	r3, r3
 8002f12:	e009      	b.n	8002f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f14:	4b08      	ldr	r3, [pc, #32]	; (8002f38 <_sbrk+0x64>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f1a:	4b07      	ldr	r3, [pc, #28]	; (8002f38 <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	18d2      	adds	r2, r2, r3
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <_sbrk+0x64>)
 8002f24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002f26:	68fb      	ldr	r3, [r7, #12]
}
 8002f28:	0018      	movs	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	b006      	add	sp, #24
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	20005000 	.word	0x20005000
 8002f34:	00000400 	.word	0x00000400
 8002f38:	20000328 	.word	0x20000328
 8002f3c:	20000340 	.word	0x20000340

08002f40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f44:	46c0      	nop			; (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002f4c:	480d      	ldr	r0, [pc, #52]	; (8002f84 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002f4e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f50:	f7ff fff6 	bl	8002f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f54:	480c      	ldr	r0, [pc, #48]	; (8002f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8002f56:	490d      	ldr	r1, [pc, #52]	; (8002f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f58:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <LoopForever+0xe>)
  movs r3, #0
 8002f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f5c:	e002      	b.n	8002f64 <LoopCopyDataInit>

08002f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f62:	3304      	adds	r3, #4

08002f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f68:	d3f9      	bcc.n	8002f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6a:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f6c:	4c0a      	ldr	r4, [pc, #40]	; (8002f98 <LoopForever+0x16>)
  movs r3, #0
 8002f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f70:	e001      	b.n	8002f76 <LoopFillZerobss>

08002f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f74:	3204      	adds	r2, #4

08002f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f78:	d3fb      	bcc.n	8002f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f7a:	f002 fa91 	bl	80054a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f7e:	f7ff fc6d 	bl	800285c <main>

08002f82 <LoopForever>:

LoopForever:
    b LoopForever
 8002f82:	e7fe      	b.n	8002f82 <LoopForever>
   ldr   r0, =_estack
 8002f84:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f8c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002f90:	08008934 	.word	0x08008934
  ldr r2, =_sbss
 8002f94:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002f98:	20000340 	.word	0x20000340

08002f9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f9c:	e7fe      	b.n	8002f9c <ADC1_COMP_IRQHandler>
	...

08002fa0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002fa6:	1dfb      	adds	r3, r7, #7
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_Init+0x3c>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	4b0a      	ldr	r3, [pc, #40]	; (8002fdc <HAL_Init+0x3c>)
 8002fb2:	2140      	movs	r1, #64	; 0x40
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f000 f811 	bl	8002fe0 <HAL_InitTick>
 8002fbe:	1e03      	subs	r3, r0, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
 8002fc8:	e001      	b.n	8002fce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fca:	f7ff fe75 	bl	8002cb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fce:	1dfb      	adds	r3, r7, #7
 8002fd0:	781b      	ldrb	r3, [r3, #0]
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b002      	add	sp, #8
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	40022000 	.word	0x40022000

08002fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fe0:	b590      	push	{r4, r7, lr}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <HAL_InitTick+0x5c>)
 8002fea:	681c      	ldr	r4, [r3, #0]
 8002fec:	4b14      	ldr	r3, [pc, #80]	; (8003040 <HAL_InitTick+0x60>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	23fa      	movs	r3, #250	; 0xfa
 8002ff4:	0098      	lsls	r0, r3, #2
 8002ff6:	f7fd f8a3 	bl	8000140 <__udivsi3>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	0020      	movs	r0, r4
 8003000:	f7fd f89e 	bl	8000140 <__udivsi3>
 8003004:	0003      	movs	r3, r0
 8003006:	0018      	movs	r0, r3
 8003008:	f000 f905 	bl	8003216 <HAL_SYSTICK_Config>
 800300c:	1e03      	subs	r3, r0, #0
 800300e:	d001      	beq.n	8003014 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e00f      	b.n	8003034 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d80b      	bhi.n	8003032 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	2301      	movs	r3, #1
 800301e:	425b      	negs	r3, r3
 8003020:	2200      	movs	r2, #0
 8003022:	0018      	movs	r0, r3
 8003024:	f000 f8e2 	bl	80031ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <HAL_InitTick+0x64>)
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	e000      	b.n	8003034 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
}
 8003034:	0018      	movs	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	b003      	add	sp, #12
 800303a:	bd90      	pop	{r4, r7, pc}
 800303c:	20000000 	.word	0x20000000
 8003040:	20000008 	.word	0x20000008
 8003044:	20000004 	.word	0x20000004

08003048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_IncTick+0x1c>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	001a      	movs	r2, r3
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_IncTick+0x20>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	18d2      	adds	r2, r2, r3
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <HAL_IncTick+0x20>)
 800305a:	601a      	str	r2, [r3, #0]
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	20000008 	.word	0x20000008
 8003068:	2000032c 	.word	0x2000032c

0800306c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  return uwTick;
 8003070:	4b02      	ldr	r3, [pc, #8]	; (800307c <HAL_GetTick+0x10>)
 8003072:	681b      	ldr	r3, [r3, #0]
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	2000032c 	.word	0x2000032c

08003080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003088:	f7ff fff0 	bl	800306c <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	3301      	adds	r3, #1
 8003098:	d005      	beq.n	80030a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800309a:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <HAL_Delay+0x44>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	001a      	movs	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	189b      	adds	r3, r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	f7ff ffe0 	bl	800306c <HAL_GetTick>
 80030ac:	0002      	movs	r2, r0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	68fa      	ldr	r2, [r7, #12]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d8f7      	bhi.n	80030a8 <HAL_Delay+0x28>
  {
  }
}
 80030b8:	46c0      	nop			; (mov r8, r8)
 80030ba:	46c0      	nop			; (mov r8, r8)
 80030bc:	46bd      	mov	sp, r7
 80030be:	b004      	add	sp, #16
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	20000008 	.word	0x20000008

080030c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c8:	b590      	push	{r4, r7, lr}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	0002      	movs	r2, r0
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	1dfb      	adds	r3, r7, #7
 80030d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80030d6:	1dfb      	adds	r3, r7, #7
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b7f      	cmp	r3, #127	; 0x7f
 80030dc:	d828      	bhi.n	8003130 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030de:	4a2f      	ldr	r2, [pc, #188]	; (800319c <__NVIC_SetPriority+0xd4>)
 80030e0:	1dfb      	adds	r3, r7, #7
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	b25b      	sxtb	r3, r3
 80030e6:	089b      	lsrs	r3, r3, #2
 80030e8:	33c0      	adds	r3, #192	; 0xc0
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	589b      	ldr	r3, [r3, r2]
 80030ee:	1dfa      	adds	r2, r7, #7
 80030f0:	7812      	ldrb	r2, [r2, #0]
 80030f2:	0011      	movs	r1, r2
 80030f4:	2203      	movs	r2, #3
 80030f6:	400a      	ands	r2, r1
 80030f8:	00d2      	lsls	r2, r2, #3
 80030fa:	21ff      	movs	r1, #255	; 0xff
 80030fc:	4091      	lsls	r1, r2
 80030fe:	000a      	movs	r2, r1
 8003100:	43d2      	mvns	r2, r2
 8003102:	401a      	ands	r2, r3
 8003104:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	019b      	lsls	r3, r3, #6
 800310a:	22ff      	movs	r2, #255	; 0xff
 800310c:	401a      	ands	r2, r3
 800310e:	1dfb      	adds	r3, r7, #7
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	0018      	movs	r0, r3
 8003114:	2303      	movs	r3, #3
 8003116:	4003      	ands	r3, r0
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800311c:	481f      	ldr	r0, [pc, #124]	; (800319c <__NVIC_SetPriority+0xd4>)
 800311e:	1dfb      	adds	r3, r7, #7
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	b25b      	sxtb	r3, r3
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	430a      	orrs	r2, r1
 8003128:	33c0      	adds	r3, #192	; 0xc0
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800312e:	e031      	b.n	8003194 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003130:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <__NVIC_SetPriority+0xd8>)
 8003132:	1dfb      	adds	r3, r7, #7
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	0019      	movs	r1, r3
 8003138:	230f      	movs	r3, #15
 800313a:	400b      	ands	r3, r1
 800313c:	3b08      	subs	r3, #8
 800313e:	089b      	lsrs	r3, r3, #2
 8003140:	3306      	adds	r3, #6
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	18d3      	adds	r3, r2, r3
 8003146:	3304      	adds	r3, #4
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	1dfa      	adds	r2, r7, #7
 800314c:	7812      	ldrb	r2, [r2, #0]
 800314e:	0011      	movs	r1, r2
 8003150:	2203      	movs	r2, #3
 8003152:	400a      	ands	r2, r1
 8003154:	00d2      	lsls	r2, r2, #3
 8003156:	21ff      	movs	r1, #255	; 0xff
 8003158:	4091      	lsls	r1, r2
 800315a:	000a      	movs	r2, r1
 800315c:	43d2      	mvns	r2, r2
 800315e:	401a      	ands	r2, r3
 8003160:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	019b      	lsls	r3, r3, #6
 8003166:	22ff      	movs	r2, #255	; 0xff
 8003168:	401a      	ands	r2, r3
 800316a:	1dfb      	adds	r3, r7, #7
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	0018      	movs	r0, r3
 8003170:	2303      	movs	r3, #3
 8003172:	4003      	ands	r3, r0
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003178:	4809      	ldr	r0, [pc, #36]	; (80031a0 <__NVIC_SetPriority+0xd8>)
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	001c      	movs	r4, r3
 8003180:	230f      	movs	r3, #15
 8003182:	4023      	ands	r3, r4
 8003184:	3b08      	subs	r3, #8
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	430a      	orrs	r2, r1
 800318a:	3306      	adds	r3, #6
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	18c3      	adds	r3, r0, r3
 8003190:	3304      	adds	r3, #4
 8003192:	601a      	str	r2, [r3, #0]
}
 8003194:	46c0      	nop			; (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b003      	add	sp, #12
 800319a:	bd90      	pop	{r4, r7, pc}
 800319c:	e000e100 	.word	0xe000e100
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	1e5a      	subs	r2, r3, #1
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	045b      	lsls	r3, r3, #17
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d301      	bcc.n	80031bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b8:	2301      	movs	r3, #1
 80031ba:	e010      	b.n	80031de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031bc:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <SysTick_Config+0x44>)
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	3a01      	subs	r2, #1
 80031c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c4:	2301      	movs	r3, #1
 80031c6:	425b      	negs	r3, r3
 80031c8:	2103      	movs	r1, #3
 80031ca:	0018      	movs	r0, r3
 80031cc:	f7ff ff7c 	bl	80030c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <SysTick_Config+0x44>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d6:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <SysTick_Config+0x44>)
 80031d8:	2207      	movs	r2, #7
 80031da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031dc:	2300      	movs	r3, #0
}
 80031de:	0018      	movs	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	b002      	add	sp, #8
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	e000e010 	.word	0xe000e010

080031ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	210f      	movs	r1, #15
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	1c02      	adds	r2, r0, #0
 80031fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	187b      	adds	r3, r7, r1
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b25b      	sxtb	r3, r3
 8003206:	0011      	movs	r1, r2
 8003208:	0018      	movs	r0, r3
 800320a:	f7ff ff5d 	bl	80030c8 <__NVIC_SetPriority>
}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	b004      	add	sp, #16
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	0018      	movs	r0, r3
 8003222:	f7ff ffbf 	bl	80031a4 <SysTick_Config>
 8003226:	0003      	movs	r3, r0
}
 8003228:	0018      	movs	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	b002      	add	sp, #8
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800323e:	2300      	movs	r3, #0
 8003240:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003246:	e155      	b.n	80034f4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2101      	movs	r1, #1
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4091      	lsls	r1, r2
 8003252:	000a      	movs	r2, r1
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d100      	bne.n	8003260 <HAL_GPIO_Init+0x30>
 800325e:	e146      	b.n	80034ee <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2203      	movs	r2, #3
 8003266:	4013      	ands	r3, r2
 8003268:	2b01      	cmp	r3, #1
 800326a:	d005      	beq.n	8003278 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2203      	movs	r2, #3
 8003272:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003274:	2b02      	cmp	r3, #2
 8003276:	d130      	bne.n	80032da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	2203      	movs	r2, #3
 8003284:	409a      	lsls	r2, r3
 8003286:	0013      	movs	r3, r2
 8003288:	43da      	mvns	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4013      	ands	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	409a      	lsls	r2, r3
 800329a:	0013      	movs	r3, r2
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ae:	2201      	movs	r2, #1
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	409a      	lsls	r2, r3
 80032b4:	0013      	movs	r3, r2
 80032b6:	43da      	mvns	r2, r3
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	2201      	movs	r2, #1
 80032c6:	401a      	ands	r2, r3
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	409a      	lsls	r2, r3
 80032cc:	0013      	movs	r3, r2
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2203      	movs	r2, #3
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d017      	beq.n	8003316 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	2203      	movs	r2, #3
 80032f2:	409a      	lsls	r2, r3
 80032f4:	0013      	movs	r3, r2
 80032f6:	43da      	mvns	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	689a      	ldr	r2, [r3, #8]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	409a      	lsls	r2, r3
 8003308:	0013      	movs	r3, r2
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2203      	movs	r2, #3
 800331c:	4013      	ands	r3, r2
 800331e:	2b02      	cmp	r3, #2
 8003320:	d123      	bne.n	800336a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	08da      	lsrs	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3208      	adds	r2, #8
 800332a:	0092      	lsls	r2, r2, #2
 800332c:	58d3      	ldr	r3, [r2, r3]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2207      	movs	r2, #7
 8003334:	4013      	ands	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	220f      	movs	r2, #15
 800333a:	409a      	lsls	r2, r3
 800333c:	0013      	movs	r3, r2
 800333e:	43da      	mvns	r2, r3
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	4013      	ands	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2107      	movs	r1, #7
 800334e:	400b      	ands	r3, r1
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	409a      	lsls	r2, r3
 8003354:	0013      	movs	r3, r2
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	08da      	lsrs	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3208      	adds	r2, #8
 8003364:	0092      	lsls	r2, r2, #2
 8003366:	6939      	ldr	r1, [r7, #16]
 8003368:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	2203      	movs	r2, #3
 8003376:	409a      	lsls	r2, r3
 8003378:	0013      	movs	r3, r2
 800337a:	43da      	mvns	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2203      	movs	r2, #3
 8003388:	401a      	ands	r2, r3
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	409a      	lsls	r2, r3
 8003390:	0013      	movs	r3, r2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	23c0      	movs	r3, #192	; 0xc0
 80033a4:	029b      	lsls	r3, r3, #10
 80033a6:	4013      	ands	r3, r2
 80033a8:	d100      	bne.n	80033ac <HAL_GPIO_Init+0x17c>
 80033aa:	e0a0      	b.n	80034ee <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ac:	4b57      	ldr	r3, [pc, #348]	; (800350c <HAL_GPIO_Init+0x2dc>)
 80033ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033b0:	4b56      	ldr	r3, [pc, #344]	; (800350c <HAL_GPIO_Init+0x2dc>)
 80033b2:	2101      	movs	r1, #1
 80033b4:	430a      	orrs	r2, r1
 80033b6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80033b8:	4a55      	ldr	r2, [pc, #340]	; (8003510 <HAL_GPIO_Init+0x2e0>)
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	3302      	adds	r3, #2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	589b      	ldr	r3, [r3, r2]
 80033c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2203      	movs	r2, #3
 80033ca:	4013      	ands	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	220f      	movs	r2, #15
 80033d0:	409a      	lsls	r2, r3
 80033d2:	0013      	movs	r3, r2
 80033d4:	43da      	mvns	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4013      	ands	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	23a0      	movs	r3, #160	; 0xa0
 80033e0:	05db      	lsls	r3, r3, #23
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d01f      	beq.n	8003426 <HAL_GPIO_Init+0x1f6>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a4a      	ldr	r2, [pc, #296]	; (8003514 <HAL_GPIO_Init+0x2e4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d019      	beq.n	8003422 <HAL_GPIO_Init+0x1f2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a49      	ldr	r2, [pc, #292]	; (8003518 <HAL_GPIO_Init+0x2e8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d013      	beq.n	800341e <HAL_GPIO_Init+0x1ee>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a48      	ldr	r2, [pc, #288]	; (800351c <HAL_GPIO_Init+0x2ec>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d00d      	beq.n	800341a <HAL_GPIO_Init+0x1ea>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a47      	ldr	r2, [pc, #284]	; (8003520 <HAL_GPIO_Init+0x2f0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d007      	beq.n	8003416 <HAL_GPIO_Init+0x1e6>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a46      	ldr	r2, [pc, #280]	; (8003524 <HAL_GPIO_Init+0x2f4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_GPIO_Init+0x1e2>
 800340e:	2305      	movs	r3, #5
 8003410:	e00a      	b.n	8003428 <HAL_GPIO_Init+0x1f8>
 8003412:	2306      	movs	r3, #6
 8003414:	e008      	b.n	8003428 <HAL_GPIO_Init+0x1f8>
 8003416:	2304      	movs	r3, #4
 8003418:	e006      	b.n	8003428 <HAL_GPIO_Init+0x1f8>
 800341a:	2303      	movs	r3, #3
 800341c:	e004      	b.n	8003428 <HAL_GPIO_Init+0x1f8>
 800341e:	2302      	movs	r3, #2
 8003420:	e002      	b.n	8003428 <HAL_GPIO_Init+0x1f8>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_GPIO_Init+0x1f8>
 8003426:	2300      	movs	r3, #0
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	2103      	movs	r1, #3
 800342c:	400a      	ands	r2, r1
 800342e:	0092      	lsls	r2, r2, #2
 8003430:	4093      	lsls	r3, r2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003438:	4935      	ldr	r1, [pc, #212]	; (8003510 <HAL_GPIO_Init+0x2e0>)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	3302      	adds	r3, #2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003446:	4b38      	ldr	r3, [pc, #224]	; (8003528 <HAL_GPIO_Init+0x2f8>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	43da      	mvns	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	035b      	lsls	r3, r3, #13
 800345e:	4013      	ands	r3, r2
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800346a:	4b2f      	ldr	r3, [pc, #188]	; (8003528 <HAL_GPIO_Init+0x2f8>)
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_GPIO_Init+0x2f8>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	43da      	mvns	r2, r3
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4013      	ands	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	2380      	movs	r3, #128	; 0x80
 8003486:	039b      	lsls	r3, r3, #14
 8003488:	4013      	ands	r3, r2
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <HAL_GPIO_Init+0x2f8>)
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800349a:	4b23      	ldr	r3, [pc, #140]	; (8003528 <HAL_GPIO_Init+0x2f8>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43da      	mvns	r2, r3
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	029b      	lsls	r3, r3, #10
 80034b2:	4013      	ands	r3, r2
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <HAL_GPIO_Init+0x2f8>)
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c4:	4b18      	ldr	r3, [pc, #96]	; (8003528 <HAL_GPIO_Init+0x2f8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	43da      	mvns	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4013      	ands	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	2380      	movs	r3, #128	; 0x80
 80034da:	025b      	lsls	r3, r3, #9
 80034dc:	4013      	ands	r3, r2
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034e8:	4b0f      	ldr	r3, [pc, #60]	; (8003528 <HAL_GPIO_Init+0x2f8>)
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	3301      	adds	r3, #1
 80034f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	40da      	lsrs	r2, r3
 80034fc:	1e13      	subs	r3, r2, #0
 80034fe:	d000      	beq.n	8003502 <HAL_GPIO_Init+0x2d2>
 8003500:	e6a2      	b.n	8003248 <HAL_GPIO_Init+0x18>
  }
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b006      	add	sp, #24
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000
 8003510:	40010000 	.word	0x40010000
 8003514:	50000400 	.word	0x50000400
 8003518:	50000800 	.word	0x50000800
 800351c:	50000c00 	.word	0x50000c00
 8003520:	50001000 	.word	0x50001000
 8003524:	50001c00 	.word	0x50001c00
 8003528:	40010400 	.word	0x40010400

0800352c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	000a      	movs	r2, r1
 8003536:	1cbb      	adds	r3, r7, #2
 8003538:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	1cba      	adds	r2, r7, #2
 8003540:	8812      	ldrh	r2, [r2, #0]
 8003542:	4013      	ands	r3, r2
 8003544:	d004      	beq.n	8003550 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003546:	230f      	movs	r3, #15
 8003548:	18fb      	adds	r3, r7, r3
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
 800354e:	e003      	b.n	8003558 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003550:	230f      	movs	r3, #15
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003558:	230f      	movs	r3, #15
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	781b      	ldrb	r3, [r3, #0]
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b004      	add	sp, #16
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	0008      	movs	r0, r1
 8003570:	0011      	movs	r1, r2
 8003572:	1cbb      	adds	r3, r7, #2
 8003574:	1c02      	adds	r2, r0, #0
 8003576:	801a      	strh	r2, [r3, #0]
 8003578:	1c7b      	adds	r3, r7, #1
 800357a:	1c0a      	adds	r2, r1, #0
 800357c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800357e:	1c7b      	adds	r3, r7, #1
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d004      	beq.n	8003590 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003586:	1cbb      	adds	r3, r7, #2
 8003588:	881a      	ldrh	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800358e:	e003      	b.n	8003598 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003590:	1cbb      	adds	r3, r7, #2
 8003592:	881a      	ldrh	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003598:	46c0      	nop			; (mov r8, r8)
 800359a:	46bd      	mov	sp, r7
 800359c:	b002      	add	sp, #8
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d102      	bne.n	80035b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f000 fbbf 	bl	8003d32 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035b4:	4bc9      	ldr	r3, [pc, #804]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	220c      	movs	r2, #12
 80035ba:	4013      	ands	r3, r2
 80035bc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035be:	4bc7      	ldr	r3, [pc, #796]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	025b      	lsls	r3, r3, #9
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2201      	movs	r2, #1
 80035d0:	4013      	ands	r3, r2
 80035d2:	d100      	bne.n	80035d6 <HAL_RCC_OscConfig+0x36>
 80035d4:	e07e      	b.n	80036d4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d007      	beq.n	80035ec <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	2b0c      	cmp	r3, #12
 80035e0:	d112      	bne.n	8003608 <HAL_RCC_OscConfig+0x68>
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	2380      	movs	r3, #128	; 0x80
 80035e6:	025b      	lsls	r3, r3, #9
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d10d      	bne.n	8003608 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	4bbb      	ldr	r3, [pc, #748]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	029b      	lsls	r3, r3, #10
 80035f4:	4013      	ands	r3, r2
 80035f6:	d100      	bne.n	80035fa <HAL_RCC_OscConfig+0x5a>
 80035f8:	e06b      	b.n	80036d2 <HAL_RCC_OscConfig+0x132>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d167      	bne.n	80036d2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f000 fb95 	bl	8003d32 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	025b      	lsls	r3, r3, #9
 8003610:	429a      	cmp	r2, r3
 8003612:	d107      	bne.n	8003624 <HAL_RCC_OscConfig+0x84>
 8003614:	4bb1      	ldr	r3, [pc, #708]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	4bb0      	ldr	r3, [pc, #704]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	0249      	lsls	r1, r1, #9
 800361e:	430a      	orrs	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e027      	b.n	8003674 <HAL_RCC_OscConfig+0xd4>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	23a0      	movs	r3, #160	; 0xa0
 800362a:	02db      	lsls	r3, r3, #11
 800362c:	429a      	cmp	r2, r3
 800362e:	d10e      	bne.n	800364e <HAL_RCC_OscConfig+0xae>
 8003630:	4baa      	ldr	r3, [pc, #680]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	4ba9      	ldr	r3, [pc, #676]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003636:	2180      	movs	r1, #128	; 0x80
 8003638:	02c9      	lsls	r1, r1, #11
 800363a:	430a      	orrs	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	4ba7      	ldr	r3, [pc, #668]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4ba6      	ldr	r3, [pc, #664]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	0249      	lsls	r1, r1, #9
 8003648:	430a      	orrs	r2, r1
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e012      	b.n	8003674 <HAL_RCC_OscConfig+0xd4>
 800364e:	4ba3      	ldr	r3, [pc, #652]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	4ba2      	ldr	r3, [pc, #648]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003654:	49a2      	ldr	r1, [pc, #648]	; (80038e0 <HAL_RCC_OscConfig+0x340>)
 8003656:	400a      	ands	r2, r1
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	4ba0      	ldr	r3, [pc, #640]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	025b      	lsls	r3, r3, #9
 8003662:	4013      	ands	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4b9c      	ldr	r3, [pc, #624]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	4b9b      	ldr	r3, [pc, #620]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 800366e:	499d      	ldr	r1, [pc, #628]	; (80038e4 <HAL_RCC_OscConfig+0x344>)
 8003670:	400a      	ands	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d015      	beq.n	80036a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7ff fcf6 	bl	800306c <HAL_GetTick>
 8003680:	0003      	movs	r3, r0
 8003682:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003684:	e009      	b.n	800369a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003686:	f7ff fcf1 	bl	800306c <HAL_GetTick>
 800368a:	0002      	movs	r2, r0
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b64      	cmp	r3, #100	; 0x64
 8003692:	d902      	bls.n	800369a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	f000 fb4c 	bl	8003d32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800369a:	4b90      	ldr	r3, [pc, #576]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	2380      	movs	r3, #128	; 0x80
 80036a0:	029b      	lsls	r3, r3, #10
 80036a2:	4013      	ands	r3, r2
 80036a4:	d0ef      	beq.n	8003686 <HAL_RCC_OscConfig+0xe6>
 80036a6:	e015      	b.n	80036d4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7ff fce0 	bl	800306c <HAL_GetTick>
 80036ac:	0003      	movs	r3, r0
 80036ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b2:	f7ff fcdb 	bl	800306c <HAL_GetTick>
 80036b6:	0002      	movs	r2, r0
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e336      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036c4:	4b85      	ldr	r3, [pc, #532]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	029b      	lsls	r3, r3, #10
 80036cc:	4013      	ands	r3, r2
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x112>
 80036d0:	e000      	b.n	80036d4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2202      	movs	r2, #2
 80036da:	4013      	ands	r3, r2
 80036dc:	d100      	bne.n	80036e0 <HAL_RCC_OscConfig+0x140>
 80036de:	e099      	b.n	8003814 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	2220      	movs	r2, #32
 80036ea:	4013      	ands	r3, r2
 80036ec:	d009      	beq.n	8003702 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80036ee:	4b7b      	ldr	r3, [pc, #492]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	4b7a      	ldr	r3, [pc, #488]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80036f4:	2120      	movs	r1, #32
 80036f6:	430a      	orrs	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	2220      	movs	r2, #32
 80036fe:	4393      	bics	r3, r2
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b04      	cmp	r3, #4
 8003706:	d005      	beq.n	8003714 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	2b0c      	cmp	r3, #12
 800370c:	d13e      	bne.n	800378c <HAL_RCC_OscConfig+0x1ec>
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d13b      	bne.n	800378c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003714:	4b71      	ldr	r3, [pc, #452]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2204      	movs	r2, #4
 800371a:	4013      	ands	r3, r2
 800371c:	d004      	beq.n	8003728 <HAL_RCC_OscConfig+0x188>
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e304      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003728:	4b6c      	ldr	r3, [pc, #432]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a6e      	ldr	r2, [pc, #440]	; (80038e8 <HAL_RCC_OscConfig+0x348>)
 800372e:	4013      	ands	r3, r2
 8003730:	0019      	movs	r1, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	021a      	lsls	r2, r3, #8
 8003738:	4b68      	ldr	r3, [pc, #416]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800373e:	4b67      	ldr	r3, [pc, #412]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2209      	movs	r2, #9
 8003744:	4393      	bics	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	4b64      	ldr	r3, [pc, #400]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 800374a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374c:	430a      	orrs	r2, r1
 800374e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003750:	f000 fc42 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003754:	0001      	movs	r1, r0
 8003756:	4b61      	ldr	r3, [pc, #388]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	091b      	lsrs	r3, r3, #4
 800375c:	220f      	movs	r2, #15
 800375e:	4013      	ands	r3, r2
 8003760:	4a62      	ldr	r2, [pc, #392]	; (80038ec <HAL_RCC_OscConfig+0x34c>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	000a      	movs	r2, r1
 8003766:	40da      	lsrs	r2, r3
 8003768:	4b61      	ldr	r3, [pc, #388]	; (80038f0 <HAL_RCC_OscConfig+0x350>)
 800376a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800376c:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <HAL_RCC_OscConfig+0x354>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2513      	movs	r5, #19
 8003772:	197c      	adds	r4, r7, r5
 8003774:	0018      	movs	r0, r3
 8003776:	f7ff fc33 	bl	8002fe0 <HAL_InitTick>
 800377a:	0003      	movs	r3, r0
 800377c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800377e:	197b      	adds	r3, r7, r5
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d046      	beq.n	8003814 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003786:	197b      	adds	r3, r7, r5
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	e2d2      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	2b00      	cmp	r3, #0
 8003790:	d027      	beq.n	80037e2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003792:	4b52      	ldr	r3, [pc, #328]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2209      	movs	r2, #9
 8003798:	4393      	bics	r3, r2
 800379a:	0019      	movs	r1, r3
 800379c:	4b4f      	ldr	r3, [pc, #316]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 800379e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a0:	430a      	orrs	r2, r1
 80037a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7ff fc62 	bl	800306c <HAL_GetTick>
 80037a8:	0003      	movs	r3, r0
 80037aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ae:	f7ff fc5d 	bl	800306c <HAL_GetTick>
 80037b2:	0002      	movs	r2, r0
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e2b8      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037c0:	4b46      	ldr	r3, [pc, #280]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2204      	movs	r2, #4
 80037c6:	4013      	ands	r3, r2
 80037c8:	d0f1      	beq.n	80037ae <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ca:	4b44      	ldr	r3, [pc, #272]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4a46      	ldr	r2, [pc, #280]	; (80038e8 <HAL_RCC_OscConfig+0x348>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	0019      	movs	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	021a      	lsls	r2, r3, #8
 80037da:	4b40      	ldr	r3, [pc, #256]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]
 80037e0:	e018      	b.n	8003814 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037e2:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b3d      	ldr	r3, [pc, #244]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80037e8:	2101      	movs	r1, #1
 80037ea:	438a      	bics	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7ff fc3d 	bl	800306c <HAL_GetTick>
 80037f2:	0003      	movs	r3, r0
 80037f4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f8:	f7ff fc38 	bl	800306c <HAL_GetTick>
 80037fc:	0002      	movs	r2, r0
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e293      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800380a:	4b34      	ldr	r3, [pc, #208]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2204      	movs	r2, #4
 8003810:	4013      	ands	r3, r2
 8003812:	d1f1      	bne.n	80037f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2210      	movs	r2, #16
 800381a:	4013      	ands	r3, r2
 800381c:	d100      	bne.n	8003820 <HAL_RCC_OscConfig+0x280>
 800381e:	e0a2      	b.n	8003966 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d140      	bne.n	80038a8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003826:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4013      	ands	r3, r2
 8003830:	d005      	beq.n	800383e <HAL_RCC_OscConfig+0x29e>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e279      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800383e:	4b27      	ldr	r3, [pc, #156]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	4a2d      	ldr	r2, [pc, #180]	; (80038f8 <HAL_RCC_OscConfig+0x358>)
 8003844:	4013      	ands	r3, r2
 8003846:	0019      	movs	r1, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800384c:	4b23      	ldr	r3, [pc, #140]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003852:	4b22      	ldr	r3, [pc, #136]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	0a19      	lsrs	r1, r3, #8
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	061a      	lsls	r2, r3, #24
 8003860:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	0b5b      	lsrs	r3, r3, #13
 800386c:	3301      	adds	r3, #1
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	0212      	lsls	r2, r2, #8
 8003872:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003874:	4b19      	ldr	r3, [pc, #100]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	210f      	movs	r1, #15
 800387c:	400b      	ands	r3, r1
 800387e:	491b      	ldr	r1, [pc, #108]	; (80038ec <HAL_RCC_OscConfig+0x34c>)
 8003880:	5ccb      	ldrb	r3, [r1, r3]
 8003882:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003884:	4b1a      	ldr	r3, [pc, #104]	; (80038f0 <HAL_RCC_OscConfig+0x350>)
 8003886:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003888:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <HAL_RCC_OscConfig+0x354>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2513      	movs	r5, #19
 800388e:	197c      	adds	r4, r7, r5
 8003890:	0018      	movs	r0, r3
 8003892:	f7ff fba5 	bl	8002fe0 <HAL_InitTick>
 8003896:	0003      	movs	r3, r0
 8003898:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800389a:	197b      	adds	r3, r7, r5
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d061      	beq.n	8003966 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80038a2:	197b      	adds	r3, r7, r5
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	e244      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69db      	ldr	r3, [r3, #28]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d040      	beq.n	8003932 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038b0:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_OscConfig+0x33c>)
 80038b6:	2180      	movs	r1, #128	; 0x80
 80038b8:	0049      	lsls	r1, r1, #1
 80038ba:	430a      	orrs	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038be:	f7ff fbd5 	bl	800306c <HAL_GetTick>
 80038c2:	0003      	movs	r3, r0
 80038c4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80038c6:	e019      	b.n	80038fc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c8:	f7ff fbd0 	bl	800306c <HAL_GetTick>
 80038cc:	0002      	movs	r2, r0
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d912      	bls.n	80038fc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e22b      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	40021000 	.word	0x40021000
 80038e0:	fffeffff 	.word	0xfffeffff
 80038e4:	fffbffff 	.word	0xfffbffff
 80038e8:	ffffe0ff 	.word	0xffffe0ff
 80038ec:	080084e0 	.word	0x080084e0
 80038f0:	20000000 	.word	0x20000000
 80038f4:	20000004 	.word	0x20000004
 80038f8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80038fc:	4bca      	ldr	r3, [pc, #808]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4013      	ands	r3, r2
 8003906:	d0df      	beq.n	80038c8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003908:	4bc7      	ldr	r3, [pc, #796]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4ac7      	ldr	r2, [pc, #796]	; (8003c2c <HAL_RCC_OscConfig+0x68c>)
 800390e:	4013      	ands	r3, r2
 8003910:	0019      	movs	r1, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003916:	4bc4      	ldr	r3, [pc, #784]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003918:	430a      	orrs	r2, r1
 800391a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800391c:	4bc2      	ldr	r3, [pc, #776]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	0a19      	lsrs	r1, r3, #8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	061a      	lsls	r2, r3, #24
 800392a:	4bbf      	ldr	r3, [pc, #764]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	e019      	b.n	8003966 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003932:	4bbd      	ldr	r3, [pc, #756]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4bbc      	ldr	r3, [pc, #752]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003938:	49bd      	ldr	r1, [pc, #756]	; (8003c30 <HAL_RCC_OscConfig+0x690>)
 800393a:	400a      	ands	r2, r1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393e:	f7ff fb95 	bl	800306c <HAL_GetTick>
 8003942:	0003      	movs	r3, r0
 8003944:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003948:	f7ff fb90 	bl	800306c <HAL_GetTick>
 800394c:	0002      	movs	r2, r0
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e1eb      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800395a:	4bb3      	ldr	r3, [pc, #716]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	2380      	movs	r3, #128	; 0x80
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4013      	ands	r3, r2
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2208      	movs	r2, #8
 800396c:	4013      	ands	r3, r2
 800396e:	d036      	beq.n	80039de <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d019      	beq.n	80039ac <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003978:	4bab      	ldr	r3, [pc, #684]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 800397a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800397c:	4baa      	ldr	r3, [pc, #680]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 800397e:	2101      	movs	r1, #1
 8003980:	430a      	orrs	r2, r1
 8003982:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003984:	f7ff fb72 	bl	800306c <HAL_GetTick>
 8003988:	0003      	movs	r3, r0
 800398a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398e:	f7ff fb6d 	bl	800306c <HAL_GetTick>
 8003992:	0002      	movs	r2, r0
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e1c8      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039a0:	4ba1      	ldr	r3, [pc, #644]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 80039a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a4:	2202      	movs	r2, #2
 80039a6:	4013      	ands	r3, r2
 80039a8:	d0f1      	beq.n	800398e <HAL_RCC_OscConfig+0x3ee>
 80039aa:	e018      	b.n	80039de <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ac:	4b9e      	ldr	r3, [pc, #632]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 80039ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039b0:	4b9d      	ldr	r3, [pc, #628]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 80039b2:	2101      	movs	r1, #1
 80039b4:	438a      	bics	r2, r1
 80039b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b8:	f7ff fb58 	bl	800306c <HAL_GetTick>
 80039bc:	0003      	movs	r3, r0
 80039be:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c2:	f7ff fb53 	bl	800306c <HAL_GetTick>
 80039c6:	0002      	movs	r2, r0
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e1ae      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039d4:	4b94      	ldr	r3, [pc, #592]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 80039d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d8:	2202      	movs	r2, #2
 80039da:	4013      	ands	r3, r2
 80039dc:	d1f1      	bne.n	80039c2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2204      	movs	r2, #4
 80039e4:	4013      	ands	r3, r2
 80039e6:	d100      	bne.n	80039ea <HAL_RCC_OscConfig+0x44a>
 80039e8:	e0ae      	b.n	8003b48 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ea:	2023      	movs	r0, #35	; 0x23
 80039ec:	183b      	adds	r3, r7, r0
 80039ee:	2200      	movs	r2, #0
 80039f0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f2:	4b8d      	ldr	r3, [pc, #564]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 80039f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f6:	2380      	movs	r3, #128	; 0x80
 80039f8:	055b      	lsls	r3, r3, #21
 80039fa:	4013      	ands	r3, r2
 80039fc:	d109      	bne.n	8003a12 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b8a      	ldr	r3, [pc, #552]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a02:	4b89      	ldr	r3, [pc, #548]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003a04:	2180      	movs	r1, #128	; 0x80
 8003a06:	0549      	lsls	r1, r1, #21
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003a0c:	183b      	adds	r3, r7, r0
 8003a0e:	2201      	movs	r2, #1
 8003a10:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a12:	4b88      	ldr	r3, [pc, #544]	; (8003c34 <HAL_RCC_OscConfig+0x694>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d11a      	bne.n	8003a54 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1e:	4b85      	ldr	r3, [pc, #532]	; (8003c34 <HAL_RCC_OscConfig+0x694>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b84      	ldr	r3, [pc, #528]	; (8003c34 <HAL_RCC_OscConfig+0x694>)
 8003a24:	2180      	movs	r1, #128	; 0x80
 8003a26:	0049      	lsls	r1, r1, #1
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2c:	f7ff fb1e 	bl	800306c <HAL_GetTick>
 8003a30:	0003      	movs	r3, r0
 8003a32:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a34:	e008      	b.n	8003a48 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a36:	f7ff fb19 	bl	800306c <HAL_GetTick>
 8003a3a:	0002      	movs	r2, r0
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b64      	cmp	r3, #100	; 0x64
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e174      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	4b7a      	ldr	r3, [pc, #488]	; (8003c34 <HAL_RCC_OscConfig+0x694>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	4013      	ands	r3, r2
 8003a52:	d0f0      	beq.n	8003a36 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	2380      	movs	r3, #128	; 0x80
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d107      	bne.n	8003a70 <HAL_RCC_OscConfig+0x4d0>
 8003a60:	4b71      	ldr	r3, [pc, #452]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003a62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a64:	4b70      	ldr	r3, [pc, #448]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	0049      	lsls	r1, r1, #1
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	651a      	str	r2, [r3, #80]	; 0x50
 8003a6e:	e031      	b.n	8003ad4 <HAL_RCC_OscConfig+0x534>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10c      	bne.n	8003a92 <HAL_RCC_OscConfig+0x4f2>
 8003a78:	4b6b      	ldr	r3, [pc, #428]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003a7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a7c:	4b6a      	ldr	r3, [pc, #424]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003a7e:	496c      	ldr	r1, [pc, #432]	; (8003c30 <HAL_RCC_OscConfig+0x690>)
 8003a80:	400a      	ands	r2, r1
 8003a82:	651a      	str	r2, [r3, #80]	; 0x50
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003a86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a88:	4b67      	ldr	r3, [pc, #412]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003a8a:	496b      	ldr	r1, [pc, #428]	; (8003c38 <HAL_RCC_OscConfig+0x698>)
 8003a8c:	400a      	ands	r2, r1
 8003a8e:	651a      	str	r2, [r3, #80]	; 0x50
 8003a90:	e020      	b.n	8003ad4 <HAL_RCC_OscConfig+0x534>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	23a0      	movs	r3, #160	; 0xa0
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d10e      	bne.n	8003abc <HAL_RCC_OscConfig+0x51c>
 8003a9e:	4b62      	ldr	r3, [pc, #392]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aa2:	4b61      	ldr	r3, [pc, #388]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	00c9      	lsls	r1, r1, #3
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	651a      	str	r2, [r3, #80]	; 0x50
 8003aac:	4b5e      	ldr	r3, [pc, #376]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003aae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ab0:	4b5d      	ldr	r3, [pc, #372]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003ab2:	2180      	movs	r1, #128	; 0x80
 8003ab4:	0049      	lsls	r1, r1, #1
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	651a      	str	r2, [r3, #80]	; 0x50
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x534>
 8003abc:	4b5a      	ldr	r3, [pc, #360]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ac0:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003ac2:	495b      	ldr	r1, [pc, #364]	; (8003c30 <HAL_RCC_OscConfig+0x690>)
 8003ac4:	400a      	ands	r2, r1
 8003ac6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ac8:	4b57      	ldr	r3, [pc, #348]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003acc:	4b56      	ldr	r3, [pc, #344]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003ace:	495a      	ldr	r1, [pc, #360]	; (8003c38 <HAL_RCC_OscConfig+0x698>)
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003adc:	f7ff fac6 	bl	800306c <HAL_GetTick>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ae4:	e009      	b.n	8003afa <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae6:	f7ff fac1 	bl	800306c <HAL_GetTick>
 8003aea:	0002      	movs	r2, r0
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	4a52      	ldr	r2, [pc, #328]	; (8003c3c <HAL_RCC_OscConfig+0x69c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e11b      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003afa:	4b4b      	ldr	r3, [pc, #300]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003afe:	2380      	movs	r3, #128	; 0x80
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4013      	ands	r3, r2
 8003b04:	d0ef      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x546>
 8003b06:	e014      	b.n	8003b32 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b08:	f7ff fab0 	bl	800306c <HAL_GetTick>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b10:	e009      	b.n	8003b26 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7ff faab 	bl	800306c <HAL_GetTick>
 8003b16:	0002      	movs	r2, r0
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	4a47      	ldr	r2, [pc, #284]	; (8003c3c <HAL_RCC_OscConfig+0x69c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e105      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b26:	4b40      	ldr	r3, [pc, #256]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003b28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d1ef      	bne.n	8003b12 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b32:	2323      	movs	r3, #35	; 0x23
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d105      	bne.n	8003b48 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b3c:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003b3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b40:	4b39      	ldr	r3, [pc, #228]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003b42:	493f      	ldr	r1, [pc, #252]	; (8003c40 <HAL_RCC_OscConfig+0x6a0>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d049      	beq.n	8003be6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d026      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003b5a:	4b33      	ldr	r3, [pc, #204]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	4b32      	ldr	r3, [pc, #200]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003b60:	2101      	movs	r1, #1
 8003b62:	430a      	orrs	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b6a:	4b2f      	ldr	r3, [pc, #188]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	635a      	str	r2, [r3, #52]	; 0x34
 8003b72:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <HAL_RCC_OscConfig+0x6a4>)
 8003b74:	6a1a      	ldr	r2, [r3, #32]
 8003b76:	4b33      	ldr	r3, [pc, #204]	; (8003c44 <HAL_RCC_OscConfig+0x6a4>)
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	0189      	lsls	r1, r1, #6
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7ff fa74 	bl	800306c <HAL_GetTick>
 8003b84:	0003      	movs	r3, r0
 8003b86:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b8a:	f7ff fa6f 	bl	800306c <HAL_GetTick>
 8003b8e:	0002      	movs	r2, r0
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e0ca      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b9c:	4b22      	ldr	r3, [pc, #136]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	d0f1      	beq.n	8003b8a <HAL_RCC_OscConfig+0x5ea>
 8003ba6:	e01e      	b.n	8003be6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003ba8:	4b1f      	ldr	r3, [pc, #124]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003bae:	2101      	movs	r1, #1
 8003bb0:	438a      	bics	r2, r1
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	4b23      	ldr	r3, [pc, #140]	; (8003c44 <HAL_RCC_OscConfig+0x6a4>)
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	4b22      	ldr	r3, [pc, #136]	; (8003c44 <HAL_RCC_OscConfig+0x6a4>)
 8003bba:	4923      	ldr	r1, [pc, #140]	; (8003c48 <HAL_RCC_OscConfig+0x6a8>)
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc0:	f7ff fa54 	bl	800306c <HAL_GetTick>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bca:	f7ff fa4f 	bl	800306c <HAL_GetTick>
 8003bce:	0002      	movs	r2, r0
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e0aa      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bdc:	4b12      	ldr	r3, [pc, #72]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2202      	movs	r2, #2
 8003be2:	4013      	ands	r3, r2
 8003be4:	d1f1      	bne.n	8003bca <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d100      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x650>
 8003bee:	e09f      	b.n	8003d30 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b0c      	cmp	r3, #12
 8003bf4:	d100      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x658>
 8003bf6:	e078      	b.n	8003cea <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d159      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <HAL_RCC_OscConfig+0x688>)
 8003c06:	4911      	ldr	r1, [pc, #68]	; (8003c4c <HAL_RCC_OscConfig+0x6ac>)
 8003c08:	400a      	ands	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7ff fa2e 	bl	800306c <HAL_GetTick>
 8003c10:	0003      	movs	r3, r0
 8003c12:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c14:	e01c      	b.n	8003c50 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c16:	f7ff fa29 	bl	800306c <HAL_GetTick>
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d915      	bls.n	8003c50 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e084      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	ffff1fff 	.word	0xffff1fff
 8003c30:	fffffeff 	.word	0xfffffeff
 8003c34:	40007000 	.word	0x40007000
 8003c38:	fffffbff 	.word	0xfffffbff
 8003c3c:	00001388 	.word	0x00001388
 8003c40:	efffffff 	.word	0xefffffff
 8003c44:	40010000 	.word	0x40010000
 8003c48:	ffffdfff 	.word	0xffffdfff
 8003c4c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c50:	4b3a      	ldr	r3, [pc, #232]	; (8003d3c <HAL_RCC_OscConfig+0x79c>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	049b      	lsls	r3, r3, #18
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d1dc      	bne.n	8003c16 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c5c:	4b37      	ldr	r3, [pc, #220]	; (8003d3c <HAL_RCC_OscConfig+0x79c>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4a37      	ldr	r2, [pc, #220]	; (8003d40 <HAL_RCC_OscConfig+0x7a0>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	0019      	movs	r1, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c74:	431a      	orrs	r2, r3
 8003c76:	4b31      	ldr	r3, [pc, #196]	; (8003d3c <HAL_RCC_OscConfig+0x79c>)
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c7c:	4b2f      	ldr	r3, [pc, #188]	; (8003d3c <HAL_RCC_OscConfig+0x79c>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b2e      	ldr	r3, [pc, #184]	; (8003d3c <HAL_RCC_OscConfig+0x79c>)
 8003c82:	2180      	movs	r1, #128	; 0x80
 8003c84:	0449      	lsls	r1, r1, #17
 8003c86:	430a      	orrs	r2, r1
 8003c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7ff f9ef 	bl	800306c <HAL_GetTick>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c94:	f7ff f9ea 	bl	800306c <HAL_GetTick>
 8003c98:	0002      	movs	r2, r0
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e045      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ca6:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <HAL_RCC_OscConfig+0x79c>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	049b      	lsls	r3, r3, #18
 8003cae:	4013      	ands	r3, r2
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0x6f4>
 8003cb2:	e03d      	b.n	8003d30 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cb4:	4b21      	ldr	r3, [pc, #132]	; (8003d3c <HAL_RCC_OscConfig+0x79c>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4b20      	ldr	r3, [pc, #128]	; (8003d3c <HAL_RCC_OscConfig+0x79c>)
 8003cba:	4922      	ldr	r1, [pc, #136]	; (8003d44 <HAL_RCC_OscConfig+0x7a4>)
 8003cbc:	400a      	ands	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7ff f9d4 	bl	800306c <HAL_GetTick>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003cc8:	e008      	b.n	8003cdc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cca:	f7ff f9cf 	bl	800306c <HAL_GetTick>
 8003cce:	0002      	movs	r2, r0
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e02a      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003cdc:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <HAL_RCC_OscConfig+0x79c>)
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	049b      	lsls	r3, r3, #18
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d1f0      	bne.n	8003cca <HAL_RCC_OscConfig+0x72a>
 8003ce8:	e022      	b.n	8003d30 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e01d      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <HAL_RCC_OscConfig+0x79c>)
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	025b      	lsls	r3, r3, #9
 8003d02:	401a      	ands	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d10f      	bne.n	8003d2c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	23f0      	movs	r3, #240	; 0xf0
 8003d10:	039b      	lsls	r3, r3, #14
 8003d12:	401a      	ands	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d107      	bne.n	8003d2c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	23c0      	movs	r3, #192	; 0xc0
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	401a      	ands	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	0018      	movs	r0, r3
 8003d34:	46bd      	mov	sp, r7
 8003d36:	b00a      	add	sp, #40	; 0x28
 8003d38:	bdb0      	pop	{r4, r5, r7, pc}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	ff02ffff 	.word	0xff02ffff
 8003d44:	feffffff 	.word	0xfeffffff

08003d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d48:	b5b0      	push	{r4, r5, r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e128      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d5c:	4b96      	ldr	r3, [pc, #600]	; (8003fb8 <HAL_RCC_ClockConfig+0x270>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2201      	movs	r2, #1
 8003d62:	4013      	ands	r3, r2
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d91e      	bls.n	8003da8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d6a:	4b93      	ldr	r3, [pc, #588]	; (8003fb8 <HAL_RCC_ClockConfig+0x270>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4393      	bics	r3, r2
 8003d72:	0019      	movs	r1, r3
 8003d74:	4b90      	ldr	r3, [pc, #576]	; (8003fb8 <HAL_RCC_ClockConfig+0x270>)
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d7c:	f7ff f976 	bl	800306c <HAL_GetTick>
 8003d80:	0003      	movs	r3, r0
 8003d82:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d84:	e009      	b.n	8003d9a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d86:	f7ff f971 	bl	800306c <HAL_GetTick>
 8003d8a:	0002      	movs	r2, r0
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	4a8a      	ldr	r2, [pc, #552]	; (8003fbc <HAL_RCC_ClockConfig+0x274>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e109      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9a:	4b87      	ldr	r3, [pc, #540]	; (8003fb8 <HAL_RCC_ClockConfig+0x270>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	4013      	ands	r3, r2
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d1ee      	bne.n	8003d86 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2202      	movs	r2, #2
 8003dae:	4013      	ands	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db2:	4b83      	ldr	r3, [pc, #524]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	22f0      	movs	r2, #240	; 0xf0
 8003db8:	4393      	bics	r3, r2
 8003dba:	0019      	movs	r1, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	4b7f      	ldr	r3, [pc, #508]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d100      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0x8a>
 8003dd0:	e089      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d107      	bne.n	8003dea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003dda:	4b79      	ldr	r3, [pc, #484]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	2380      	movs	r3, #128	; 0x80
 8003de0:	029b      	lsls	r3, r3, #10
 8003de2:	4013      	ands	r3, r2
 8003de4:	d120      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0e1      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	d107      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003df2:	4b73      	ldr	r3, [pc, #460]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	2380      	movs	r3, #128	; 0x80
 8003df8:	049b      	lsls	r3, r3, #18
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d114      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e0d5      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d106      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e0a:	4b6d      	ldr	r3, [pc, #436]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2204      	movs	r2, #4
 8003e10:	4013      	ands	r3, r2
 8003e12:	d109      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0ca      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e18:	4b69      	ldr	r3, [pc, #420]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4013      	ands	r3, r2
 8003e22:	d101      	bne.n	8003e28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0c2      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e28:	4b65      	ldr	r3, [pc, #404]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	4393      	bics	r3, r2
 8003e30:	0019      	movs	r1, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	4b62      	ldr	r3, [pc, #392]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e3c:	f7ff f916 	bl	800306c <HAL_GetTick>
 8003e40:	0003      	movs	r3, r0
 8003e42:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d111      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e4c:	e009      	b.n	8003e62 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4e:	f7ff f90d 	bl	800306c <HAL_GetTick>
 8003e52:	0002      	movs	r2, r0
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	4a58      	ldr	r2, [pc, #352]	; (8003fbc <HAL_RCC_ClockConfig+0x274>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e0a5      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e62:	4b57      	ldr	r3, [pc, #348]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	220c      	movs	r2, #12
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d1ef      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x106>
 8003e6e:	e03a      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d111      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e78:	e009      	b.n	8003e8e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e7a:	f7ff f8f7 	bl	800306c <HAL_GetTick>
 8003e7e:	0002      	movs	r2, r0
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	4a4d      	ldr	r2, [pc, #308]	; (8003fbc <HAL_RCC_ClockConfig+0x274>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e08f      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e8e:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	220c      	movs	r2, #12
 8003e94:	4013      	ands	r3, r2
 8003e96:	2b0c      	cmp	r3, #12
 8003e98:	d1ef      	bne.n	8003e7a <HAL_RCC_ClockConfig+0x132>
 8003e9a:	e024      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d11b      	bne.n	8003edc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ea4:	e009      	b.n	8003eba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea6:	f7ff f8e1 	bl	800306c <HAL_GetTick>
 8003eaa:	0002      	movs	r2, r0
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	4a42      	ldr	r2, [pc, #264]	; (8003fbc <HAL_RCC_ClockConfig+0x274>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e079      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eba:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	220c      	movs	r2, #12
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d1ef      	bne.n	8003ea6 <HAL_RCC_ClockConfig+0x15e>
 8003ec6:	e00e      	b.n	8003ee6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ec8:	f7ff f8d0 	bl	800306c <HAL_GetTick>
 8003ecc:	0002      	movs	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	4a3a      	ldr	r2, [pc, #232]	; (8003fbc <HAL_RCC_ClockConfig+0x274>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e068      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003edc:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	220c      	movs	r2, #12
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ee6:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <HAL_RCC_ClockConfig+0x270>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2201      	movs	r2, #1
 8003eec:	4013      	ands	r3, r2
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d21e      	bcs.n	8003f32 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef4:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <HAL_RCC_ClockConfig+0x270>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	4393      	bics	r3, r2
 8003efc:	0019      	movs	r1, r3
 8003efe:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <HAL_RCC_ClockConfig+0x270>)
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f06:	f7ff f8b1 	bl	800306c <HAL_GetTick>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	e009      	b.n	8003f24 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f10:	f7ff f8ac 	bl	800306c <HAL_GetTick>
 8003f14:	0002      	movs	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	4a28      	ldr	r2, [pc, #160]	; (8003fbc <HAL_RCC_ClockConfig+0x274>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e044      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f24:	4b24      	ldr	r3, [pc, #144]	; (8003fb8 <HAL_RCC_ClockConfig+0x270>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d1ee      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2204      	movs	r2, #4
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d009      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f3c:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	4a20      	ldr	r2, [pc, #128]	; (8003fc4 <HAL_RCC_ClockConfig+0x27c>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	0019      	movs	r1, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2208      	movs	r2, #8
 8003f56:	4013      	ands	r3, r2
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	; (8003fc8 <HAL_RCC_ClockConfig+0x280>)
 8003f60:	4013      	ands	r3, r2
 8003f62:	0019      	movs	r1, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	00da      	lsls	r2, r3, #3
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f70:	f000 f832 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8003f74:	0001      	movs	r1, r0
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_RCC_ClockConfig+0x278>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	220f      	movs	r2, #15
 8003f7e:	4013      	ands	r3, r2
 8003f80:	4a12      	ldr	r2, [pc, #72]	; (8003fcc <HAL_RCC_ClockConfig+0x284>)
 8003f82:	5cd3      	ldrb	r3, [r2, r3]
 8003f84:	000a      	movs	r2, r1
 8003f86:	40da      	lsrs	r2, r3
 8003f88:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <HAL_RCC_ClockConfig+0x288>)
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f8c:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <HAL_RCC_ClockConfig+0x28c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	250b      	movs	r5, #11
 8003f92:	197c      	adds	r4, r7, r5
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7ff f823 	bl	8002fe0 <HAL_InitTick>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003f9e:	197b      	adds	r3, r7, r5
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003fa6:	197b      	adds	r3, r7, r5
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	e000      	b.n	8003fae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	0018      	movs	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b004      	add	sp, #16
 8003fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	40022000 	.word	0x40022000
 8003fbc:	00001388 	.word	0x00001388
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	fffff8ff 	.word	0xfffff8ff
 8003fc8:	ffffc7ff 	.word	0xffffc7ff
 8003fcc:	080084e0 	.word	0x080084e0
 8003fd0:	20000000 	.word	0x20000000
 8003fd4:	20000004 	.word	0x20000004

08003fd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fd8:	b5b0      	push	{r4, r5, r7, lr}
 8003fda:	b08e      	sub	sp, #56	; 0x38
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003fde:	4b4c      	ldr	r3, [pc, #304]	; (8004110 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b0c      	cmp	r3, #12
 8003fec:	d014      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x40>
 8003fee:	d900      	bls.n	8003ff2 <HAL_RCC_GetSysClockFreq+0x1a>
 8003ff0:	e07b      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x112>
 8003ff2:	2b04      	cmp	r3, #4
 8003ff4:	d002      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x24>
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d00b      	beq.n	8004012 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ffa:	e076      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ffc:	4b44      	ldr	r3, [pc, #272]	; (8004110 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2210      	movs	r2, #16
 8004002:	4013      	ands	r3, r2
 8004004:	d002      	beq.n	800400c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004006:	4b43      	ldr	r3, [pc, #268]	; (8004114 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004008:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800400a:	e07c      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800400c:	4b42      	ldr	r3, [pc, #264]	; (8004118 <HAL_RCC_GetSysClockFreq+0x140>)
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004010:	e079      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004012:	4b42      	ldr	r3, [pc, #264]	; (800411c <HAL_RCC_GetSysClockFreq+0x144>)
 8004014:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004016:	e076      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401a:	0c9a      	lsrs	r2, r3, #18
 800401c:	230f      	movs	r3, #15
 800401e:	401a      	ands	r2, r3
 8004020:	4b3f      	ldr	r3, [pc, #252]	; (8004120 <HAL_RCC_GetSysClockFreq+0x148>)
 8004022:	5c9b      	ldrb	r3, [r3, r2]
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	0d9a      	lsrs	r2, r3, #22
 800402a:	2303      	movs	r3, #3
 800402c:	4013      	ands	r3, r2
 800402e:	3301      	adds	r3, #1
 8004030:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004032:	4b37      	ldr	r3, [pc, #220]	; (8004110 <HAL_RCC_GetSysClockFreq+0x138>)
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	025b      	lsls	r3, r3, #9
 800403a:	4013      	ands	r3, r2
 800403c:	d01a      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800403e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	4a35      	ldr	r2, [pc, #212]	; (800411c <HAL_RCC_GetSysClockFreq+0x144>)
 8004048:	2300      	movs	r3, #0
 800404a:	69b8      	ldr	r0, [r7, #24]
 800404c:	69f9      	ldr	r1, [r7, #28]
 800404e:	f7fc fa4b 	bl	80004e8 <__aeabi_lmul>
 8004052:	0002      	movs	r2, r0
 8004054:	000b      	movs	r3, r1
 8004056:	0010      	movs	r0, r2
 8004058:	0019      	movs	r1, r3
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f7fc fa1f 	bl	80004a8 <__aeabi_uldivmod>
 800406a:	0002      	movs	r2, r0
 800406c:	000b      	movs	r3, r1
 800406e:	0013      	movs	r3, r2
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
 8004072:	e037      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004074:	4b26      	ldr	r3, [pc, #152]	; (8004110 <HAL_RCC_GetSysClockFreq+0x138>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2210      	movs	r2, #16
 800407a:	4013      	ands	r3, r2
 800407c:	d01a      	beq.n	80040b4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800407e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	4a23      	ldr	r2, [pc, #140]	; (8004114 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004088:	2300      	movs	r3, #0
 800408a:	68b8      	ldr	r0, [r7, #8]
 800408c:	68f9      	ldr	r1, [r7, #12]
 800408e:	f7fc fa2b 	bl	80004e8 <__aeabi_lmul>
 8004092:	0002      	movs	r2, r0
 8004094:	000b      	movs	r3, r1
 8004096:	0010      	movs	r0, r2
 8004098:	0019      	movs	r1, r3
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f7fc f9ff 	bl	80004a8 <__aeabi_uldivmod>
 80040aa:	0002      	movs	r2, r0
 80040ac:	000b      	movs	r3, r1
 80040ae:	0013      	movs	r3, r2
 80040b0:	637b      	str	r3, [r7, #52]	; 0x34
 80040b2:	e017      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	0018      	movs	r0, r3
 80040b8:	2300      	movs	r3, #0
 80040ba:	0019      	movs	r1, r3
 80040bc:	4a16      	ldr	r2, [pc, #88]	; (8004118 <HAL_RCC_GetSysClockFreq+0x140>)
 80040be:	2300      	movs	r3, #0
 80040c0:	f7fc fa12 	bl	80004e8 <__aeabi_lmul>
 80040c4:	0002      	movs	r2, r0
 80040c6:	000b      	movs	r3, r1
 80040c8:	0010      	movs	r0, r2
 80040ca:	0019      	movs	r1, r3
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	001c      	movs	r4, r3
 80040d0:	2300      	movs	r3, #0
 80040d2:	001d      	movs	r5, r3
 80040d4:	0022      	movs	r2, r4
 80040d6:	002b      	movs	r3, r5
 80040d8:	f7fc f9e6 	bl	80004a8 <__aeabi_uldivmod>
 80040dc:	0002      	movs	r2, r0
 80040de:	000b      	movs	r3, r1
 80040e0:	0013      	movs	r3, r2
 80040e2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040e8:	e00d      	b.n	8004106 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80040ea:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_GetSysClockFreq+0x138>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	0b5b      	lsrs	r3, r3, #13
 80040f0:	2207      	movs	r2, #7
 80040f2:	4013      	ands	r3, r2
 80040f4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	3301      	adds	r3, #1
 80040fa:	2280      	movs	r2, #128	; 0x80
 80040fc:	0212      	lsls	r2, r2, #8
 80040fe:	409a      	lsls	r2, r3
 8004100:	0013      	movs	r3, r2
 8004102:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004104:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004108:	0018      	movs	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	b00e      	add	sp, #56	; 0x38
 800410e:	bdb0      	pop	{r4, r5, r7, pc}
 8004110:	40021000 	.word	0x40021000
 8004114:	003d0900 	.word	0x003d0900
 8004118:	00f42400 	.word	0x00f42400
 800411c:	007a1200 	.word	0x007a1200
 8004120:	080084f8 	.word	0x080084f8

08004124 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004128:	4b02      	ldr	r3, [pc, #8]	; (8004134 <HAL_RCC_GetHCLKFreq+0x10>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	46c0      	nop			; (mov r8, r8)
 8004134:	20000000 	.word	0x20000000

08004138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800413c:	f7ff fff2 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004140:	0001      	movs	r1, r0
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	0a1b      	lsrs	r3, r3, #8
 8004148:	2207      	movs	r2, #7
 800414a:	4013      	ands	r3, r2
 800414c:	4a04      	ldr	r2, [pc, #16]	; (8004160 <HAL_RCC_GetPCLK1Freq+0x28>)
 800414e:	5cd3      	ldrb	r3, [r2, r3]
 8004150:	40d9      	lsrs	r1, r3
 8004152:	000b      	movs	r3, r1
}
 8004154:	0018      	movs	r0, r3
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	40021000 	.word	0x40021000
 8004160:	080084f0 	.word	0x080084f0

08004164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004168:	f7ff ffdc 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 800416c:	0001      	movs	r1, r0
 800416e:	4b06      	ldr	r3, [pc, #24]	; (8004188 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	0adb      	lsrs	r3, r3, #11
 8004174:	2207      	movs	r2, #7
 8004176:	4013      	ands	r3, r2
 8004178:	4a04      	ldr	r2, [pc, #16]	; (800418c <HAL_RCC_GetPCLK2Freq+0x28>)
 800417a:	5cd3      	ldrb	r3, [r2, r3]
 800417c:	40d9      	lsrs	r1, r3
 800417e:	000b      	movs	r3, r1
}
 8004180:	0018      	movs	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	40021000 	.word	0x40021000
 800418c:	080084f0 	.word	0x080084f0

08004190 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004198:	2017      	movs	r0, #23
 800419a:	183b      	adds	r3, r7, r0
 800419c:	2200      	movs	r2, #0
 800419e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2220      	movs	r2, #32
 80041a6:	4013      	ands	r3, r2
 80041a8:	d100      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80041aa:	e0c7      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ac:	4b9b      	ldr	r3, [pc, #620]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80041ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	055b      	lsls	r3, r3, #21
 80041b4:	4013      	ands	r3, r2
 80041b6:	d109      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b8:	4b98      	ldr	r3, [pc, #608]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80041ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041bc:	4b97      	ldr	r3, [pc, #604]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80041be:	2180      	movs	r1, #128	; 0x80
 80041c0:	0549      	lsls	r1, r1, #21
 80041c2:	430a      	orrs	r2, r1
 80041c4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80041c6:	183b      	adds	r3, r7, r0
 80041c8:	2201      	movs	r2, #1
 80041ca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	4b94      	ldr	r3, [pc, #592]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4013      	ands	r3, r2
 80041d6:	d11a      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d8:	4b91      	ldr	r3, [pc, #580]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b90      	ldr	r3, [pc, #576]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80041de:	2180      	movs	r1, #128	; 0x80
 80041e0:	0049      	lsls	r1, r1, #1
 80041e2:	430a      	orrs	r2, r1
 80041e4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e6:	f7fe ff41 	bl	800306c <HAL_GetTick>
 80041ea:	0003      	movs	r3, r0
 80041ec:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ee:	e008      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f0:	f7fe ff3c 	bl	800306c <HAL_GetTick>
 80041f4:	0002      	movs	r2, r0
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	2b64      	cmp	r3, #100	; 0x64
 80041fc:	d901      	bls.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e107      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004202:	4b87      	ldr	r3, [pc, #540]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	4013      	ands	r3, r2
 800420c:	d0f0      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800420e:	4b83      	ldr	r3, [pc, #524]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	23c0      	movs	r3, #192	; 0xc0
 8004214:	039b      	lsls	r3, r3, #14
 8004216:	4013      	ands	r3, r2
 8004218:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	23c0      	movs	r3, #192	; 0xc0
 8004220:	039b      	lsls	r3, r3, #14
 8004222:	4013      	ands	r3, r2
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	429a      	cmp	r2, r3
 8004228:	d013      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	23c0      	movs	r3, #192	; 0xc0
 8004230:	029b      	lsls	r3, r3, #10
 8004232:	401a      	ands	r2, r3
 8004234:	23c0      	movs	r3, #192	; 0xc0
 8004236:	029b      	lsls	r3, r3, #10
 8004238:	429a      	cmp	r2, r3
 800423a:	d10a      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800423c:	4b77      	ldr	r3, [pc, #476]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	029b      	lsls	r3, r3, #10
 8004244:	401a      	ands	r2, r3
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	029b      	lsls	r3, r3, #10
 800424a:	429a      	cmp	r2, r3
 800424c:	d101      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e0df      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004252:	4b72      	ldr	r3, [pc, #456]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004254:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004256:	23c0      	movs	r3, #192	; 0xc0
 8004258:	029b      	lsls	r3, r3, #10
 800425a:	4013      	ands	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d03b      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	23c0      	movs	r3, #192	; 0xc0
 800426a:	029b      	lsls	r3, r3, #10
 800426c:	4013      	ands	r3, r2
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	429a      	cmp	r2, r3
 8004272:	d033      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2220      	movs	r2, #32
 800427a:	4013      	ands	r3, r2
 800427c:	d02e      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800427e:	4b67      	ldr	r3, [pc, #412]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004282:	4a68      	ldr	r2, [pc, #416]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8004284:	4013      	ands	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004288:	4b64      	ldr	r3, [pc, #400]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800428a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800428c:	4b63      	ldr	r3, [pc, #396]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800428e:	2180      	movs	r1, #128	; 0x80
 8004290:	0309      	lsls	r1, r1, #12
 8004292:	430a      	orrs	r2, r1
 8004294:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004296:	4b61      	ldr	r3, [pc, #388]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800429a:	4b60      	ldr	r3, [pc, #384]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800429c:	4962      	ldr	r1, [pc, #392]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800429e:	400a      	ands	r2, r1
 80042a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80042a2:	4b5e      	ldr	r3, [pc, #376]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4013      	ands	r3, r2
 80042b0:	d014      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042b2:	f7fe fedb 	bl	800306c <HAL_GetTick>
 80042b6:	0003      	movs	r3, r0
 80042b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ba:	e009      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042bc:	f7fe fed6 	bl	800306c <HAL_GetTick>
 80042c0:	0002      	movs	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	4a59      	ldr	r2, [pc, #356]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d901      	bls.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e0a0      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042d0:	4b52      	ldr	r3, [pc, #328]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80042d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4013      	ands	r3, r2
 80042da:	d0ef      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2220      	movs	r2, #32
 80042e2:	4013      	ands	r3, r2
 80042e4:	d01f      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	23c0      	movs	r3, #192	; 0xc0
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	401a      	ands	r2, r3
 80042f0:	23c0      	movs	r3, #192	; 0xc0
 80042f2:	029b      	lsls	r3, r3, #10
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d10c      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80042f8:	4b48      	ldr	r3, [pc, #288]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a4c      	ldr	r2, [pc, #304]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80042fe:	4013      	ands	r3, r2
 8004300:	0019      	movs	r1, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	23c0      	movs	r3, #192	; 0xc0
 8004308:	039b      	lsls	r3, r3, #14
 800430a:	401a      	ands	r2, r3
 800430c:	4b43      	ldr	r3, [pc, #268]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	4b42      	ldr	r3, [pc, #264]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004314:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	23c0      	movs	r3, #192	; 0xc0
 800431c:	029b      	lsls	r3, r3, #10
 800431e:	401a      	ands	r2, r3
 8004320:	4b3e      	ldr	r3, [pc, #248]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004322:	430a      	orrs	r2, r1
 8004324:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004326:	2317      	movs	r3, #23
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d105      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004330:	4b3a      	ldr	r3, [pc, #232]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004334:	4b39      	ldr	r3, [pc, #228]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004336:	493f      	ldr	r1, [pc, #252]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8004338:	400a      	ands	r2, r1
 800433a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2201      	movs	r2, #1
 8004342:	4013      	ands	r3, r2
 8004344:	d009      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004346:	4b35      	ldr	r3, [pc, #212]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434a:	2203      	movs	r2, #3
 800434c:	4393      	bics	r3, r2
 800434e:	0019      	movs	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	4b31      	ldr	r3, [pc, #196]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004356:	430a      	orrs	r2, r1
 8004358:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2202      	movs	r2, #2
 8004360:	4013      	ands	r3, r2
 8004362:	d009      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004368:	220c      	movs	r2, #12
 800436a:	4393      	bics	r3, r2
 800436c:	0019      	movs	r1, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004374:	430a      	orrs	r2, r1
 8004376:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2204      	movs	r2, #4
 800437e:	4013      	ands	r3, r2
 8004380:	d009      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004382:	4b26      	ldr	r3, [pc, #152]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	4a2c      	ldr	r2, [pc, #176]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8004388:	4013      	ands	r3, r2
 800438a:	0019      	movs	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	4b22      	ldr	r3, [pc, #136]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8004392:	430a      	orrs	r2, r1
 8004394:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2208      	movs	r2, #8
 800439c:	4013      	ands	r3, r2
 800439e:	d009      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a0:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80043a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a4:	4a25      	ldr	r2, [pc, #148]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	0019      	movs	r1, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80043b0:	430a      	orrs	r2, r1
 80043b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4013      	ands	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043c0:	4b16      	ldr	r3, [pc, #88]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	4a17      	ldr	r2, [pc, #92]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	0019      	movs	r1, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699a      	ldr	r2, [r3, #24]
 80043ce:	4b13      	ldr	r3, [pc, #76]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80043d0:	430a      	orrs	r2, r1
 80043d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2240      	movs	r2, #64	; 0x40
 80043da:	4013      	ands	r3, r2
 80043dc:	d009      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043de:	4b0f      	ldr	r3, [pc, #60]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	4a17      	ldr	r2, [pc, #92]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	0019      	movs	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80043ee:	430a      	orrs	r2, r1
 80043f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2280      	movs	r2, #128	; 0x80
 80043f8:	4013      	ands	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80043fc:	4b07      	ldr	r3, [pc, #28]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80043fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004400:	4a10      	ldr	r2, [pc, #64]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8004402:	4013      	ands	r3, r2
 8004404:	0019      	movs	r1, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	4b04      	ldr	r3, [pc, #16]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800440c:	430a      	orrs	r2, r1
 800440e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	b006      	add	sp, #24
 8004418:	bd80      	pop	{r7, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
 8004424:	fffcffff 	.word	0xfffcffff
 8004428:	fff7ffff 	.word	0xfff7ffff
 800442c:	00001388 	.word	0x00001388
 8004430:	ffcfffff 	.word	0xffcfffff
 8004434:	efffffff 	.word	0xefffffff
 8004438:	fffff3ff 	.word	0xfffff3ff
 800443c:	ffffcfff 	.word	0xffffcfff
 8004440:	fbffffff 	.word	0xfbffffff
 8004444:	fff3ffff 	.word	0xfff3ffff

08004448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e032      	b.n	80044c0 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2239      	movs	r2, #57	; 0x39
 800445e:	5c9b      	ldrb	r3, [r3, r2]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d107      	bne.n	8004476 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2238      	movs	r2, #56	; 0x38
 800446a:	2100      	movs	r1, #0
 800446c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0018      	movs	r0, r3
 8004472:	f7fe fc35 	bl	8002ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2239      	movs	r2, #57	; 0x39
 800447a:	2102      	movs	r1, #2
 800447c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3304      	adds	r3, #4
 8004486:	0019      	movs	r1, r3
 8004488:	0010      	movs	r0, r2
 800448a:	f000 f8f1 	bl	8004670 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	223e      	movs	r2, #62	; 0x3e
 8004492:	2101      	movs	r1, #1
 8004494:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	223a      	movs	r2, #58	; 0x3a
 800449a:	2101      	movs	r1, #1
 800449c:	5499      	strb	r1, [r3, r2]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	223b      	movs	r2, #59	; 0x3b
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	223c      	movs	r2, #60	; 0x3c
 80044aa:	2101      	movs	r1, #1
 80044ac:	5499      	strb	r1, [r3, r2]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	223d      	movs	r2, #61	; 0x3d
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2239      	movs	r2, #57	; 0x39
 80044ba:	2101      	movs	r1, #1
 80044bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d2:	230f      	movs	r3, #15
 80044d4:	18fb      	adds	r3, r7, r3
 80044d6:	2200      	movs	r2, #0
 80044d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2238      	movs	r2, #56	; 0x38
 80044de:	5c9b      	ldrb	r3, [r3, r2]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_TIM_ConfigClockSource+0x20>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e0bc      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x19a>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2238      	movs	r2, #56	; 0x38
 80044ec:	2101      	movs	r1, #1
 80044ee:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2239      	movs	r2, #57	; 0x39
 80044f4:	2102      	movs	r1, #2
 80044f6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2277      	movs	r2, #119	; 0x77
 8004504:	4393      	bics	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4a58      	ldr	r2, [pc, #352]	; (800466c <HAL_TIM_ConfigClockSource+0x1a4>)
 800450c:	4013      	ands	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2280      	movs	r2, #128	; 0x80
 800451e:	0192      	lsls	r2, r2, #6
 8004520:	4293      	cmp	r3, r2
 8004522:	d040      	beq.n	80045a6 <HAL_TIM_ConfigClockSource+0xde>
 8004524:	2280      	movs	r2, #128	; 0x80
 8004526:	0192      	lsls	r2, r2, #6
 8004528:	4293      	cmp	r3, r2
 800452a:	d900      	bls.n	800452e <HAL_TIM_ConfigClockSource+0x66>
 800452c:	e088      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
 800452e:	2280      	movs	r2, #128	; 0x80
 8004530:	0152      	lsls	r2, r2, #5
 8004532:	4293      	cmp	r3, r2
 8004534:	d100      	bne.n	8004538 <HAL_TIM_ConfigClockSource+0x70>
 8004536:	e088      	b.n	800464a <HAL_TIM_ConfigClockSource+0x182>
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	0152      	lsls	r2, r2, #5
 800453c:	4293      	cmp	r3, r2
 800453e:	d900      	bls.n	8004542 <HAL_TIM_ConfigClockSource+0x7a>
 8004540:	e07e      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
 8004542:	2b70      	cmp	r3, #112	; 0x70
 8004544:	d018      	beq.n	8004578 <HAL_TIM_ConfigClockSource+0xb0>
 8004546:	d900      	bls.n	800454a <HAL_TIM_ConfigClockSource+0x82>
 8004548:	e07a      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
 800454a:	2b60      	cmp	r3, #96	; 0x60
 800454c:	d04f      	beq.n	80045ee <HAL_TIM_ConfigClockSource+0x126>
 800454e:	d900      	bls.n	8004552 <HAL_TIM_ConfigClockSource+0x8a>
 8004550:	e076      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
 8004552:	2b50      	cmp	r3, #80	; 0x50
 8004554:	d03b      	beq.n	80045ce <HAL_TIM_ConfigClockSource+0x106>
 8004556:	d900      	bls.n	800455a <HAL_TIM_ConfigClockSource+0x92>
 8004558:	e072      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
 800455a:	2b40      	cmp	r3, #64	; 0x40
 800455c:	d057      	beq.n	800460e <HAL_TIM_ConfigClockSource+0x146>
 800455e:	d900      	bls.n	8004562 <HAL_TIM_ConfigClockSource+0x9a>
 8004560:	e06e      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
 8004562:	2b30      	cmp	r3, #48	; 0x30
 8004564:	d063      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x166>
 8004566:	d86b      	bhi.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
 8004568:	2b20      	cmp	r3, #32
 800456a:	d060      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x166>
 800456c:	d868      	bhi.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d05d      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x166>
 8004572:	2b10      	cmp	r3, #16
 8004574:	d05b      	beq.n	800462e <HAL_TIM_ConfigClockSource+0x166>
 8004576:	e063      	b.n	8004640 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6899      	ldr	r1, [r3, #8]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f000 f94a 	bl	8004820 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2277      	movs	r2, #119	; 0x77
 8004598:	4313      	orrs	r3, r2
 800459a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	609a      	str	r2, [r3, #8]
      break;
 80045a4:	e052      	b.n	800464c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6818      	ldr	r0, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6899      	ldr	r1, [r3, #8]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f000 f933 	bl	8004820 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2180      	movs	r1, #128	; 0x80
 80045c6:	01c9      	lsls	r1, r1, #7
 80045c8:	430a      	orrs	r2, r1
 80045ca:	609a      	str	r2, [r3, #8]
      break;
 80045cc:	e03e      	b.n	800464c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6859      	ldr	r1, [r3, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	001a      	movs	r2, r3
 80045dc:	f000 f8a6 	bl	800472c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2150      	movs	r1, #80	; 0x50
 80045e6:	0018      	movs	r0, r3
 80045e8:	f000 f900 	bl	80047ec <TIM_ITRx_SetConfig>
      break;
 80045ec:	e02e      	b.n	800464c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6859      	ldr	r1, [r3, #4]
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	001a      	movs	r2, r3
 80045fc:	f000 f8c4 	bl	8004788 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2160      	movs	r1, #96	; 0x60
 8004606:	0018      	movs	r0, r3
 8004608:	f000 f8f0 	bl	80047ec <TIM_ITRx_SetConfig>
      break;
 800460c:	e01e      	b.n	800464c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6859      	ldr	r1, [r3, #4]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	001a      	movs	r2, r3
 800461c:	f000 f886 	bl	800472c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2140      	movs	r1, #64	; 0x40
 8004626:	0018      	movs	r0, r3
 8004628:	f000 f8e0 	bl	80047ec <TIM_ITRx_SetConfig>
      break;
 800462c:	e00e      	b.n	800464c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	0019      	movs	r1, r3
 8004638:	0010      	movs	r0, r2
 800463a:	f000 f8d7 	bl	80047ec <TIM_ITRx_SetConfig>
      break;
 800463e:	e005      	b.n	800464c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004640:	230f      	movs	r3, #15
 8004642:	18fb      	adds	r3, r7, r3
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
      break;
 8004648:	e000      	b.n	800464c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800464a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2239      	movs	r2, #57	; 0x39
 8004650:	2101      	movs	r1, #1
 8004652:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2238      	movs	r2, #56	; 0x38
 8004658:	2100      	movs	r1, #0
 800465a:	5499      	strb	r1, [r3, r2]

  return status;
 800465c:	230f      	movs	r3, #15
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	781b      	ldrb	r3, [r3, #0]
}
 8004662:	0018      	movs	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	b004      	add	sp, #16
 8004668:	bd80      	pop	{r7, pc}
 800466a:	46c0      	nop			; (mov r8, r8)
 800466c:	ffff00ff 	.word	0xffff00ff

08004670 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	05db      	lsls	r3, r3, #23
 8004686:	429a      	cmp	r2, r3
 8004688:	d00b      	beq.n	80046a2 <TIM_Base_SetConfig+0x32>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a23      	ldr	r2, [pc, #140]	; (800471c <TIM_Base_SetConfig+0xac>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d007      	beq.n	80046a2 <TIM_Base_SetConfig+0x32>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4a22      	ldr	r2, [pc, #136]	; (8004720 <TIM_Base_SetConfig+0xb0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d003      	beq.n	80046a2 <TIM_Base_SetConfig+0x32>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a21      	ldr	r2, [pc, #132]	; (8004724 <TIM_Base_SetConfig+0xb4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d108      	bne.n	80046b4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2270      	movs	r2, #112	; 0x70
 80046a6:	4393      	bics	r3, r2
 80046a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	05db      	lsls	r3, r3, #23
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d00b      	beq.n	80046d6 <TIM_Base_SetConfig+0x66>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a16      	ldr	r2, [pc, #88]	; (800471c <TIM_Base_SetConfig+0xac>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d007      	beq.n	80046d6 <TIM_Base_SetConfig+0x66>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a15      	ldr	r2, [pc, #84]	; (8004720 <TIM_Base_SetConfig+0xb0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d003      	beq.n	80046d6 <TIM_Base_SetConfig+0x66>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a14      	ldr	r2, [pc, #80]	; (8004724 <TIM_Base_SetConfig+0xb4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d108      	bne.n	80046e8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a13      	ldr	r2, [pc, #76]	; (8004728 <TIM_Base_SetConfig+0xb8>)
 80046da:	4013      	ands	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2280      	movs	r2, #128	; 0x80
 80046ec:	4393      	bics	r3, r2
 80046ee:	001a      	movs	r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	615a      	str	r2, [r3, #20]
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b004      	add	sp, #16
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40000400 	.word	0x40000400
 8004720:	40010800 	.word	0x40010800
 8004724:	40011400 	.word	0x40011400
 8004728:	fffffcff 	.word	0xfffffcff

0800472c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	2201      	movs	r2, #1
 8004744:	4393      	bics	r3, r2
 8004746:	001a      	movs	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	699b      	ldr	r3, [r3, #24]
 8004750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	22f0      	movs	r2, #240	; 0xf0
 8004756:	4393      	bics	r3, r2
 8004758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	220a      	movs	r2, #10
 8004768:	4393      	bics	r3, r2
 800476a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	621a      	str	r2, [r3, #32]
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b006      	add	sp, #24
 8004786:	bd80      	pop	{r7, pc}

08004788 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	2210      	movs	r2, #16
 800479a:	4393      	bics	r3, r2
 800479c:	001a      	movs	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	4a0d      	ldr	r2, [pc, #52]	; (80047e8 <TIM_TI2_ConfigInputStage+0x60>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	031b      	lsls	r3, r3, #12
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	22a0      	movs	r2, #160	; 0xa0
 80047c4:	4393      	bics	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b006      	add	sp, #24
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	ffff0fff 	.word	0xffff0fff

080047ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2270      	movs	r2, #112	; 0x70
 8004800:	4393      	bics	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	2207      	movs	r2, #7
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	609a      	str	r2, [r3, #8]
}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	46bd      	mov	sp, r7
 800481a:	b004      	add	sp, #16
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	4a09      	ldr	r2, [pc, #36]	; (800485c <TIM_ETR_SetConfig+0x3c>)
 8004838:	4013      	ands	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	021a      	lsls	r2, r3, #8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	431a      	orrs	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4313      	orrs	r3, r2
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	609a      	str	r2, [r3, #8]
}
 8004854:	46c0      	nop			; (mov r8, r8)
 8004856:	46bd      	mov	sp, r7
 8004858:	b006      	add	sp, #24
 800485a:	bd80      	pop	{r7, pc}
 800485c:	ffff00ff 	.word	0xffff00ff

08004860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2238      	movs	r2, #56	; 0x38
 800486e:	5c9b      	ldrb	r3, [r3, r2]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004874:	2302      	movs	r3, #2
 8004876:	e047      	b.n	8004908 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2238      	movs	r2, #56	; 0x38
 800487c:	2101      	movs	r1, #1
 800487e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2239      	movs	r2, #57	; 0x39
 8004884:	2102      	movs	r1, #2
 8004886:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2270      	movs	r2, #112	; 0x70
 800489c:	4393      	bics	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	2380      	movs	r3, #128	; 0x80
 80048b8:	05db      	lsls	r3, r3, #23
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d00e      	beq.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a13      	ldr	r2, [pc, #76]	; (8004910 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d009      	beq.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a11      	ldr	r2, [pc, #68]	; (8004914 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a10      	ldr	r2, [pc, #64]	; (8004918 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d10c      	bne.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2280      	movs	r2, #128	; 0x80
 80048e0:	4393      	bics	r3, r2
 80048e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2239      	movs	r2, #57	; 0x39
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2238      	movs	r2, #56	; 0x38
 8004902:	2100      	movs	r1, #0
 8004904:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b004      	add	sp, #16
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40000400 	.word	0x40000400
 8004914:	40010800 	.word	0x40010800
 8004918:	40011400 	.word	0x40011400

0800491c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e044      	b.n	80049b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004932:	2b00      	cmp	r3, #0
 8004934:	d107      	bne.n	8004946 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2278      	movs	r2, #120	; 0x78
 800493a:	2100      	movs	r1, #0
 800493c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	0018      	movs	r0, r3
 8004942:	f7fe f9e3 	bl	8002d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2224      	movs	r2, #36	; 0x24
 800494a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2101      	movs	r1, #1
 8004958:	438a      	bics	r2, r1
 800495a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	0018      	movs	r0, r3
 8004960:	f000 f8d0 	bl	8004b04 <UART_SetConfig>
 8004964:	0003      	movs	r3, r0
 8004966:	2b01      	cmp	r3, #1
 8004968:	d101      	bne.n	800496e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e024      	b.n	80049b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	0018      	movs	r0, r3
 800497a:	f000 fb61 	bl	8005040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	490d      	ldr	r1, [pc, #52]	; (80049c0 <HAL_UART_Init+0xa4>)
 800498a:	400a      	ands	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	212a      	movs	r1, #42	; 0x2a
 800499a:	438a      	bics	r2, r1
 800499c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2101      	movs	r1, #1
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 fbf9 	bl	80051a8 <UART_CheckIdleState>
 80049b6:	0003      	movs	r3, r0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	ffffb7ff 	.word	0xffffb7ff

080049c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b08a      	sub	sp, #40	; 0x28
 80049c8:	af02      	add	r7, sp, #8
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	1dbb      	adds	r3, r7, #6
 80049d2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d000      	beq.n	80049de <HAL_UART_Transmit+0x1a>
 80049dc:	e08c      	b.n	8004af8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_UART_Transmit+0x28>
 80049e4:	1dbb      	adds	r3, r7, #6
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e084      	b.n	8004afa <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	015b      	lsls	r3, r3, #5
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d109      	bne.n	8004a10 <HAL_UART_Transmit+0x4c>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d105      	bne.n	8004a10 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2201      	movs	r2, #1
 8004a08:	4013      	ands	r3, r2
 8004a0a:	d001      	beq.n	8004a10 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e074      	b.n	8004afa <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2284      	movs	r2, #132	; 0x84
 8004a14:	2100      	movs	r1, #0
 8004a16:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2221      	movs	r2, #33	; 0x21
 8004a1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a1e:	f7fe fb25 	bl	800306c <HAL_GetTick>
 8004a22:	0003      	movs	r3, r0
 8004a24:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1dba      	adds	r2, r7, #6
 8004a2a:	2150      	movs	r1, #80	; 0x50
 8004a2c:	8812      	ldrh	r2, [r2, #0]
 8004a2e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1dba      	adds	r2, r7, #6
 8004a34:	2152      	movs	r1, #82	; 0x52
 8004a36:	8812      	ldrh	r2, [r2, #0]
 8004a38:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	2380      	movs	r3, #128	; 0x80
 8004a40:	015b      	lsls	r3, r3, #5
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d108      	bne.n	8004a58 <HAL_UART_Transmit+0x94>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d104      	bne.n	8004a58 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	e003      	b.n	8004a60 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a60:	e02f      	b.n	8004ac2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	0013      	movs	r3, r2
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2180      	movs	r1, #128	; 0x80
 8004a70:	f000 fc42 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 8004a74:	1e03      	subs	r3, r0, #0
 8004a76:	d004      	beq.n	8004a82 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e03b      	b.n	8004afa <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10b      	bne.n	8004aa0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	881b      	ldrh	r3, [r3, #0]
 8004a8c:	001a      	movs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	05d2      	lsls	r2, r2, #23
 8004a94:	0dd2      	lsrs	r2, r2, #23
 8004a96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	e007      	b.n	8004ab0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	781a      	ldrb	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	3301      	adds	r3, #1
 8004aae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2252      	movs	r2, #82	; 0x52
 8004ab4:	5a9b      	ldrh	r3, [r3, r2]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b299      	uxth	r1, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2252      	movs	r2, #82	; 0x52
 8004ac0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2252      	movs	r2, #82	; 0x52
 8004ac6:	5a9b      	ldrh	r3, [r3, r2]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1c9      	bne.n	8004a62 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	0013      	movs	r3, r2
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2140      	movs	r1, #64	; 0x40
 8004adc:	f000 fc0c 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 8004ae0:	1e03      	subs	r3, r0, #0
 8004ae2:	d004      	beq.n	8004aee <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e005      	b.n	8004afa <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
  }
}
 8004afa:	0018      	movs	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	b008      	add	sp, #32
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	b5b0      	push	{r4, r5, r7, lr}
 8004b06:	b08e      	sub	sp, #56	; 0x38
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0c:	231a      	movs	r3, #26
 8004b0e:	2218      	movs	r2, #24
 8004b10:	189b      	adds	r3, r3, r2
 8004b12:	19db      	adds	r3, r3, r7
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	431a      	orrs	r2, r3
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4ac3      	ldr	r2, [pc, #780]	; (8004e44 <UART_SetConfig+0x340>)
 8004b38:	4013      	ands	r3, r2
 8004b3a:	0019      	movs	r1, r3
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b42:	430a      	orrs	r2, r1
 8004b44:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	4abe      	ldr	r2, [pc, #760]	; (8004e48 <UART_SetConfig+0x344>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	0019      	movs	r1, r3
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	68da      	ldr	r2, [r3, #12]
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4ab8      	ldr	r2, [pc, #736]	; (8004e4c <UART_SetConfig+0x348>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d004      	beq.n	8004b78 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b74:	4313      	orrs	r3, r2
 8004b76:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	4ab4      	ldr	r2, [pc, #720]	; (8004e50 <UART_SetConfig+0x34c>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	0019      	movs	r1, r3
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4ab0      	ldr	r2, [pc, #704]	; (8004e54 <UART_SetConfig+0x350>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d131      	bne.n	8004bfc <UART_SetConfig+0xf8>
 8004b98:	4baf      	ldr	r3, [pc, #700]	; (8004e58 <UART_SetConfig+0x354>)
 8004b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9c:	2203      	movs	r2, #3
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d01d      	beq.n	8004be0 <UART_SetConfig+0xdc>
 8004ba4:	d823      	bhi.n	8004bee <UART_SetConfig+0xea>
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d00c      	beq.n	8004bc4 <UART_SetConfig+0xc0>
 8004baa:	d820      	bhi.n	8004bee <UART_SetConfig+0xea>
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <UART_SetConfig+0xb2>
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d00e      	beq.n	8004bd2 <UART_SetConfig+0xce>
 8004bb4:	e01b      	b.n	8004bee <UART_SetConfig+0xea>
 8004bb6:	231b      	movs	r3, #27
 8004bb8:	2218      	movs	r2, #24
 8004bba:	189b      	adds	r3, r3, r2
 8004bbc:	19db      	adds	r3, r3, r7
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	701a      	strb	r2, [r3, #0]
 8004bc2:	e0b4      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004bc4:	231b      	movs	r3, #27
 8004bc6:	2218      	movs	r2, #24
 8004bc8:	189b      	adds	r3, r3, r2
 8004bca:	19db      	adds	r3, r3, r7
 8004bcc:	2202      	movs	r2, #2
 8004bce:	701a      	strb	r2, [r3, #0]
 8004bd0:	e0ad      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004bd2:	231b      	movs	r3, #27
 8004bd4:	2218      	movs	r2, #24
 8004bd6:	189b      	adds	r3, r3, r2
 8004bd8:	19db      	adds	r3, r3, r7
 8004bda:	2204      	movs	r2, #4
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	e0a6      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004be0:	231b      	movs	r3, #27
 8004be2:	2218      	movs	r2, #24
 8004be4:	189b      	adds	r3, r3, r2
 8004be6:	19db      	adds	r3, r3, r7
 8004be8:	2208      	movs	r2, #8
 8004bea:	701a      	strb	r2, [r3, #0]
 8004bec:	e09f      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004bee:	231b      	movs	r3, #27
 8004bf0:	2218      	movs	r2, #24
 8004bf2:	189b      	adds	r3, r3, r2
 8004bf4:	19db      	adds	r3, r3, r7
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e098      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a96      	ldr	r2, [pc, #600]	; (8004e5c <UART_SetConfig+0x358>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d131      	bne.n	8004c6a <UART_SetConfig+0x166>
 8004c06:	4b94      	ldr	r3, [pc, #592]	; (8004e58 <UART_SetConfig+0x354>)
 8004c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0a:	220c      	movs	r2, #12
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	2b0c      	cmp	r3, #12
 8004c10:	d01d      	beq.n	8004c4e <UART_SetConfig+0x14a>
 8004c12:	d823      	bhi.n	8004c5c <UART_SetConfig+0x158>
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d00c      	beq.n	8004c32 <UART_SetConfig+0x12e>
 8004c18:	d820      	bhi.n	8004c5c <UART_SetConfig+0x158>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <UART_SetConfig+0x120>
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d00e      	beq.n	8004c40 <UART_SetConfig+0x13c>
 8004c22:	e01b      	b.n	8004c5c <UART_SetConfig+0x158>
 8004c24:	231b      	movs	r3, #27
 8004c26:	2218      	movs	r2, #24
 8004c28:	189b      	adds	r3, r3, r2
 8004c2a:	19db      	adds	r3, r3, r7
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e07d      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004c32:	231b      	movs	r3, #27
 8004c34:	2218      	movs	r2, #24
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	19db      	adds	r3, r3, r7
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e076      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004c40:	231b      	movs	r3, #27
 8004c42:	2218      	movs	r2, #24
 8004c44:	189b      	adds	r3, r3, r2
 8004c46:	19db      	adds	r3, r3, r7
 8004c48:	2204      	movs	r2, #4
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e06f      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004c4e:	231b      	movs	r3, #27
 8004c50:	2218      	movs	r2, #24
 8004c52:	189b      	adds	r3, r3, r2
 8004c54:	19db      	adds	r3, r3, r7
 8004c56:	2208      	movs	r2, #8
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	e068      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004c5c:	231b      	movs	r3, #27
 8004c5e:	2218      	movs	r2, #24
 8004c60:	189b      	adds	r3, r3, r2
 8004c62:	19db      	adds	r3, r3, r7
 8004c64:	2210      	movs	r2, #16
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	e061      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a7c      	ldr	r2, [pc, #496]	; (8004e60 <UART_SetConfig+0x35c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d106      	bne.n	8004c82 <UART_SetConfig+0x17e>
 8004c74:	231b      	movs	r3, #27
 8004c76:	2218      	movs	r2, #24
 8004c78:	189b      	adds	r3, r3, r2
 8004c7a:	19db      	adds	r3, r3, r7
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
 8004c80:	e055      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a77      	ldr	r2, [pc, #476]	; (8004e64 <UART_SetConfig+0x360>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d106      	bne.n	8004c9a <UART_SetConfig+0x196>
 8004c8c:	231b      	movs	r3, #27
 8004c8e:	2218      	movs	r2, #24
 8004c90:	189b      	adds	r3, r3, r2
 8004c92:	19db      	adds	r3, r3, r7
 8004c94:	2200      	movs	r2, #0
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e049      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a6b      	ldr	r2, [pc, #428]	; (8004e4c <UART_SetConfig+0x348>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d13e      	bne.n	8004d22 <UART_SetConfig+0x21e>
 8004ca4:	4b6c      	ldr	r3, [pc, #432]	; (8004e58 <UART_SetConfig+0x354>)
 8004ca6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ca8:	23c0      	movs	r3, #192	; 0xc0
 8004caa:	011b      	lsls	r3, r3, #4
 8004cac:	4013      	ands	r3, r2
 8004cae:	22c0      	movs	r2, #192	; 0xc0
 8004cb0:	0112      	lsls	r2, r2, #4
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d027      	beq.n	8004d06 <UART_SetConfig+0x202>
 8004cb6:	22c0      	movs	r2, #192	; 0xc0
 8004cb8:	0112      	lsls	r2, r2, #4
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d82a      	bhi.n	8004d14 <UART_SetConfig+0x210>
 8004cbe:	2280      	movs	r2, #128	; 0x80
 8004cc0:	0112      	lsls	r2, r2, #4
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d011      	beq.n	8004cea <UART_SetConfig+0x1e6>
 8004cc6:	2280      	movs	r2, #128	; 0x80
 8004cc8:	0112      	lsls	r2, r2, #4
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d822      	bhi.n	8004d14 <UART_SetConfig+0x210>
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <UART_SetConfig+0x1d8>
 8004cd2:	2280      	movs	r2, #128	; 0x80
 8004cd4:	00d2      	lsls	r2, r2, #3
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00e      	beq.n	8004cf8 <UART_SetConfig+0x1f4>
 8004cda:	e01b      	b.n	8004d14 <UART_SetConfig+0x210>
 8004cdc:	231b      	movs	r3, #27
 8004cde:	2218      	movs	r2, #24
 8004ce0:	189b      	adds	r3, r3, r2
 8004ce2:	19db      	adds	r3, r3, r7
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	e021      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004cea:	231b      	movs	r3, #27
 8004cec:	2218      	movs	r2, #24
 8004cee:	189b      	adds	r3, r3, r2
 8004cf0:	19db      	adds	r3, r3, r7
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	e01a      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004cf8:	231b      	movs	r3, #27
 8004cfa:	2218      	movs	r2, #24
 8004cfc:	189b      	adds	r3, r3, r2
 8004cfe:	19db      	adds	r3, r3, r7
 8004d00:	2204      	movs	r2, #4
 8004d02:	701a      	strb	r2, [r3, #0]
 8004d04:	e013      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004d06:	231b      	movs	r3, #27
 8004d08:	2218      	movs	r2, #24
 8004d0a:	189b      	adds	r3, r3, r2
 8004d0c:	19db      	adds	r3, r3, r7
 8004d0e:	2208      	movs	r2, #8
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	e00c      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004d14:	231b      	movs	r3, #27
 8004d16:	2218      	movs	r2, #24
 8004d18:	189b      	adds	r3, r3, r2
 8004d1a:	19db      	adds	r3, r3, r7
 8004d1c:	2210      	movs	r2, #16
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	e005      	b.n	8004d2e <UART_SetConfig+0x22a>
 8004d22:	231b      	movs	r3, #27
 8004d24:	2218      	movs	r2, #24
 8004d26:	189b      	adds	r3, r3, r2
 8004d28:	19db      	adds	r3, r3, r7
 8004d2a:	2210      	movs	r2, #16
 8004d2c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a46      	ldr	r2, [pc, #280]	; (8004e4c <UART_SetConfig+0x348>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d000      	beq.n	8004d3a <UART_SetConfig+0x236>
 8004d38:	e09a      	b.n	8004e70 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d3a:	231b      	movs	r3, #27
 8004d3c:	2218      	movs	r2, #24
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	19db      	adds	r3, r3, r7
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d01d      	beq.n	8004d84 <UART_SetConfig+0x280>
 8004d48:	dc20      	bgt.n	8004d8c <UART_SetConfig+0x288>
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d015      	beq.n	8004d7a <UART_SetConfig+0x276>
 8004d4e:	dc1d      	bgt.n	8004d8c <UART_SetConfig+0x288>
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d002      	beq.n	8004d5a <UART_SetConfig+0x256>
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d005      	beq.n	8004d64 <UART_SetConfig+0x260>
 8004d58:	e018      	b.n	8004d8c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d5a:	f7ff f9ed 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8004d5e:	0003      	movs	r3, r0
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d62:	e01c      	b.n	8004d9e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d64:	4b3c      	ldr	r3, [pc, #240]	; (8004e58 <UART_SetConfig+0x354>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2210      	movs	r2, #16
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d002      	beq.n	8004d74 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d6e:	4b3e      	ldr	r3, [pc, #248]	; (8004e68 <UART_SetConfig+0x364>)
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d72:	e014      	b.n	8004d9e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004d74:	4b3d      	ldr	r3, [pc, #244]	; (8004e6c <UART_SetConfig+0x368>)
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d78:	e011      	b.n	8004d9e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d7a:	f7ff f92d 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8004d7e:	0003      	movs	r3, r0
 8004d80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d82:	e00c      	b.n	8004d9e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d8a:	e008      	b.n	8004d9e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d90:	231a      	movs	r3, #26
 8004d92:	2218      	movs	r2, #24
 8004d94:	189b      	adds	r3, r3, r2
 8004d96:	19db      	adds	r3, r3, r7
 8004d98:	2201      	movs	r2, #1
 8004d9a:	701a      	strb	r2, [r3, #0]
        break;
 8004d9c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d100      	bne.n	8004da6 <UART_SetConfig+0x2a2>
 8004da4:	e133      	b.n	800500e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	0013      	movs	r3, r2
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	189b      	adds	r3, r3, r2
 8004db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d305      	bcc.n	8004dc2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d906      	bls.n	8004dd0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004dc2:	231a      	movs	r3, #26
 8004dc4:	2218      	movs	r2, #24
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	19db      	adds	r3, r3, r7
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	e11e      	b.n	800500e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	6939      	ldr	r1, [r7, #16]
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	000b      	movs	r3, r1
 8004dde:	0e1b      	lsrs	r3, r3, #24
 8004de0:	0010      	movs	r0, r2
 8004de2:	0205      	lsls	r5, r0, #8
 8004de4:	431d      	orrs	r5, r3
 8004de6:	000b      	movs	r3, r1
 8004de8:	021c      	lsls	r4, r3, #8
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	085b      	lsrs	r3, r3, #1
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	68b8      	ldr	r0, [r7, #8]
 8004df8:	68f9      	ldr	r1, [r7, #12]
 8004dfa:	1900      	adds	r0, r0, r4
 8004dfc:	4169      	adcs	r1, r5
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	607b      	str	r3, [r7, #4]
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f7fb fb4c 	bl	80004a8 <__aeabi_uldivmod>
 8004e10:	0002      	movs	r2, r0
 8004e12:	000b      	movs	r3, r1
 8004e14:	0013      	movs	r3, r2
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e1a:	23c0      	movs	r3, #192	; 0xc0
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d309      	bcc.n	8004e36 <UART_SetConfig+0x332>
 8004e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e24:	2380      	movs	r3, #128	; 0x80
 8004e26:	035b      	lsls	r3, r3, #13
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d204      	bcs.n	8004e36 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e32:	60da      	str	r2, [r3, #12]
 8004e34:	e0eb      	b.n	800500e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004e36:	231a      	movs	r3, #26
 8004e38:	2218      	movs	r2, #24
 8004e3a:	189b      	adds	r3, r3, r2
 8004e3c:	19db      	adds	r3, r3, r7
 8004e3e:	2201      	movs	r2, #1
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	e0e4      	b.n	800500e <UART_SetConfig+0x50a>
 8004e44:	efff69f3 	.word	0xefff69f3
 8004e48:	ffffcfff 	.word	0xffffcfff
 8004e4c:	40004800 	.word	0x40004800
 8004e50:	fffff4ff 	.word	0xfffff4ff
 8004e54:	40013800 	.word	0x40013800
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	40004400 	.word	0x40004400
 8004e60:	40004c00 	.word	0x40004c00
 8004e64:	40005000 	.word	0x40005000
 8004e68:	003d0900 	.word	0x003d0900
 8004e6c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d000      	beq.n	8004e7e <UART_SetConfig+0x37a>
 8004e7c:	e070      	b.n	8004f60 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004e7e:	231b      	movs	r3, #27
 8004e80:	2218      	movs	r2, #24
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	19db      	adds	r3, r3, r7
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d822      	bhi.n	8004ed2 <UART_SetConfig+0x3ce>
 8004e8c:	009a      	lsls	r2, r3, #2
 8004e8e:	4b67      	ldr	r3, [pc, #412]	; (800502c <UART_SetConfig+0x528>)
 8004e90:	18d3      	adds	r3, r2, r3
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e96:	f7ff f94f 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e9e:	e021      	b.n	8004ee4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea0:	f7ff f960 	bl	8004164 <HAL_RCC_GetPCLK2Freq>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ea8:	e01c      	b.n	8004ee4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eaa:	4b61      	ldr	r3, [pc, #388]	; (8005030 <UART_SetConfig+0x52c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2210      	movs	r2, #16
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	d002      	beq.n	8004eba <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004eb4:	4b5f      	ldr	r3, [pc, #380]	; (8005034 <UART_SetConfig+0x530>)
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004eb8:	e014      	b.n	8004ee4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004eba:	4b5f      	ldr	r3, [pc, #380]	; (8005038 <UART_SetConfig+0x534>)
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ebe:	e011      	b.n	8004ee4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec0:	f7ff f88a 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ec8:	e00c      	b.n	8004ee4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eca:	2380      	movs	r3, #128	; 0x80
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ed0:	e008      	b.n	8004ee4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004ed6:	231a      	movs	r3, #26
 8004ed8:	2218      	movs	r2, #24
 8004eda:	189b      	adds	r3, r3, r2
 8004edc:	19db      	adds	r3, r3, r7
 8004ede:	2201      	movs	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
        break;
 8004ee2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d100      	bne.n	8004eec <UART_SetConfig+0x3e8>
 8004eea:	e090      	b.n	800500e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	005a      	lsls	r2, r3, #1
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	18d2      	adds	r2, r2, r3
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0019      	movs	r1, r3
 8004efe:	0010      	movs	r0, r2
 8004f00:	f7fb f91e 	bl	8000140 <__udivsi3>
 8004f04:	0003      	movs	r3, r0
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	2b0f      	cmp	r3, #15
 8004f0c:	d921      	bls.n	8004f52 <UART_SetConfig+0x44e>
 8004f0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f10:	2380      	movs	r3, #128	; 0x80
 8004f12:	025b      	lsls	r3, r3, #9
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d21c      	bcs.n	8004f52 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	200e      	movs	r0, #14
 8004f1e:	2418      	movs	r4, #24
 8004f20:	1903      	adds	r3, r0, r4
 8004f22:	19db      	adds	r3, r3, r7
 8004f24:	210f      	movs	r1, #15
 8004f26:	438a      	bics	r2, r1
 8004f28:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2207      	movs	r2, #7
 8004f32:	4013      	ands	r3, r2
 8004f34:	b299      	uxth	r1, r3
 8004f36:	1903      	adds	r3, r0, r4
 8004f38:	19db      	adds	r3, r3, r7
 8004f3a:	1902      	adds	r2, r0, r4
 8004f3c:	19d2      	adds	r2, r2, r7
 8004f3e:	8812      	ldrh	r2, [r2, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	1902      	adds	r2, r0, r4
 8004f4a:	19d2      	adds	r2, r2, r7
 8004f4c:	8812      	ldrh	r2, [r2, #0]
 8004f4e:	60da      	str	r2, [r3, #12]
 8004f50:	e05d      	b.n	800500e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004f52:	231a      	movs	r3, #26
 8004f54:	2218      	movs	r2, #24
 8004f56:	189b      	adds	r3, r3, r2
 8004f58:	19db      	adds	r3, r3, r7
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	e056      	b.n	800500e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f60:	231b      	movs	r3, #27
 8004f62:	2218      	movs	r2, #24
 8004f64:	189b      	adds	r3, r3, r2
 8004f66:	19db      	adds	r3, r3, r7
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d822      	bhi.n	8004fb4 <UART_SetConfig+0x4b0>
 8004f6e:	009a      	lsls	r2, r3, #2
 8004f70:	4b32      	ldr	r3, [pc, #200]	; (800503c <UART_SetConfig+0x538>)
 8004f72:	18d3      	adds	r3, r2, r3
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f78:	f7ff f8de 	bl	8004138 <HAL_RCC_GetPCLK1Freq>
 8004f7c:	0003      	movs	r3, r0
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f80:	e021      	b.n	8004fc6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f82:	f7ff f8ef 	bl	8004164 <HAL_RCC_GetPCLK2Freq>
 8004f86:	0003      	movs	r3, r0
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f8a:	e01c      	b.n	8004fc6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f8c:	4b28      	ldr	r3, [pc, #160]	; (8005030 <UART_SetConfig+0x52c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2210      	movs	r2, #16
 8004f92:	4013      	ands	r3, r2
 8004f94:	d002      	beq.n	8004f9c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f96:	4b27      	ldr	r3, [pc, #156]	; (8005034 <UART_SetConfig+0x530>)
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f9a:	e014      	b.n	8004fc6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004f9c:	4b26      	ldr	r3, [pc, #152]	; (8005038 <UART_SetConfig+0x534>)
 8004f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fa0:	e011      	b.n	8004fc6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa2:	f7ff f819 	bl	8003fd8 <HAL_RCC_GetSysClockFreq>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004faa:	e00c      	b.n	8004fc6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004fb2:	e008      	b.n	8004fc6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004fb8:	231a      	movs	r3, #26
 8004fba:	2218      	movs	r2, #24
 8004fbc:	189b      	adds	r3, r3, r2
 8004fbe:	19db      	adds	r3, r3, r7
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]
        break;
 8004fc4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d020      	beq.n	800500e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	085a      	lsrs	r2, r3, #1
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	18d2      	adds	r2, r2, r3
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	0019      	movs	r1, r3
 8004fdc:	0010      	movs	r0, r2
 8004fde:	f7fb f8af 	bl	8000140 <__udivsi3>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	2b0f      	cmp	r3, #15
 8004fea:	d90a      	bls.n	8005002 <UART_SetConfig+0x4fe>
 8004fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	025b      	lsls	r3, r3, #9
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d205      	bcs.n	8005002 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60da      	str	r2, [r3, #12]
 8005000:	e005      	b.n	800500e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005002:	231a      	movs	r3, #26
 8005004:	2218      	movs	r2, #24
 8005006:	189b      	adds	r3, r3, r2
 8005008:	19db      	adds	r3, r3, r7
 800500a:	2201      	movs	r2, #1
 800500c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	2200      	movs	r2, #0
 8005012:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	2200      	movs	r2, #0
 8005018:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800501a:	231a      	movs	r3, #26
 800501c:	2218      	movs	r2, #24
 800501e:	189b      	adds	r3, r3, r2
 8005020:	19db      	adds	r3, r3, r7
 8005022:	781b      	ldrb	r3, [r3, #0]
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b00e      	add	sp, #56	; 0x38
 800502a:	bdb0      	pop	{r4, r5, r7, pc}
 800502c:	08008504 	.word	0x08008504
 8005030:	40021000 	.word	0x40021000
 8005034:	003d0900 	.word	0x003d0900
 8005038:	00f42400 	.word	0x00f42400
 800503c:	08008528 	.word	0x08008528

08005040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2201      	movs	r2, #1
 800504e:	4013      	ands	r3, r2
 8005050:	d00b      	beq.n	800506a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4a4a      	ldr	r2, [pc, #296]	; (8005184 <UART_AdvFeatureConfig+0x144>)
 800505a:	4013      	ands	r3, r2
 800505c:	0019      	movs	r1, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	2202      	movs	r2, #2
 8005070:	4013      	ands	r3, r2
 8005072:	d00b      	beq.n	800508c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4a43      	ldr	r2, [pc, #268]	; (8005188 <UART_AdvFeatureConfig+0x148>)
 800507c:	4013      	ands	r3, r2
 800507e:	0019      	movs	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	2204      	movs	r2, #4
 8005092:	4013      	ands	r3, r2
 8005094:	d00b      	beq.n	80050ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a3b      	ldr	r2, [pc, #236]	; (800518c <UART_AdvFeatureConfig+0x14c>)
 800509e:	4013      	ands	r3, r2
 80050a0:	0019      	movs	r1, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	2208      	movs	r2, #8
 80050b4:	4013      	ands	r3, r2
 80050b6:	d00b      	beq.n	80050d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	4a34      	ldr	r2, [pc, #208]	; (8005190 <UART_AdvFeatureConfig+0x150>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	0019      	movs	r1, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2210      	movs	r2, #16
 80050d6:	4013      	ands	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	4a2c      	ldr	r2, [pc, #176]	; (8005194 <UART_AdvFeatureConfig+0x154>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	0019      	movs	r1, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	2220      	movs	r2, #32
 80050f8:	4013      	ands	r3, r2
 80050fa:	d00b      	beq.n	8005114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	4a25      	ldr	r2, [pc, #148]	; (8005198 <UART_AdvFeatureConfig+0x158>)
 8005104:	4013      	ands	r3, r2
 8005106:	0019      	movs	r1, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	2240      	movs	r2, #64	; 0x40
 800511a:	4013      	ands	r3, r2
 800511c:	d01d      	beq.n	800515a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	4a1d      	ldr	r2, [pc, #116]	; (800519c <UART_AdvFeatureConfig+0x15c>)
 8005126:	4013      	ands	r3, r2
 8005128:	0019      	movs	r1, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800513a:	2380      	movs	r3, #128	; 0x80
 800513c:	035b      	lsls	r3, r3, #13
 800513e:	429a      	cmp	r2, r3
 8005140:	d10b      	bne.n	800515a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4a15      	ldr	r2, [pc, #84]	; (80051a0 <UART_AdvFeatureConfig+0x160>)
 800514a:	4013      	ands	r3, r2
 800514c:	0019      	movs	r1, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2280      	movs	r2, #128	; 0x80
 8005160:	4013      	ands	r3, r2
 8005162:	d00b      	beq.n	800517c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	4a0e      	ldr	r2, [pc, #56]	; (80051a4 <UART_AdvFeatureConfig+0x164>)
 800516c:	4013      	ands	r3, r2
 800516e:	0019      	movs	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	430a      	orrs	r2, r1
 800517a:	605a      	str	r2, [r3, #4]
  }
}
 800517c:	46c0      	nop			; (mov r8, r8)
 800517e:	46bd      	mov	sp, r7
 8005180:	b002      	add	sp, #8
 8005182:	bd80      	pop	{r7, pc}
 8005184:	fffdffff 	.word	0xfffdffff
 8005188:	fffeffff 	.word	0xfffeffff
 800518c:	fffbffff 	.word	0xfffbffff
 8005190:	ffff7fff 	.word	0xffff7fff
 8005194:	ffffefff 	.word	0xffffefff
 8005198:	ffffdfff 	.word	0xffffdfff
 800519c:	ffefffff 	.word	0xffefffff
 80051a0:	ff9fffff 	.word	0xff9fffff
 80051a4:	fff7ffff 	.word	0xfff7ffff

080051a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b092      	sub	sp, #72	; 0x48
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2284      	movs	r2, #132	; 0x84
 80051b4:	2100      	movs	r1, #0
 80051b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b8:	f7fd ff58 	bl	800306c <HAL_GetTick>
 80051bc:	0003      	movs	r3, r0
 80051be:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2208      	movs	r2, #8
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d12c      	bne.n	8005228 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d0:	2280      	movs	r2, #128	; 0x80
 80051d2:	0391      	lsls	r1, r2, #14
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4a46      	ldr	r2, [pc, #280]	; (80052f0 <UART_CheckIdleState+0x148>)
 80051d8:	9200      	str	r2, [sp, #0]
 80051da:	2200      	movs	r2, #0
 80051dc:	f000 f88c 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 80051e0:	1e03      	subs	r3, r0, #0
 80051e2:	d021      	beq.n	8005228 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e4:	f3ef 8310 	mrs	r3, PRIMASK
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80051ee:	2301      	movs	r3, #1
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	f383 8810 	msr	PRIMASK, r3
}
 80051f8:	46c0      	nop			; (mov r8, r8)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	438a      	bics	r2, r1
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005210:	f383 8810 	msr	PRIMASK, r3
}
 8005214:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2278      	movs	r2, #120	; 0x78
 8005220:	2100      	movs	r1, #0
 8005222:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e05f      	b.n	80052e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2204      	movs	r2, #4
 8005230:	4013      	ands	r3, r2
 8005232:	2b04      	cmp	r3, #4
 8005234:	d146      	bne.n	80052c4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005238:	2280      	movs	r2, #128	; 0x80
 800523a:	03d1      	lsls	r1, r2, #15
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <UART_CheckIdleState+0x148>)
 8005240:	9200      	str	r2, [sp, #0]
 8005242:	2200      	movs	r2, #0
 8005244:	f000 f858 	bl	80052f8 <UART_WaitOnFlagUntilTimeout>
 8005248:	1e03      	subs	r3, r0, #0
 800524a:	d03b      	beq.n	80052c4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800524c:	f3ef 8310 	mrs	r3, PRIMASK
 8005250:	60fb      	str	r3, [r7, #12]
  return(result);
 8005252:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005254:	637b      	str	r3, [r7, #52]	; 0x34
 8005256:	2301      	movs	r3, #1
 8005258:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	f383 8810 	msr	PRIMASK, r3
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4921      	ldr	r1, [pc, #132]	; (80052f4 <UART_CheckIdleState+0x14c>)
 800526e:	400a      	ands	r2, r1
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005274:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f383 8810 	msr	PRIMASK, r3
}
 800527c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800527e:	f3ef 8310 	mrs	r3, PRIMASK
 8005282:	61bb      	str	r3, [r7, #24]
  return(result);
 8005284:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005286:	633b      	str	r3, [r7, #48]	; 0x30
 8005288:	2301      	movs	r3, #1
 800528a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f383 8810 	msr	PRIMASK, r3
}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2101      	movs	r1, #1
 80052a0:	438a      	bics	r2, r1
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	f383 8810 	msr	PRIMASK, r3
}
 80052ae:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2280      	movs	r2, #128	; 0x80
 80052b4:	2120      	movs	r1, #32
 80052b6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2278      	movs	r2, #120	; 0x78
 80052bc:	2100      	movs	r1, #0
 80052be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e011      	b.n	80052e8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2220      	movs	r2, #32
 80052c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2280      	movs	r2, #128	; 0x80
 80052ce:	2120      	movs	r1, #32
 80052d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2278      	movs	r2, #120	; 0x78
 80052e2:	2100      	movs	r1, #0
 80052e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	0018      	movs	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b010      	add	sp, #64	; 0x40
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	01ffffff 	.word	0x01ffffff
 80052f4:	fffffedf 	.word	0xfffffedf

080052f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	603b      	str	r3, [r7, #0]
 8005304:	1dfb      	adds	r3, r7, #7
 8005306:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005308:	e04b      	b.n	80053a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	3301      	adds	r3, #1
 800530e:	d048      	beq.n	80053a2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005310:	f7fd feac 	bl	800306c <HAL_GetTick>
 8005314:	0002      	movs	r2, r0
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	429a      	cmp	r2, r3
 800531e:	d302      	bcc.n	8005326 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e04b      	b.n	80053c2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2204      	movs	r2, #4
 8005332:	4013      	ands	r3, r2
 8005334:	d035      	beq.n	80053a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	2208      	movs	r2, #8
 800533e:	4013      	ands	r3, r2
 8005340:	2b08      	cmp	r3, #8
 8005342:	d111      	bne.n	8005368 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2208      	movs	r2, #8
 800534a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	0018      	movs	r0, r3
 8005350:	f000 f83c 	bl	80053cc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2284      	movs	r2, #132	; 0x84
 8005358:	2108      	movs	r1, #8
 800535a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2278      	movs	r2, #120	; 0x78
 8005360:	2100      	movs	r1, #0
 8005362:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e02c      	b.n	80053c2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	2380      	movs	r3, #128	; 0x80
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	401a      	ands	r2, r3
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	429a      	cmp	r2, r3
 800537a:	d112      	bne.n	80053a2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2280      	movs	r2, #128	; 0x80
 8005382:	0112      	lsls	r2, r2, #4
 8005384:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	0018      	movs	r0, r3
 800538a:	f000 f81f 	bl	80053cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2284      	movs	r2, #132	; 0x84
 8005392:	2120      	movs	r1, #32
 8005394:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2278      	movs	r2, #120	; 0x78
 800539a:	2100      	movs	r1, #0
 800539c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e00f      	b.n	80053c2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	4013      	ands	r3, r2
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	425a      	negs	r2, r3
 80053b2:	4153      	adcs	r3, r2
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	001a      	movs	r2, r3
 80053b8:	1dfb      	adds	r3, r7, #7
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d0a4      	beq.n	800530a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b004      	add	sp, #16
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08e      	sub	sp, #56	; 0x38
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d4:	f3ef 8310 	mrs	r3, PRIMASK
 80053d8:	617b      	str	r3, [r7, #20]
  return(result);
 80053da:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053dc:	637b      	str	r3, [r7, #52]	; 0x34
 80053de:	2301      	movs	r3, #1
 80053e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	f383 8810 	msr	PRIMASK, r3
}
 80053e8:	46c0      	nop			; (mov r8, r8)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4926      	ldr	r1, [pc, #152]	; (8005490 <UART_EndRxTransfer+0xc4>)
 80053f6:	400a      	ands	r2, r1
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	f383 8810 	msr	PRIMASK, r3
}
 8005404:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005406:	f3ef 8310 	mrs	r3, PRIMASK
 800540a:	623b      	str	r3, [r7, #32]
  return(result);
 800540c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	633b      	str	r3, [r7, #48]	; 0x30
 8005410:	2301      	movs	r3, #1
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005416:	f383 8810 	msr	PRIMASK, r3
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2101      	movs	r1, #1
 8005428:	438a      	bics	r2, r1
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	f383 8810 	msr	PRIMASK, r3
}
 8005436:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800543c:	2b01      	cmp	r3, #1
 800543e:	d118      	bne.n	8005472 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005440:	f3ef 8310 	mrs	r3, PRIMASK
 8005444:	60bb      	str	r3, [r7, #8]
  return(result);
 8005446:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544a:	2301      	movs	r3, #1
 800544c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f383 8810 	msr	PRIMASK, r3
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2110      	movs	r1, #16
 8005462:	438a      	bics	r2, r1
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005468:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f383 8810 	msr	PRIMASK, r3
}
 8005470:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2280      	movs	r2, #128	; 0x80
 8005476:	2120      	movs	r1, #32
 8005478:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	46bd      	mov	sp, r7
 800548a:	b00e      	add	sp, #56	; 0x38
 800548c:	bd80      	pop	{r7, pc}
 800548e:	46c0      	nop			; (mov r8, r8)
 8005490:	fffffedf 	.word	0xfffffedf

08005494 <__errno>:
 8005494:	4b01      	ldr	r3, [pc, #4]	; (800549c <__errno+0x8>)
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	4770      	bx	lr
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	2000000c 	.word	0x2000000c

080054a0 <__libc_init_array>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	2600      	movs	r6, #0
 80054a4:	4d0c      	ldr	r5, [pc, #48]	; (80054d8 <__libc_init_array+0x38>)
 80054a6:	4c0d      	ldr	r4, [pc, #52]	; (80054dc <__libc_init_array+0x3c>)
 80054a8:	1b64      	subs	r4, r4, r5
 80054aa:	10a4      	asrs	r4, r4, #2
 80054ac:	42a6      	cmp	r6, r4
 80054ae:	d109      	bne.n	80054c4 <__libc_init_array+0x24>
 80054b0:	2600      	movs	r6, #0
 80054b2:	f002 ffbb 	bl	800842c <_init>
 80054b6:	4d0a      	ldr	r5, [pc, #40]	; (80054e0 <__libc_init_array+0x40>)
 80054b8:	4c0a      	ldr	r4, [pc, #40]	; (80054e4 <__libc_init_array+0x44>)
 80054ba:	1b64      	subs	r4, r4, r5
 80054bc:	10a4      	asrs	r4, r4, #2
 80054be:	42a6      	cmp	r6, r4
 80054c0:	d105      	bne.n	80054ce <__libc_init_array+0x2e>
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	00b3      	lsls	r3, r6, #2
 80054c6:	58eb      	ldr	r3, [r5, r3]
 80054c8:	4798      	blx	r3
 80054ca:	3601      	adds	r6, #1
 80054cc:	e7ee      	b.n	80054ac <__libc_init_array+0xc>
 80054ce:	00b3      	lsls	r3, r6, #2
 80054d0:	58eb      	ldr	r3, [r5, r3]
 80054d2:	4798      	blx	r3
 80054d4:	3601      	adds	r6, #1
 80054d6:	e7f2      	b.n	80054be <__libc_init_array+0x1e>
 80054d8:	0800892c 	.word	0x0800892c
 80054dc:	0800892c 	.word	0x0800892c
 80054e0:	0800892c 	.word	0x0800892c
 80054e4:	08008930 	.word	0x08008930

080054e8 <memset>:
 80054e8:	0003      	movs	r3, r0
 80054ea:	1882      	adds	r2, r0, r2
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d100      	bne.n	80054f2 <memset+0xa>
 80054f0:	4770      	bx	lr
 80054f2:	7019      	strb	r1, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	e7f9      	b.n	80054ec <memset+0x4>

080054f8 <__cvt>:
 80054f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054fa:	001e      	movs	r6, r3
 80054fc:	2300      	movs	r3, #0
 80054fe:	0014      	movs	r4, r2
 8005500:	b08b      	sub	sp, #44	; 0x2c
 8005502:	429e      	cmp	r6, r3
 8005504:	da04      	bge.n	8005510 <__cvt+0x18>
 8005506:	2180      	movs	r1, #128	; 0x80
 8005508:	0609      	lsls	r1, r1, #24
 800550a:	1873      	adds	r3, r6, r1
 800550c:	001e      	movs	r6, r3
 800550e:	232d      	movs	r3, #45	; 0x2d
 8005510:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005512:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005514:	7013      	strb	r3, [r2, #0]
 8005516:	2320      	movs	r3, #32
 8005518:	2203      	movs	r2, #3
 800551a:	439f      	bics	r7, r3
 800551c:	2f46      	cmp	r7, #70	; 0x46
 800551e:	d007      	beq.n	8005530 <__cvt+0x38>
 8005520:	003b      	movs	r3, r7
 8005522:	3b45      	subs	r3, #69	; 0x45
 8005524:	4259      	negs	r1, r3
 8005526:	414b      	adcs	r3, r1
 8005528:	9910      	ldr	r1, [sp, #64]	; 0x40
 800552a:	3a01      	subs	r2, #1
 800552c:	18cb      	adds	r3, r1, r3
 800552e:	9310      	str	r3, [sp, #64]	; 0x40
 8005530:	ab09      	add	r3, sp, #36	; 0x24
 8005532:	9304      	str	r3, [sp, #16]
 8005534:	ab08      	add	r3, sp, #32
 8005536:	9303      	str	r3, [sp, #12]
 8005538:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800553a:	9200      	str	r2, [sp, #0]
 800553c:	9302      	str	r3, [sp, #8]
 800553e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005540:	0022      	movs	r2, r4
 8005542:	9301      	str	r3, [sp, #4]
 8005544:	0033      	movs	r3, r6
 8005546:	f000 fcf1 	bl	8005f2c <_dtoa_r>
 800554a:	0005      	movs	r5, r0
 800554c:	2f47      	cmp	r7, #71	; 0x47
 800554e:	d102      	bne.n	8005556 <__cvt+0x5e>
 8005550:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005552:	07db      	lsls	r3, r3, #31
 8005554:	d528      	bpl.n	80055a8 <__cvt+0xb0>
 8005556:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005558:	18eb      	adds	r3, r5, r3
 800555a:	9307      	str	r3, [sp, #28]
 800555c:	2f46      	cmp	r7, #70	; 0x46
 800555e:	d114      	bne.n	800558a <__cvt+0x92>
 8005560:	782b      	ldrb	r3, [r5, #0]
 8005562:	2b30      	cmp	r3, #48	; 0x30
 8005564:	d10c      	bne.n	8005580 <__cvt+0x88>
 8005566:	2200      	movs	r2, #0
 8005568:	2300      	movs	r3, #0
 800556a:	0020      	movs	r0, r4
 800556c:	0031      	movs	r1, r6
 800556e:	f7fa ff6d 	bl	800044c <__aeabi_dcmpeq>
 8005572:	2800      	cmp	r0, #0
 8005574:	d104      	bne.n	8005580 <__cvt+0x88>
 8005576:	2301      	movs	r3, #1
 8005578:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005582:	9a07      	ldr	r2, [sp, #28]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	18d3      	adds	r3, r2, r3
 8005588:	9307      	str	r3, [sp, #28]
 800558a:	2200      	movs	r2, #0
 800558c:	2300      	movs	r3, #0
 800558e:	0020      	movs	r0, r4
 8005590:	0031      	movs	r1, r6
 8005592:	f7fa ff5b 	bl	800044c <__aeabi_dcmpeq>
 8005596:	2800      	cmp	r0, #0
 8005598:	d001      	beq.n	800559e <__cvt+0xa6>
 800559a:	9b07      	ldr	r3, [sp, #28]
 800559c:	9309      	str	r3, [sp, #36]	; 0x24
 800559e:	2230      	movs	r2, #48	; 0x30
 80055a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a2:	9907      	ldr	r1, [sp, #28]
 80055a4:	428b      	cmp	r3, r1
 80055a6:	d306      	bcc.n	80055b6 <__cvt+0xbe>
 80055a8:	0028      	movs	r0, r5
 80055aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80055ae:	1b5b      	subs	r3, r3, r5
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	b00b      	add	sp, #44	; 0x2c
 80055b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b6:	1c59      	adds	r1, r3, #1
 80055b8:	9109      	str	r1, [sp, #36]	; 0x24
 80055ba:	701a      	strb	r2, [r3, #0]
 80055bc:	e7f0      	b.n	80055a0 <__cvt+0xa8>

080055be <__exponent>:
 80055be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c0:	1c83      	adds	r3, r0, #2
 80055c2:	b087      	sub	sp, #28
 80055c4:	9303      	str	r3, [sp, #12]
 80055c6:	0005      	movs	r5, r0
 80055c8:	000c      	movs	r4, r1
 80055ca:	232b      	movs	r3, #43	; 0x2b
 80055cc:	7002      	strb	r2, [r0, #0]
 80055ce:	2900      	cmp	r1, #0
 80055d0:	da01      	bge.n	80055d6 <__exponent+0x18>
 80055d2:	424c      	negs	r4, r1
 80055d4:	3302      	adds	r3, #2
 80055d6:	706b      	strb	r3, [r5, #1]
 80055d8:	2c09      	cmp	r4, #9
 80055da:	dd31      	ble.n	8005640 <__exponent+0x82>
 80055dc:	270a      	movs	r7, #10
 80055de:	ab04      	add	r3, sp, #16
 80055e0:	1dde      	adds	r6, r3, #7
 80055e2:	0020      	movs	r0, r4
 80055e4:	0039      	movs	r1, r7
 80055e6:	9601      	str	r6, [sp, #4]
 80055e8:	f7fa ff1a 	bl	8000420 <__aeabi_idivmod>
 80055ec:	3e01      	subs	r6, #1
 80055ee:	3130      	adds	r1, #48	; 0x30
 80055f0:	0020      	movs	r0, r4
 80055f2:	7031      	strb	r1, [r6, #0]
 80055f4:	0039      	movs	r1, r7
 80055f6:	9402      	str	r4, [sp, #8]
 80055f8:	f7fa fe2c 	bl	8000254 <__divsi3>
 80055fc:	9b02      	ldr	r3, [sp, #8]
 80055fe:	0004      	movs	r4, r0
 8005600:	2b63      	cmp	r3, #99	; 0x63
 8005602:	dcee      	bgt.n	80055e2 <__exponent+0x24>
 8005604:	9b01      	ldr	r3, [sp, #4]
 8005606:	3430      	adds	r4, #48	; 0x30
 8005608:	1e9a      	subs	r2, r3, #2
 800560a:	0013      	movs	r3, r2
 800560c:	9903      	ldr	r1, [sp, #12]
 800560e:	7014      	strb	r4, [r2, #0]
 8005610:	a804      	add	r0, sp, #16
 8005612:	3007      	adds	r0, #7
 8005614:	4298      	cmp	r0, r3
 8005616:	d80e      	bhi.n	8005636 <__exponent+0x78>
 8005618:	ab04      	add	r3, sp, #16
 800561a:	3307      	adds	r3, #7
 800561c:	2000      	movs	r0, #0
 800561e:	429a      	cmp	r2, r3
 8005620:	d804      	bhi.n	800562c <__exponent+0x6e>
 8005622:	ab04      	add	r3, sp, #16
 8005624:	3009      	adds	r0, #9
 8005626:	18c0      	adds	r0, r0, r3
 8005628:	9b01      	ldr	r3, [sp, #4]
 800562a:	1ac0      	subs	r0, r0, r3
 800562c:	9b03      	ldr	r3, [sp, #12]
 800562e:	1818      	adds	r0, r3, r0
 8005630:	1b40      	subs	r0, r0, r5
 8005632:	b007      	add	sp, #28
 8005634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005636:	7818      	ldrb	r0, [r3, #0]
 8005638:	3301      	adds	r3, #1
 800563a:	7008      	strb	r0, [r1, #0]
 800563c:	3101      	adds	r1, #1
 800563e:	e7e7      	b.n	8005610 <__exponent+0x52>
 8005640:	2330      	movs	r3, #48	; 0x30
 8005642:	18e4      	adds	r4, r4, r3
 8005644:	70ab      	strb	r3, [r5, #2]
 8005646:	1d28      	adds	r0, r5, #4
 8005648:	70ec      	strb	r4, [r5, #3]
 800564a:	e7f1      	b.n	8005630 <__exponent+0x72>

0800564c <_printf_float>:
 800564c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800564e:	b095      	sub	sp, #84	; 0x54
 8005650:	000c      	movs	r4, r1
 8005652:	9209      	str	r2, [sp, #36]	; 0x24
 8005654:	001e      	movs	r6, r3
 8005656:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005658:	0007      	movs	r7, r0
 800565a:	f001 fa81 	bl	8006b60 <_localeconv_r>
 800565e:	6803      	ldr	r3, [r0, #0]
 8005660:	0018      	movs	r0, r3
 8005662:	930c      	str	r3, [sp, #48]	; 0x30
 8005664:	f7fa fd50 	bl	8000108 <strlen>
 8005668:	2300      	movs	r3, #0
 800566a:	9312      	str	r3, [sp, #72]	; 0x48
 800566c:	7e23      	ldrb	r3, [r4, #24]
 800566e:	2207      	movs	r2, #7
 8005670:	930a      	str	r3, [sp, #40]	; 0x28
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	900e      	str	r0, [sp, #56]	; 0x38
 8005676:	930d      	str	r3, [sp, #52]	; 0x34
 8005678:	990d      	ldr	r1, [sp, #52]	; 0x34
 800567a:	682b      	ldr	r3, [r5, #0]
 800567c:	05c9      	lsls	r1, r1, #23
 800567e:	d547      	bpl.n	8005710 <_printf_float+0xc4>
 8005680:	189b      	adds	r3, r3, r2
 8005682:	4393      	bics	r3, r2
 8005684:	001a      	movs	r2, r3
 8005686:	3208      	adds	r2, #8
 8005688:	602a      	str	r2, [r5, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	64a2      	str	r2, [r4, #72]	; 0x48
 8005690:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005692:	2201      	movs	r2, #1
 8005694:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005696:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8005698:	930b      	str	r3, [sp, #44]	; 0x2c
 800569a:	006b      	lsls	r3, r5, #1
 800569c:	085b      	lsrs	r3, r3, #1
 800569e:	930f      	str	r3, [sp, #60]	; 0x3c
 80056a0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80056a2:	4ba7      	ldr	r3, [pc, #668]	; (8005940 <_printf_float+0x2f4>)
 80056a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80056a6:	4252      	negs	r2, r2
 80056a8:	f7fc ff34 	bl	8002514 <__aeabi_dcmpun>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d131      	bne.n	8005714 <_printf_float+0xc8>
 80056b0:	2201      	movs	r2, #1
 80056b2:	4ba3      	ldr	r3, [pc, #652]	; (8005940 <_printf_float+0x2f4>)
 80056b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80056b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80056b8:	4252      	negs	r2, r2
 80056ba:	f7fa fed7 	bl	800046c <__aeabi_dcmple>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d128      	bne.n	8005714 <_printf_float+0xc8>
 80056c2:	2200      	movs	r2, #0
 80056c4:	2300      	movs	r3, #0
 80056c6:	0029      	movs	r1, r5
 80056c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80056ca:	f7fa fec5 	bl	8000458 <__aeabi_dcmplt>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d003      	beq.n	80056da <_printf_float+0x8e>
 80056d2:	0023      	movs	r3, r4
 80056d4:	222d      	movs	r2, #45	; 0x2d
 80056d6:	3343      	adds	r3, #67	; 0x43
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056dc:	4d99      	ldr	r5, [pc, #612]	; (8005944 <_printf_float+0x2f8>)
 80056de:	2b47      	cmp	r3, #71	; 0x47
 80056e0:	d900      	bls.n	80056e4 <_printf_float+0x98>
 80056e2:	4d99      	ldr	r5, [pc, #612]	; (8005948 <_printf_float+0x2fc>)
 80056e4:	2303      	movs	r3, #3
 80056e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056e8:	6123      	str	r3, [r4, #16]
 80056ea:	3301      	adds	r3, #1
 80056ec:	439a      	bics	r2, r3
 80056ee:	2300      	movs	r3, #0
 80056f0:	6022      	str	r2, [r4, #0]
 80056f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80056f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f6:	0021      	movs	r1, r4
 80056f8:	0038      	movs	r0, r7
 80056fa:	9600      	str	r6, [sp, #0]
 80056fc:	aa13      	add	r2, sp, #76	; 0x4c
 80056fe:	f000 f9e7 	bl	8005ad0 <_printf_common>
 8005702:	1c43      	adds	r3, r0, #1
 8005704:	d000      	beq.n	8005708 <_printf_float+0xbc>
 8005706:	e0a2      	b.n	800584e <_printf_float+0x202>
 8005708:	2001      	movs	r0, #1
 800570a:	4240      	negs	r0, r0
 800570c:	b015      	add	sp, #84	; 0x54
 800570e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005710:	3307      	adds	r3, #7
 8005712:	e7b6      	b.n	8005682 <_printf_float+0x36>
 8005714:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005716:	002b      	movs	r3, r5
 8005718:	0010      	movs	r0, r2
 800571a:	0029      	movs	r1, r5
 800571c:	f7fc fefa 	bl	8002514 <__aeabi_dcmpun>
 8005720:	2800      	cmp	r0, #0
 8005722:	d00b      	beq.n	800573c <_printf_float+0xf0>
 8005724:	2d00      	cmp	r5, #0
 8005726:	da03      	bge.n	8005730 <_printf_float+0xe4>
 8005728:	0023      	movs	r3, r4
 800572a:	222d      	movs	r2, #45	; 0x2d
 800572c:	3343      	adds	r3, #67	; 0x43
 800572e:	701a      	strb	r2, [r3, #0]
 8005730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005732:	4d86      	ldr	r5, [pc, #536]	; (800594c <_printf_float+0x300>)
 8005734:	2b47      	cmp	r3, #71	; 0x47
 8005736:	d9d5      	bls.n	80056e4 <_printf_float+0x98>
 8005738:	4d85      	ldr	r5, [pc, #532]	; (8005950 <_printf_float+0x304>)
 800573a:	e7d3      	b.n	80056e4 <_printf_float+0x98>
 800573c:	2220      	movs	r2, #32
 800573e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005740:	6863      	ldr	r3, [r4, #4]
 8005742:	4391      	bics	r1, r2
 8005744:	910f      	str	r1, [sp, #60]	; 0x3c
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	d149      	bne.n	80057de <_printf_float+0x192>
 800574a:	3307      	adds	r3, #7
 800574c:	6063      	str	r3, [r4, #4]
 800574e:	2380      	movs	r3, #128	; 0x80
 8005750:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4313      	orrs	r3, r2
 8005756:	2200      	movs	r2, #0
 8005758:	9206      	str	r2, [sp, #24]
 800575a:	aa12      	add	r2, sp, #72	; 0x48
 800575c:	9205      	str	r2, [sp, #20]
 800575e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005760:	a908      	add	r1, sp, #32
 8005762:	9204      	str	r2, [sp, #16]
 8005764:	aa11      	add	r2, sp, #68	; 0x44
 8005766:	9203      	str	r2, [sp, #12]
 8005768:	2223      	movs	r2, #35	; 0x23
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	9301      	str	r3, [sp, #4]
 800576e:	6863      	ldr	r3, [r4, #4]
 8005770:	1852      	adds	r2, r2, r1
 8005772:	9202      	str	r2, [sp, #8]
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	0038      	movs	r0, r7
 8005778:	002b      	movs	r3, r5
 800577a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800577c:	f7ff febc 	bl	80054f8 <__cvt>
 8005780:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005782:	0005      	movs	r5, r0
 8005784:	9911      	ldr	r1, [sp, #68]	; 0x44
 8005786:	2b47      	cmp	r3, #71	; 0x47
 8005788:	d108      	bne.n	800579c <_printf_float+0x150>
 800578a:	1ccb      	adds	r3, r1, #3
 800578c:	db02      	blt.n	8005794 <_printf_float+0x148>
 800578e:	6863      	ldr	r3, [r4, #4]
 8005790:	4299      	cmp	r1, r3
 8005792:	dd48      	ble.n	8005826 <_printf_float+0x1da>
 8005794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005796:	3b02      	subs	r3, #2
 8005798:	b2db      	uxtb	r3, r3
 800579a:	930a      	str	r3, [sp, #40]	; 0x28
 800579c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800579e:	2b65      	cmp	r3, #101	; 0x65
 80057a0:	d824      	bhi.n	80057ec <_printf_float+0x1a0>
 80057a2:	0020      	movs	r0, r4
 80057a4:	001a      	movs	r2, r3
 80057a6:	3901      	subs	r1, #1
 80057a8:	3050      	adds	r0, #80	; 0x50
 80057aa:	9111      	str	r1, [sp, #68]	; 0x44
 80057ac:	f7ff ff07 	bl	80055be <__exponent>
 80057b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80057b4:	1813      	adds	r3, r2, r0
 80057b6:	6123      	str	r3, [r4, #16]
 80057b8:	2a01      	cmp	r2, #1
 80057ba:	dc02      	bgt.n	80057c2 <_printf_float+0x176>
 80057bc:	6822      	ldr	r2, [r4, #0]
 80057be:	07d2      	lsls	r2, r2, #31
 80057c0:	d501      	bpl.n	80057c6 <_printf_float+0x17a>
 80057c2:	3301      	adds	r3, #1
 80057c4:	6123      	str	r3, [r4, #16]
 80057c6:	2323      	movs	r3, #35	; 0x23
 80057c8:	aa08      	add	r2, sp, #32
 80057ca:	189b      	adds	r3, r3, r2
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d100      	bne.n	80057d4 <_printf_float+0x188>
 80057d2:	e78f      	b.n	80056f4 <_printf_float+0xa8>
 80057d4:	0023      	movs	r3, r4
 80057d6:	222d      	movs	r2, #45	; 0x2d
 80057d8:	3343      	adds	r3, #67	; 0x43
 80057da:	701a      	strb	r2, [r3, #0]
 80057dc:	e78a      	b.n	80056f4 <_printf_float+0xa8>
 80057de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057e0:	2a47      	cmp	r2, #71	; 0x47
 80057e2:	d1b4      	bne.n	800574e <_printf_float+0x102>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1b2      	bne.n	800574e <_printf_float+0x102>
 80057e8:	3301      	adds	r3, #1
 80057ea:	e7af      	b.n	800574c <_printf_float+0x100>
 80057ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ee:	2b66      	cmp	r3, #102	; 0x66
 80057f0:	d11b      	bne.n	800582a <_printf_float+0x1de>
 80057f2:	6863      	ldr	r3, [r4, #4]
 80057f4:	2900      	cmp	r1, #0
 80057f6:	dd0d      	ble.n	8005814 <_printf_float+0x1c8>
 80057f8:	6121      	str	r1, [r4, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <_printf_float+0x1b8>
 80057fe:	6822      	ldr	r2, [r4, #0]
 8005800:	07d2      	lsls	r2, r2, #31
 8005802:	d502      	bpl.n	800580a <_printf_float+0x1be>
 8005804:	3301      	adds	r3, #1
 8005806:	1859      	adds	r1, r3, r1
 8005808:	6121      	str	r1, [r4, #16]
 800580a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800580c:	65a3      	str	r3, [r4, #88]	; 0x58
 800580e:	2300      	movs	r3, #0
 8005810:	930b      	str	r3, [sp, #44]	; 0x2c
 8005812:	e7d8      	b.n	80057c6 <_printf_float+0x17a>
 8005814:	2b00      	cmp	r3, #0
 8005816:	d103      	bne.n	8005820 <_printf_float+0x1d4>
 8005818:	2201      	movs	r2, #1
 800581a:	6821      	ldr	r1, [r4, #0]
 800581c:	4211      	tst	r1, r2
 800581e:	d000      	beq.n	8005822 <_printf_float+0x1d6>
 8005820:	1c9a      	adds	r2, r3, #2
 8005822:	6122      	str	r2, [r4, #16]
 8005824:	e7f1      	b.n	800580a <_printf_float+0x1be>
 8005826:	2367      	movs	r3, #103	; 0x67
 8005828:	930a      	str	r3, [sp, #40]	; 0x28
 800582a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800582c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800582e:	4293      	cmp	r3, r2
 8005830:	db06      	blt.n	8005840 <_printf_float+0x1f4>
 8005832:	6822      	ldr	r2, [r4, #0]
 8005834:	6123      	str	r3, [r4, #16]
 8005836:	07d2      	lsls	r2, r2, #31
 8005838:	d5e7      	bpl.n	800580a <_printf_float+0x1be>
 800583a:	3301      	adds	r3, #1
 800583c:	6123      	str	r3, [r4, #16]
 800583e:	e7e4      	b.n	800580a <_printf_float+0x1be>
 8005840:	2101      	movs	r1, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	dc01      	bgt.n	800584a <_printf_float+0x1fe>
 8005846:	1849      	adds	r1, r1, r1
 8005848:	1ac9      	subs	r1, r1, r3
 800584a:	1852      	adds	r2, r2, r1
 800584c:	e7e9      	b.n	8005822 <_printf_float+0x1d6>
 800584e:	6822      	ldr	r2, [r4, #0]
 8005850:	0553      	lsls	r3, r2, #21
 8005852:	d407      	bmi.n	8005864 <_printf_float+0x218>
 8005854:	6923      	ldr	r3, [r4, #16]
 8005856:	002a      	movs	r2, r5
 8005858:	0038      	movs	r0, r7
 800585a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800585c:	47b0      	blx	r6
 800585e:	1c43      	adds	r3, r0, #1
 8005860:	d128      	bne.n	80058b4 <_printf_float+0x268>
 8005862:	e751      	b.n	8005708 <_printf_float+0xbc>
 8005864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005866:	2b65      	cmp	r3, #101	; 0x65
 8005868:	d800      	bhi.n	800586c <_printf_float+0x220>
 800586a:	e0e1      	b.n	8005a30 <_printf_float+0x3e4>
 800586c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800586e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005870:	2200      	movs	r2, #0
 8005872:	2300      	movs	r3, #0
 8005874:	f7fa fdea 	bl	800044c <__aeabi_dcmpeq>
 8005878:	2800      	cmp	r0, #0
 800587a:	d031      	beq.n	80058e0 <_printf_float+0x294>
 800587c:	2301      	movs	r3, #1
 800587e:	0038      	movs	r0, r7
 8005880:	4a34      	ldr	r2, [pc, #208]	; (8005954 <_printf_float+0x308>)
 8005882:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005884:	47b0      	blx	r6
 8005886:	1c43      	adds	r3, r0, #1
 8005888:	d100      	bne.n	800588c <_printf_float+0x240>
 800588a:	e73d      	b.n	8005708 <_printf_float+0xbc>
 800588c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800588e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005890:	4293      	cmp	r3, r2
 8005892:	db02      	blt.n	800589a <_printf_float+0x24e>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	07db      	lsls	r3, r3, #31
 8005898:	d50c      	bpl.n	80058b4 <_printf_float+0x268>
 800589a:	0038      	movs	r0, r7
 800589c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800589e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058a2:	47b0      	blx	r6
 80058a4:	2500      	movs	r5, #0
 80058a6:	1c43      	adds	r3, r0, #1
 80058a8:	d100      	bne.n	80058ac <_printf_float+0x260>
 80058aa:	e72d      	b.n	8005708 <_printf_float+0xbc>
 80058ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058ae:	3b01      	subs	r3, #1
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	dc0a      	bgt.n	80058ca <_printf_float+0x27e>
 80058b4:	6823      	ldr	r3, [r4, #0]
 80058b6:	079b      	lsls	r3, r3, #30
 80058b8:	d500      	bpl.n	80058bc <_printf_float+0x270>
 80058ba:	e106      	b.n	8005aca <_printf_float+0x47e>
 80058bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80058be:	68e0      	ldr	r0, [r4, #12]
 80058c0:	4298      	cmp	r0, r3
 80058c2:	db00      	blt.n	80058c6 <_printf_float+0x27a>
 80058c4:	e722      	b.n	800570c <_printf_float+0xc0>
 80058c6:	0018      	movs	r0, r3
 80058c8:	e720      	b.n	800570c <_printf_float+0xc0>
 80058ca:	0022      	movs	r2, r4
 80058cc:	2301      	movs	r3, #1
 80058ce:	0038      	movs	r0, r7
 80058d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058d2:	321a      	adds	r2, #26
 80058d4:	47b0      	blx	r6
 80058d6:	1c43      	adds	r3, r0, #1
 80058d8:	d100      	bne.n	80058dc <_printf_float+0x290>
 80058da:	e715      	b.n	8005708 <_printf_float+0xbc>
 80058dc:	3501      	adds	r5, #1
 80058de:	e7e5      	b.n	80058ac <_printf_float+0x260>
 80058e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	dc38      	bgt.n	8005958 <_printf_float+0x30c>
 80058e6:	2301      	movs	r3, #1
 80058e8:	0038      	movs	r0, r7
 80058ea:	4a1a      	ldr	r2, [pc, #104]	; (8005954 <_printf_float+0x308>)
 80058ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058ee:	47b0      	blx	r6
 80058f0:	1c43      	adds	r3, r0, #1
 80058f2:	d100      	bne.n	80058f6 <_printf_float+0x2aa>
 80058f4:	e708      	b.n	8005708 <_printf_float+0xbc>
 80058f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80058fa:	4313      	orrs	r3, r2
 80058fc:	d102      	bne.n	8005904 <_printf_float+0x2b8>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	07db      	lsls	r3, r3, #31
 8005902:	d5d7      	bpl.n	80058b4 <_printf_float+0x268>
 8005904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005906:	0038      	movs	r0, r7
 8005908:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800590a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800590c:	47b0      	blx	r6
 800590e:	1c43      	adds	r3, r0, #1
 8005910:	d100      	bne.n	8005914 <_printf_float+0x2c8>
 8005912:	e6f9      	b.n	8005708 <_printf_float+0xbc>
 8005914:	2300      	movs	r3, #0
 8005916:	930a      	str	r3, [sp, #40]	; 0x28
 8005918:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800591a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800591c:	425b      	negs	r3, r3
 800591e:	4293      	cmp	r3, r2
 8005920:	dc01      	bgt.n	8005926 <_printf_float+0x2da>
 8005922:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005924:	e797      	b.n	8005856 <_printf_float+0x20a>
 8005926:	0022      	movs	r2, r4
 8005928:	2301      	movs	r3, #1
 800592a:	0038      	movs	r0, r7
 800592c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800592e:	321a      	adds	r2, #26
 8005930:	47b0      	blx	r6
 8005932:	1c43      	adds	r3, r0, #1
 8005934:	d100      	bne.n	8005938 <_printf_float+0x2ec>
 8005936:	e6e7      	b.n	8005708 <_printf_float+0xbc>
 8005938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800593a:	3301      	adds	r3, #1
 800593c:	e7eb      	b.n	8005916 <_printf_float+0x2ca>
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	7fefffff 	.word	0x7fefffff
 8005944:	08008550 	.word	0x08008550
 8005948:	08008554 	.word	0x08008554
 800594c:	08008558 	.word	0x08008558
 8005950:	0800855c 	.word	0x0800855c
 8005954:	08008560 	.word	0x08008560
 8005958:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800595a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800595c:	920a      	str	r2, [sp, #40]	; 0x28
 800595e:	429a      	cmp	r2, r3
 8005960:	dd00      	ble.n	8005964 <_printf_float+0x318>
 8005962:	930a      	str	r3, [sp, #40]	; 0x28
 8005964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005966:	2b00      	cmp	r3, #0
 8005968:	dc3c      	bgt.n	80059e4 <_printf_float+0x398>
 800596a:	2300      	movs	r3, #0
 800596c:	930d      	str	r3, [sp, #52]	; 0x34
 800596e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005970:	43db      	mvns	r3, r3
 8005972:	17db      	asrs	r3, r3, #31
 8005974:	930f      	str	r3, [sp, #60]	; 0x3c
 8005976:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005978:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800597a:	930b      	str	r3, [sp, #44]	; 0x2c
 800597c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800597e:	4013      	ands	r3, r2
 8005980:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005986:	4293      	cmp	r3, r2
 8005988:	dc34      	bgt.n	80059f4 <_printf_float+0x3a8>
 800598a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800598c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800598e:	4293      	cmp	r3, r2
 8005990:	db3d      	blt.n	8005a0e <_printf_float+0x3c2>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	07db      	lsls	r3, r3, #31
 8005996:	d43a      	bmi.n	8005a0e <_printf_float+0x3c2>
 8005998:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800599a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800599c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	1a52      	subs	r2, r2, r1
 80059a2:	920a      	str	r2, [sp, #40]	; 0x28
 80059a4:	429a      	cmp	r2, r3
 80059a6:	dd00      	ble.n	80059aa <_printf_float+0x35e>
 80059a8:	930a      	str	r3, [sp, #40]	; 0x28
 80059aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	dc36      	bgt.n	8005a1e <_printf_float+0x3d2>
 80059b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b2:	2500      	movs	r5, #0
 80059b4:	43db      	mvns	r3, r3
 80059b6:	17db      	asrs	r3, r3, #31
 80059b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80059ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80059bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059c4:	400a      	ands	r2, r1
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	42ab      	cmp	r3, r5
 80059ca:	dc00      	bgt.n	80059ce <_printf_float+0x382>
 80059cc:	e772      	b.n	80058b4 <_printf_float+0x268>
 80059ce:	0022      	movs	r2, r4
 80059d0:	2301      	movs	r3, #1
 80059d2:	0038      	movs	r0, r7
 80059d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059d6:	321a      	adds	r2, #26
 80059d8:	47b0      	blx	r6
 80059da:	1c43      	adds	r3, r0, #1
 80059dc:	d100      	bne.n	80059e0 <_printf_float+0x394>
 80059de:	e693      	b.n	8005708 <_printf_float+0xbc>
 80059e0:	3501      	adds	r5, #1
 80059e2:	e7ea      	b.n	80059ba <_printf_float+0x36e>
 80059e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059e6:	002a      	movs	r2, r5
 80059e8:	0038      	movs	r0, r7
 80059ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059ec:	47b0      	blx	r6
 80059ee:	1c43      	adds	r3, r0, #1
 80059f0:	d1bb      	bne.n	800596a <_printf_float+0x31e>
 80059f2:	e689      	b.n	8005708 <_printf_float+0xbc>
 80059f4:	0022      	movs	r2, r4
 80059f6:	2301      	movs	r3, #1
 80059f8:	0038      	movs	r0, r7
 80059fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80059fc:	321a      	adds	r2, #26
 80059fe:	47b0      	blx	r6
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d100      	bne.n	8005a06 <_printf_float+0x3ba>
 8005a04:	e680      	b.n	8005708 <_printf_float+0xbc>
 8005a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a08:	3301      	adds	r3, #1
 8005a0a:	930d      	str	r3, [sp, #52]	; 0x34
 8005a0c:	e7b3      	b.n	8005976 <_printf_float+0x32a>
 8005a0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a10:	0038      	movs	r0, r7
 8005a12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a16:	47b0      	blx	r6
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d1bd      	bne.n	8005998 <_printf_float+0x34c>
 8005a1c:	e674      	b.n	8005708 <_printf_float+0xbc>
 8005a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a20:	0038      	movs	r0, r7
 8005a22:	18ea      	adds	r2, r5, r3
 8005a24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a28:	47b0      	blx	r6
 8005a2a:	1c43      	adds	r3, r0, #1
 8005a2c:	d1c0      	bne.n	80059b0 <_printf_float+0x364>
 8005a2e:	e66b      	b.n	8005708 <_printf_float+0xbc>
 8005a30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	dc02      	bgt.n	8005a3c <_printf_float+0x3f0>
 8005a36:	2301      	movs	r3, #1
 8005a38:	421a      	tst	r2, r3
 8005a3a:	d034      	beq.n	8005aa6 <_printf_float+0x45a>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	002a      	movs	r2, r5
 8005a40:	0038      	movs	r0, r7
 8005a42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a44:	47b0      	blx	r6
 8005a46:	1c43      	adds	r3, r0, #1
 8005a48:	d100      	bne.n	8005a4c <_printf_float+0x400>
 8005a4a:	e65d      	b.n	8005708 <_printf_float+0xbc>
 8005a4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a4e:	0038      	movs	r0, r7
 8005a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a54:	47b0      	blx	r6
 8005a56:	1c43      	adds	r3, r0, #1
 8005a58:	d100      	bne.n	8005a5c <_printf_float+0x410>
 8005a5a:	e655      	b.n	8005708 <_printf_float+0xbc>
 8005a5c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005a5e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005a60:	2200      	movs	r2, #0
 8005a62:	2300      	movs	r3, #0
 8005a64:	f7fa fcf2 	bl	800044c <__aeabi_dcmpeq>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d11a      	bne.n	8005aa2 <_printf_float+0x456>
 8005a6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a6e:	1c6a      	adds	r2, r5, #1
 8005a70:	3b01      	subs	r3, #1
 8005a72:	0038      	movs	r0, r7
 8005a74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a76:	47b0      	blx	r6
 8005a78:	1c43      	adds	r3, r0, #1
 8005a7a:	d10e      	bne.n	8005a9a <_printf_float+0x44e>
 8005a7c:	e644      	b.n	8005708 <_printf_float+0xbc>
 8005a7e:	0022      	movs	r2, r4
 8005a80:	2301      	movs	r3, #1
 8005a82:	0038      	movs	r0, r7
 8005a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a86:	321a      	adds	r2, #26
 8005a88:	47b0      	blx	r6
 8005a8a:	1c43      	adds	r3, r0, #1
 8005a8c:	d100      	bne.n	8005a90 <_printf_float+0x444>
 8005a8e:	e63b      	b.n	8005708 <_printf_float+0xbc>
 8005a90:	3501      	adds	r5, #1
 8005a92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a94:	3b01      	subs	r3, #1
 8005a96:	42ab      	cmp	r3, r5
 8005a98:	dcf1      	bgt.n	8005a7e <_printf_float+0x432>
 8005a9a:	0022      	movs	r2, r4
 8005a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a9e:	3250      	adds	r2, #80	; 0x50
 8005aa0:	e6da      	b.n	8005858 <_printf_float+0x20c>
 8005aa2:	2500      	movs	r5, #0
 8005aa4:	e7f5      	b.n	8005a92 <_printf_float+0x446>
 8005aa6:	002a      	movs	r2, r5
 8005aa8:	e7e3      	b.n	8005a72 <_printf_float+0x426>
 8005aaa:	0022      	movs	r2, r4
 8005aac:	2301      	movs	r3, #1
 8005aae:	0038      	movs	r0, r7
 8005ab0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ab2:	3219      	adds	r2, #25
 8005ab4:	47b0      	blx	r6
 8005ab6:	1c43      	adds	r3, r0, #1
 8005ab8:	d100      	bne.n	8005abc <_printf_float+0x470>
 8005aba:	e625      	b.n	8005708 <_printf_float+0xbc>
 8005abc:	3501      	adds	r5, #1
 8005abe:	68e3      	ldr	r3, [r4, #12]
 8005ac0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ac2:	1a9b      	subs	r3, r3, r2
 8005ac4:	42ab      	cmp	r3, r5
 8005ac6:	dcf0      	bgt.n	8005aaa <_printf_float+0x45e>
 8005ac8:	e6f8      	b.n	80058bc <_printf_float+0x270>
 8005aca:	2500      	movs	r5, #0
 8005acc:	e7f7      	b.n	8005abe <_printf_float+0x472>
 8005ace:	46c0      	nop			; (mov r8, r8)

08005ad0 <_printf_common>:
 8005ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ad2:	0015      	movs	r5, r2
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	688a      	ldr	r2, [r1, #8]
 8005ad8:	690b      	ldr	r3, [r1, #16]
 8005ada:	000c      	movs	r4, r1
 8005adc:	9000      	str	r0, [sp, #0]
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	da00      	bge.n	8005ae4 <_printf_common+0x14>
 8005ae2:	0013      	movs	r3, r2
 8005ae4:	0022      	movs	r2, r4
 8005ae6:	602b      	str	r3, [r5, #0]
 8005ae8:	3243      	adds	r2, #67	; 0x43
 8005aea:	7812      	ldrb	r2, [r2, #0]
 8005aec:	2a00      	cmp	r2, #0
 8005aee:	d001      	beq.n	8005af4 <_printf_common+0x24>
 8005af0:	3301      	adds	r3, #1
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	069b      	lsls	r3, r3, #26
 8005af8:	d502      	bpl.n	8005b00 <_printf_common+0x30>
 8005afa:	682b      	ldr	r3, [r5, #0]
 8005afc:	3302      	adds	r3, #2
 8005afe:	602b      	str	r3, [r5, #0]
 8005b00:	6822      	ldr	r2, [r4, #0]
 8005b02:	2306      	movs	r3, #6
 8005b04:	0017      	movs	r7, r2
 8005b06:	401f      	ands	r7, r3
 8005b08:	421a      	tst	r2, r3
 8005b0a:	d027      	beq.n	8005b5c <_printf_common+0x8c>
 8005b0c:	0023      	movs	r3, r4
 8005b0e:	3343      	adds	r3, #67	; 0x43
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	1e5a      	subs	r2, r3, #1
 8005b14:	4193      	sbcs	r3, r2
 8005b16:	6822      	ldr	r2, [r4, #0]
 8005b18:	0692      	lsls	r2, r2, #26
 8005b1a:	d430      	bmi.n	8005b7e <_printf_common+0xae>
 8005b1c:	0022      	movs	r2, r4
 8005b1e:	9901      	ldr	r1, [sp, #4]
 8005b20:	9800      	ldr	r0, [sp, #0]
 8005b22:	9e08      	ldr	r6, [sp, #32]
 8005b24:	3243      	adds	r2, #67	; 0x43
 8005b26:	47b0      	blx	r6
 8005b28:	1c43      	adds	r3, r0, #1
 8005b2a:	d025      	beq.n	8005b78 <_printf_common+0xa8>
 8005b2c:	2306      	movs	r3, #6
 8005b2e:	6820      	ldr	r0, [r4, #0]
 8005b30:	682a      	ldr	r2, [r5, #0]
 8005b32:	68e1      	ldr	r1, [r4, #12]
 8005b34:	2500      	movs	r5, #0
 8005b36:	4003      	ands	r3, r0
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d103      	bne.n	8005b44 <_printf_common+0x74>
 8005b3c:	1a8d      	subs	r5, r1, r2
 8005b3e:	43eb      	mvns	r3, r5
 8005b40:	17db      	asrs	r3, r3, #31
 8005b42:	401d      	ands	r5, r3
 8005b44:	68a3      	ldr	r3, [r4, #8]
 8005b46:	6922      	ldr	r2, [r4, #16]
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	dd01      	ble.n	8005b50 <_printf_common+0x80>
 8005b4c:	1a9b      	subs	r3, r3, r2
 8005b4e:	18ed      	adds	r5, r5, r3
 8005b50:	2700      	movs	r7, #0
 8005b52:	42bd      	cmp	r5, r7
 8005b54:	d120      	bne.n	8005b98 <_printf_common+0xc8>
 8005b56:	2000      	movs	r0, #0
 8005b58:	e010      	b.n	8005b7c <_printf_common+0xac>
 8005b5a:	3701      	adds	r7, #1
 8005b5c:	68e3      	ldr	r3, [r4, #12]
 8005b5e:	682a      	ldr	r2, [r5, #0]
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	42bb      	cmp	r3, r7
 8005b64:	ddd2      	ble.n	8005b0c <_printf_common+0x3c>
 8005b66:	0022      	movs	r2, r4
 8005b68:	2301      	movs	r3, #1
 8005b6a:	9901      	ldr	r1, [sp, #4]
 8005b6c:	9800      	ldr	r0, [sp, #0]
 8005b6e:	9e08      	ldr	r6, [sp, #32]
 8005b70:	3219      	adds	r2, #25
 8005b72:	47b0      	blx	r6
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d1f0      	bne.n	8005b5a <_printf_common+0x8a>
 8005b78:	2001      	movs	r0, #1
 8005b7a:	4240      	negs	r0, r0
 8005b7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b7e:	2030      	movs	r0, #48	; 0x30
 8005b80:	18e1      	adds	r1, r4, r3
 8005b82:	3143      	adds	r1, #67	; 0x43
 8005b84:	7008      	strb	r0, [r1, #0]
 8005b86:	0021      	movs	r1, r4
 8005b88:	1c5a      	adds	r2, r3, #1
 8005b8a:	3145      	adds	r1, #69	; 0x45
 8005b8c:	7809      	ldrb	r1, [r1, #0]
 8005b8e:	18a2      	adds	r2, r4, r2
 8005b90:	3243      	adds	r2, #67	; 0x43
 8005b92:	3302      	adds	r3, #2
 8005b94:	7011      	strb	r1, [r2, #0]
 8005b96:	e7c1      	b.n	8005b1c <_printf_common+0x4c>
 8005b98:	0022      	movs	r2, r4
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	9901      	ldr	r1, [sp, #4]
 8005b9e:	9800      	ldr	r0, [sp, #0]
 8005ba0:	9e08      	ldr	r6, [sp, #32]
 8005ba2:	321a      	adds	r2, #26
 8005ba4:	47b0      	blx	r6
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	d0e6      	beq.n	8005b78 <_printf_common+0xa8>
 8005baa:	3701      	adds	r7, #1
 8005bac:	e7d1      	b.n	8005b52 <_printf_common+0x82>
	...

08005bb0 <_printf_i>:
 8005bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb2:	b08b      	sub	sp, #44	; 0x2c
 8005bb4:	9206      	str	r2, [sp, #24]
 8005bb6:	000a      	movs	r2, r1
 8005bb8:	3243      	adds	r2, #67	; 0x43
 8005bba:	9307      	str	r3, [sp, #28]
 8005bbc:	9005      	str	r0, [sp, #20]
 8005bbe:	9204      	str	r2, [sp, #16]
 8005bc0:	7e0a      	ldrb	r2, [r1, #24]
 8005bc2:	000c      	movs	r4, r1
 8005bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bc6:	2a78      	cmp	r2, #120	; 0x78
 8005bc8:	d807      	bhi.n	8005bda <_printf_i+0x2a>
 8005bca:	2a62      	cmp	r2, #98	; 0x62
 8005bcc:	d809      	bhi.n	8005be2 <_printf_i+0x32>
 8005bce:	2a00      	cmp	r2, #0
 8005bd0:	d100      	bne.n	8005bd4 <_printf_i+0x24>
 8005bd2:	e0c1      	b.n	8005d58 <_printf_i+0x1a8>
 8005bd4:	2a58      	cmp	r2, #88	; 0x58
 8005bd6:	d100      	bne.n	8005bda <_printf_i+0x2a>
 8005bd8:	e08c      	b.n	8005cf4 <_printf_i+0x144>
 8005bda:	0026      	movs	r6, r4
 8005bdc:	3642      	adds	r6, #66	; 0x42
 8005bde:	7032      	strb	r2, [r6, #0]
 8005be0:	e022      	b.n	8005c28 <_printf_i+0x78>
 8005be2:	0010      	movs	r0, r2
 8005be4:	3863      	subs	r0, #99	; 0x63
 8005be6:	2815      	cmp	r0, #21
 8005be8:	d8f7      	bhi.n	8005bda <_printf_i+0x2a>
 8005bea:	f7fa fa9f 	bl	800012c <__gnu_thumb1_case_shi>
 8005bee:	0016      	.short	0x0016
 8005bf0:	fff6001f 	.word	0xfff6001f
 8005bf4:	fff6fff6 	.word	0xfff6fff6
 8005bf8:	001ffff6 	.word	0x001ffff6
 8005bfc:	fff6fff6 	.word	0xfff6fff6
 8005c00:	fff6fff6 	.word	0xfff6fff6
 8005c04:	003600a8 	.word	0x003600a8
 8005c08:	fff6009a 	.word	0xfff6009a
 8005c0c:	00b9fff6 	.word	0x00b9fff6
 8005c10:	0036fff6 	.word	0x0036fff6
 8005c14:	fff6fff6 	.word	0xfff6fff6
 8005c18:	009e      	.short	0x009e
 8005c1a:	0026      	movs	r6, r4
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	3642      	adds	r6, #66	; 0x42
 8005c20:	1d11      	adds	r1, r2, #4
 8005c22:	6019      	str	r1, [r3, #0]
 8005c24:	6813      	ldr	r3, [r2, #0]
 8005c26:	7033      	strb	r3, [r6, #0]
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0a7      	b.n	8005d7c <_printf_i+0x1cc>
 8005c2c:	6808      	ldr	r0, [r1, #0]
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	1d0a      	adds	r2, r1, #4
 8005c32:	0605      	lsls	r5, r0, #24
 8005c34:	d50b      	bpl.n	8005c4e <_printf_i+0x9e>
 8005c36:	680d      	ldr	r5, [r1, #0]
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	2d00      	cmp	r5, #0
 8005c3c:	da03      	bge.n	8005c46 <_printf_i+0x96>
 8005c3e:	232d      	movs	r3, #45	; 0x2d
 8005c40:	9a04      	ldr	r2, [sp, #16]
 8005c42:	426d      	negs	r5, r5
 8005c44:	7013      	strb	r3, [r2, #0]
 8005c46:	4b61      	ldr	r3, [pc, #388]	; (8005dcc <_printf_i+0x21c>)
 8005c48:	270a      	movs	r7, #10
 8005c4a:	9303      	str	r3, [sp, #12]
 8005c4c:	e01b      	b.n	8005c86 <_printf_i+0xd6>
 8005c4e:	680d      	ldr	r5, [r1, #0]
 8005c50:	601a      	str	r2, [r3, #0]
 8005c52:	0641      	lsls	r1, r0, #25
 8005c54:	d5f1      	bpl.n	8005c3a <_printf_i+0x8a>
 8005c56:	b22d      	sxth	r5, r5
 8005c58:	e7ef      	b.n	8005c3a <_printf_i+0x8a>
 8005c5a:	680d      	ldr	r5, [r1, #0]
 8005c5c:	6819      	ldr	r1, [r3, #0]
 8005c5e:	1d08      	adds	r0, r1, #4
 8005c60:	6018      	str	r0, [r3, #0]
 8005c62:	062e      	lsls	r6, r5, #24
 8005c64:	d501      	bpl.n	8005c6a <_printf_i+0xba>
 8005c66:	680d      	ldr	r5, [r1, #0]
 8005c68:	e003      	b.n	8005c72 <_printf_i+0xc2>
 8005c6a:	066d      	lsls	r5, r5, #25
 8005c6c:	d5fb      	bpl.n	8005c66 <_printf_i+0xb6>
 8005c6e:	680d      	ldr	r5, [r1, #0]
 8005c70:	b2ad      	uxth	r5, r5
 8005c72:	4b56      	ldr	r3, [pc, #344]	; (8005dcc <_printf_i+0x21c>)
 8005c74:	2708      	movs	r7, #8
 8005c76:	9303      	str	r3, [sp, #12]
 8005c78:	2a6f      	cmp	r2, #111	; 0x6f
 8005c7a:	d000      	beq.n	8005c7e <_printf_i+0xce>
 8005c7c:	3702      	adds	r7, #2
 8005c7e:	0023      	movs	r3, r4
 8005c80:	2200      	movs	r2, #0
 8005c82:	3343      	adds	r3, #67	; 0x43
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	6863      	ldr	r3, [r4, #4]
 8005c88:	60a3      	str	r3, [r4, #8]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	db03      	blt.n	8005c96 <_printf_i+0xe6>
 8005c8e:	2204      	movs	r2, #4
 8005c90:	6821      	ldr	r1, [r4, #0]
 8005c92:	4391      	bics	r1, r2
 8005c94:	6021      	str	r1, [r4, #0]
 8005c96:	2d00      	cmp	r5, #0
 8005c98:	d102      	bne.n	8005ca0 <_printf_i+0xf0>
 8005c9a:	9e04      	ldr	r6, [sp, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00c      	beq.n	8005cba <_printf_i+0x10a>
 8005ca0:	9e04      	ldr	r6, [sp, #16]
 8005ca2:	0028      	movs	r0, r5
 8005ca4:	0039      	movs	r1, r7
 8005ca6:	f7fa fad1 	bl	800024c <__aeabi_uidivmod>
 8005caa:	9b03      	ldr	r3, [sp, #12]
 8005cac:	3e01      	subs	r6, #1
 8005cae:	5c5b      	ldrb	r3, [r3, r1]
 8005cb0:	7033      	strb	r3, [r6, #0]
 8005cb2:	002b      	movs	r3, r5
 8005cb4:	0005      	movs	r5, r0
 8005cb6:	429f      	cmp	r7, r3
 8005cb8:	d9f3      	bls.n	8005ca2 <_printf_i+0xf2>
 8005cba:	2f08      	cmp	r7, #8
 8005cbc:	d109      	bne.n	8005cd2 <_printf_i+0x122>
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	07db      	lsls	r3, r3, #31
 8005cc2:	d506      	bpl.n	8005cd2 <_printf_i+0x122>
 8005cc4:	6863      	ldr	r3, [r4, #4]
 8005cc6:	6922      	ldr	r2, [r4, #16]
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	dc02      	bgt.n	8005cd2 <_printf_i+0x122>
 8005ccc:	2330      	movs	r3, #48	; 0x30
 8005cce:	3e01      	subs	r6, #1
 8005cd0:	7033      	strb	r3, [r6, #0]
 8005cd2:	9b04      	ldr	r3, [sp, #16]
 8005cd4:	1b9b      	subs	r3, r3, r6
 8005cd6:	6123      	str	r3, [r4, #16]
 8005cd8:	9b07      	ldr	r3, [sp, #28]
 8005cda:	0021      	movs	r1, r4
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	9805      	ldr	r0, [sp, #20]
 8005ce0:	9b06      	ldr	r3, [sp, #24]
 8005ce2:	aa09      	add	r2, sp, #36	; 0x24
 8005ce4:	f7ff fef4 	bl	8005ad0 <_printf_common>
 8005ce8:	1c43      	adds	r3, r0, #1
 8005cea:	d14c      	bne.n	8005d86 <_printf_i+0x1d6>
 8005cec:	2001      	movs	r0, #1
 8005cee:	4240      	negs	r0, r0
 8005cf0:	b00b      	add	sp, #44	; 0x2c
 8005cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cf4:	3145      	adds	r1, #69	; 0x45
 8005cf6:	700a      	strb	r2, [r1, #0]
 8005cf8:	4a34      	ldr	r2, [pc, #208]	; (8005dcc <_printf_i+0x21c>)
 8005cfa:	9203      	str	r2, [sp, #12]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	6821      	ldr	r1, [r4, #0]
 8005d00:	ca20      	ldmia	r2!, {r5}
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	0608      	lsls	r0, r1, #24
 8005d06:	d516      	bpl.n	8005d36 <_printf_i+0x186>
 8005d08:	07cb      	lsls	r3, r1, #31
 8005d0a:	d502      	bpl.n	8005d12 <_printf_i+0x162>
 8005d0c:	2320      	movs	r3, #32
 8005d0e:	4319      	orrs	r1, r3
 8005d10:	6021      	str	r1, [r4, #0]
 8005d12:	2710      	movs	r7, #16
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	d1b2      	bne.n	8005c7e <_printf_i+0xce>
 8005d18:	2320      	movs	r3, #32
 8005d1a:	6822      	ldr	r2, [r4, #0]
 8005d1c:	439a      	bics	r2, r3
 8005d1e:	6022      	str	r2, [r4, #0]
 8005d20:	e7ad      	b.n	8005c7e <_printf_i+0xce>
 8005d22:	2220      	movs	r2, #32
 8005d24:	6809      	ldr	r1, [r1, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	6022      	str	r2, [r4, #0]
 8005d2a:	0022      	movs	r2, r4
 8005d2c:	2178      	movs	r1, #120	; 0x78
 8005d2e:	3245      	adds	r2, #69	; 0x45
 8005d30:	7011      	strb	r1, [r2, #0]
 8005d32:	4a27      	ldr	r2, [pc, #156]	; (8005dd0 <_printf_i+0x220>)
 8005d34:	e7e1      	b.n	8005cfa <_printf_i+0x14a>
 8005d36:	0648      	lsls	r0, r1, #25
 8005d38:	d5e6      	bpl.n	8005d08 <_printf_i+0x158>
 8005d3a:	b2ad      	uxth	r5, r5
 8005d3c:	e7e4      	b.n	8005d08 <_printf_i+0x158>
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	680d      	ldr	r5, [r1, #0]
 8005d42:	1d10      	adds	r0, r2, #4
 8005d44:	6949      	ldr	r1, [r1, #20]
 8005d46:	6018      	str	r0, [r3, #0]
 8005d48:	6813      	ldr	r3, [r2, #0]
 8005d4a:	062e      	lsls	r6, r5, #24
 8005d4c:	d501      	bpl.n	8005d52 <_printf_i+0x1a2>
 8005d4e:	6019      	str	r1, [r3, #0]
 8005d50:	e002      	b.n	8005d58 <_printf_i+0x1a8>
 8005d52:	066d      	lsls	r5, r5, #25
 8005d54:	d5fb      	bpl.n	8005d4e <_printf_i+0x19e>
 8005d56:	8019      	strh	r1, [r3, #0]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	9e04      	ldr	r6, [sp, #16]
 8005d5c:	6123      	str	r3, [r4, #16]
 8005d5e:	e7bb      	b.n	8005cd8 <_printf_i+0x128>
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	1d11      	adds	r1, r2, #4
 8005d64:	6019      	str	r1, [r3, #0]
 8005d66:	6816      	ldr	r6, [r2, #0]
 8005d68:	2100      	movs	r1, #0
 8005d6a:	0030      	movs	r0, r6
 8005d6c:	6862      	ldr	r2, [r4, #4]
 8005d6e:	f000 ff05 	bl	8006b7c <memchr>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d001      	beq.n	8005d7a <_printf_i+0x1ca>
 8005d76:	1b80      	subs	r0, r0, r6
 8005d78:	6060      	str	r0, [r4, #4]
 8005d7a:	6863      	ldr	r3, [r4, #4]
 8005d7c:	6123      	str	r3, [r4, #16]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	9a04      	ldr	r2, [sp, #16]
 8005d82:	7013      	strb	r3, [r2, #0]
 8005d84:	e7a8      	b.n	8005cd8 <_printf_i+0x128>
 8005d86:	6923      	ldr	r3, [r4, #16]
 8005d88:	0032      	movs	r2, r6
 8005d8a:	9906      	ldr	r1, [sp, #24]
 8005d8c:	9805      	ldr	r0, [sp, #20]
 8005d8e:	9d07      	ldr	r5, [sp, #28]
 8005d90:	47a8      	blx	r5
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	d0aa      	beq.n	8005cec <_printf_i+0x13c>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	079b      	lsls	r3, r3, #30
 8005d9a:	d415      	bmi.n	8005dc8 <_printf_i+0x218>
 8005d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d9e:	68e0      	ldr	r0, [r4, #12]
 8005da0:	4298      	cmp	r0, r3
 8005da2:	daa5      	bge.n	8005cf0 <_printf_i+0x140>
 8005da4:	0018      	movs	r0, r3
 8005da6:	e7a3      	b.n	8005cf0 <_printf_i+0x140>
 8005da8:	0022      	movs	r2, r4
 8005daa:	2301      	movs	r3, #1
 8005dac:	9906      	ldr	r1, [sp, #24]
 8005dae:	9805      	ldr	r0, [sp, #20]
 8005db0:	9e07      	ldr	r6, [sp, #28]
 8005db2:	3219      	adds	r2, #25
 8005db4:	47b0      	blx	r6
 8005db6:	1c43      	adds	r3, r0, #1
 8005db8:	d098      	beq.n	8005cec <_printf_i+0x13c>
 8005dba:	3501      	adds	r5, #1
 8005dbc:	68e3      	ldr	r3, [r4, #12]
 8005dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dc0:	1a9b      	subs	r3, r3, r2
 8005dc2:	42ab      	cmp	r3, r5
 8005dc4:	dcf0      	bgt.n	8005da8 <_printf_i+0x1f8>
 8005dc6:	e7e9      	b.n	8005d9c <_printf_i+0x1ec>
 8005dc8:	2500      	movs	r5, #0
 8005dca:	e7f7      	b.n	8005dbc <_printf_i+0x20c>
 8005dcc:	08008562 	.word	0x08008562
 8005dd0:	08008573 	.word	0x08008573

08005dd4 <siprintf>:
 8005dd4:	b40e      	push	{r1, r2, r3}
 8005dd6:	b500      	push	{lr}
 8005dd8:	490b      	ldr	r1, [pc, #44]	; (8005e08 <siprintf+0x34>)
 8005dda:	b09c      	sub	sp, #112	; 0x70
 8005ddc:	ab1d      	add	r3, sp, #116	; 0x74
 8005dde:	9002      	str	r0, [sp, #8]
 8005de0:	9006      	str	r0, [sp, #24]
 8005de2:	9107      	str	r1, [sp, #28]
 8005de4:	9104      	str	r1, [sp, #16]
 8005de6:	4809      	ldr	r0, [pc, #36]	; (8005e0c <siprintf+0x38>)
 8005de8:	4909      	ldr	r1, [pc, #36]	; (8005e10 <siprintf+0x3c>)
 8005dea:	cb04      	ldmia	r3!, {r2}
 8005dec:	9105      	str	r1, [sp, #20]
 8005dee:	6800      	ldr	r0, [r0, #0]
 8005df0:	a902      	add	r1, sp, #8
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	f001 fbe2 	bl	80075bc <_svfiprintf_r>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	9a02      	ldr	r2, [sp, #8]
 8005dfc:	7013      	strb	r3, [r2, #0]
 8005dfe:	b01c      	add	sp, #112	; 0x70
 8005e00:	bc08      	pop	{r3}
 8005e02:	b003      	add	sp, #12
 8005e04:	4718      	bx	r3
 8005e06:	46c0      	nop			; (mov r8, r8)
 8005e08:	7fffffff 	.word	0x7fffffff
 8005e0c:	2000000c 	.word	0x2000000c
 8005e10:	ffff0208 	.word	0xffff0208

08005e14 <quorem>:
 8005e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e16:	0006      	movs	r6, r0
 8005e18:	690b      	ldr	r3, [r1, #16]
 8005e1a:	6932      	ldr	r2, [r6, #16]
 8005e1c:	b087      	sub	sp, #28
 8005e1e:	2000      	movs	r0, #0
 8005e20:	9103      	str	r1, [sp, #12]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	db65      	blt.n	8005ef2 <quorem+0xde>
 8005e26:	3b01      	subs	r3, #1
 8005e28:	009c      	lsls	r4, r3, #2
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	000b      	movs	r3, r1
 8005e2e:	3314      	adds	r3, #20
 8005e30:	9305      	str	r3, [sp, #20]
 8005e32:	191b      	adds	r3, r3, r4
 8005e34:	9304      	str	r3, [sp, #16]
 8005e36:	0033      	movs	r3, r6
 8005e38:	3314      	adds	r3, #20
 8005e3a:	9302      	str	r3, [sp, #8]
 8005e3c:	191c      	adds	r4, r3, r4
 8005e3e:	9b04      	ldr	r3, [sp, #16]
 8005e40:	6827      	ldr	r7, [r4, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	0038      	movs	r0, r7
 8005e46:	1c5d      	adds	r5, r3, #1
 8005e48:	0029      	movs	r1, r5
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	f7fa f978 	bl	8000140 <__udivsi3>
 8005e50:	9001      	str	r0, [sp, #4]
 8005e52:	42af      	cmp	r7, r5
 8005e54:	d324      	bcc.n	8005ea0 <quorem+0x8c>
 8005e56:	2500      	movs	r5, #0
 8005e58:	46ac      	mov	ip, r5
 8005e5a:	9802      	ldr	r0, [sp, #8]
 8005e5c:	9f05      	ldr	r7, [sp, #20]
 8005e5e:	cf08      	ldmia	r7!, {r3}
 8005e60:	9a01      	ldr	r2, [sp, #4]
 8005e62:	b299      	uxth	r1, r3
 8005e64:	4351      	muls	r1, r2
 8005e66:	0c1b      	lsrs	r3, r3, #16
 8005e68:	4353      	muls	r3, r2
 8005e6a:	1949      	adds	r1, r1, r5
 8005e6c:	0c0a      	lsrs	r2, r1, #16
 8005e6e:	189b      	adds	r3, r3, r2
 8005e70:	6802      	ldr	r2, [r0, #0]
 8005e72:	b289      	uxth	r1, r1
 8005e74:	b292      	uxth	r2, r2
 8005e76:	4462      	add	r2, ip
 8005e78:	1a52      	subs	r2, r2, r1
 8005e7a:	6801      	ldr	r1, [r0, #0]
 8005e7c:	0c1d      	lsrs	r5, r3, #16
 8005e7e:	0c09      	lsrs	r1, r1, #16
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	1acb      	subs	r3, r1, r3
 8005e84:	1411      	asrs	r1, r2, #16
 8005e86:	185b      	adds	r3, r3, r1
 8005e88:	1419      	asrs	r1, r3, #16
 8005e8a:	b292      	uxth	r2, r2
 8005e8c:	041b      	lsls	r3, r3, #16
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	9b04      	ldr	r3, [sp, #16]
 8005e92:	468c      	mov	ip, r1
 8005e94:	c004      	stmia	r0!, {r2}
 8005e96:	42bb      	cmp	r3, r7
 8005e98:	d2e1      	bcs.n	8005e5e <quorem+0x4a>
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d030      	beq.n	8005f02 <quorem+0xee>
 8005ea0:	0030      	movs	r0, r6
 8005ea2:	9903      	ldr	r1, [sp, #12]
 8005ea4:	f001 f902 	bl	80070ac <__mcmp>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	db21      	blt.n	8005ef0 <quorem+0xdc>
 8005eac:	0030      	movs	r0, r6
 8005eae:	2400      	movs	r4, #0
 8005eb0:	9b01      	ldr	r3, [sp, #4]
 8005eb2:	9903      	ldr	r1, [sp, #12]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	3014      	adds	r0, #20
 8005eba:	3114      	adds	r1, #20
 8005ebc:	6803      	ldr	r3, [r0, #0]
 8005ebe:	c920      	ldmia	r1!, {r5}
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	1914      	adds	r4, r2, r4
 8005ec4:	b2aa      	uxth	r2, r5
 8005ec6:	1aa2      	subs	r2, r4, r2
 8005ec8:	0c1b      	lsrs	r3, r3, #16
 8005eca:	0c2d      	lsrs	r5, r5, #16
 8005ecc:	1414      	asrs	r4, r2, #16
 8005ece:	1b5b      	subs	r3, r3, r5
 8005ed0:	191b      	adds	r3, r3, r4
 8005ed2:	141c      	asrs	r4, r3, #16
 8005ed4:	b292      	uxth	r2, r2
 8005ed6:	041b      	lsls	r3, r3, #16
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	c008      	stmia	r0!, {r3}
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	428b      	cmp	r3, r1
 8005ee0:	d2ec      	bcs.n	8005ebc <quorem+0xa8>
 8005ee2:	9b00      	ldr	r3, [sp, #0]
 8005ee4:	9a02      	ldr	r2, [sp, #8]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	18d3      	adds	r3, r2, r3
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	2a00      	cmp	r2, #0
 8005eee:	d015      	beq.n	8005f1c <quorem+0x108>
 8005ef0:	9801      	ldr	r0, [sp, #4]
 8005ef2:	b007      	add	sp, #28
 8005ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d106      	bne.n	8005f0a <quorem+0xf6>
 8005efc:	9b00      	ldr	r3, [sp, #0]
 8005efe:	3b01      	subs	r3, #1
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	9b02      	ldr	r3, [sp, #8]
 8005f04:	3c04      	subs	r4, #4
 8005f06:	42a3      	cmp	r3, r4
 8005f08:	d3f5      	bcc.n	8005ef6 <quorem+0xe2>
 8005f0a:	9b00      	ldr	r3, [sp, #0]
 8005f0c:	6133      	str	r3, [r6, #16]
 8005f0e:	e7c7      	b.n	8005ea0 <quorem+0x8c>
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	2a00      	cmp	r2, #0
 8005f14:	d106      	bne.n	8005f24 <quorem+0x110>
 8005f16:	9a00      	ldr	r2, [sp, #0]
 8005f18:	3a01      	subs	r2, #1
 8005f1a:	9200      	str	r2, [sp, #0]
 8005f1c:	9a02      	ldr	r2, [sp, #8]
 8005f1e:	3b04      	subs	r3, #4
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d3f5      	bcc.n	8005f10 <quorem+0xfc>
 8005f24:	9b00      	ldr	r3, [sp, #0]
 8005f26:	6133      	str	r3, [r6, #16]
 8005f28:	e7e2      	b.n	8005ef0 <quorem+0xdc>
	...

08005f2c <_dtoa_r>:
 8005f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f2e:	b09d      	sub	sp, #116	; 0x74
 8005f30:	9202      	str	r2, [sp, #8]
 8005f32:	9303      	str	r3, [sp, #12]
 8005f34:	9b02      	ldr	r3, [sp, #8]
 8005f36:	9c03      	ldr	r4, [sp, #12]
 8005f38:	9308      	str	r3, [sp, #32]
 8005f3a:	9409      	str	r4, [sp, #36]	; 0x24
 8005f3c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005f3e:	0007      	movs	r7, r0
 8005f40:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8005f42:	2c00      	cmp	r4, #0
 8005f44:	d10e      	bne.n	8005f64 <_dtoa_r+0x38>
 8005f46:	2010      	movs	r0, #16
 8005f48:	f000 fe0e 	bl	8006b68 <malloc>
 8005f4c:	1e02      	subs	r2, r0, #0
 8005f4e:	6278      	str	r0, [r7, #36]	; 0x24
 8005f50:	d104      	bne.n	8005f5c <_dtoa_r+0x30>
 8005f52:	21ea      	movs	r1, #234	; 0xea
 8005f54:	4bc7      	ldr	r3, [pc, #796]	; (8006274 <_dtoa_r+0x348>)
 8005f56:	48c8      	ldr	r0, [pc, #800]	; (8006278 <_dtoa_r+0x34c>)
 8005f58:	f001 fc42 	bl	80077e0 <__assert_func>
 8005f5c:	6044      	str	r4, [r0, #4]
 8005f5e:	6084      	str	r4, [r0, #8]
 8005f60:	6004      	str	r4, [r0, #0]
 8005f62:	60c4      	str	r4, [r0, #12]
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	6819      	ldr	r1, [r3, #0]
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	d00a      	beq.n	8005f82 <_dtoa_r+0x56>
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	2301      	movs	r3, #1
 8005f70:	4093      	lsls	r3, r2
 8005f72:	604a      	str	r2, [r1, #4]
 8005f74:	608b      	str	r3, [r1, #8]
 8005f76:	0038      	movs	r0, r7
 8005f78:	f000 fe58 	bl	8006c2c <_Bfree>
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	9b03      	ldr	r3, [sp, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	da20      	bge.n	8005fca <_dtoa_r+0x9e>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	602b      	str	r3, [r5, #0]
 8005f8c:	9b03      	ldr	r3, [sp, #12]
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	085b      	lsrs	r3, r3, #1
 8005f92:	9309      	str	r3, [sp, #36]	; 0x24
 8005f94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005f96:	4bb9      	ldr	r3, [pc, #740]	; (800627c <_dtoa_r+0x350>)
 8005f98:	4ab8      	ldr	r2, [pc, #736]	; (800627c <_dtoa_r+0x350>)
 8005f9a:	402b      	ands	r3, r5
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d117      	bne.n	8005fd0 <_dtoa_r+0xa4>
 8005fa0:	4bb7      	ldr	r3, [pc, #732]	; (8006280 <_dtoa_r+0x354>)
 8005fa2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005fa4:	0328      	lsls	r0, r5, #12
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	9b02      	ldr	r3, [sp, #8]
 8005faa:	0b00      	lsrs	r0, r0, #12
 8005fac:	4318      	orrs	r0, r3
 8005fae:	d101      	bne.n	8005fb4 <_dtoa_r+0x88>
 8005fb0:	f000 fdbf 	bl	8006b32 <_dtoa_r+0xc06>
 8005fb4:	48b3      	ldr	r0, [pc, #716]	; (8006284 <_dtoa_r+0x358>)
 8005fb6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fb8:	9006      	str	r0, [sp, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <_dtoa_r+0x98>
 8005fbe:	4bb2      	ldr	r3, [pc, #712]	; (8006288 <_dtoa_r+0x35c>)
 8005fc0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	9806      	ldr	r0, [sp, #24]
 8005fc6:	b01d      	add	sp, #116	; 0x74
 8005fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fca:	2300      	movs	r3, #0
 8005fcc:	602b      	str	r3, [r5, #0]
 8005fce:	e7e1      	b.n	8005f94 <_dtoa_r+0x68>
 8005fd0:	9b08      	ldr	r3, [sp, #32]
 8005fd2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005fd4:	9312      	str	r3, [sp, #72]	; 0x48
 8005fd6:	9413      	str	r4, [sp, #76]	; 0x4c
 8005fd8:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005fda:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f7fa fa34 	bl	800044c <__aeabi_dcmpeq>
 8005fe4:	1e04      	subs	r4, r0, #0
 8005fe6:	d009      	beq.n	8005ffc <_dtoa_r+0xd0>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	4ba7      	ldr	r3, [pc, #668]	; (800628c <_dtoa_r+0x360>)
 8005ff0:	9306      	str	r3, [sp, #24]
 8005ff2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0e5      	beq.n	8005fc4 <_dtoa_r+0x98>
 8005ff8:	4ba5      	ldr	r3, [pc, #660]	; (8006290 <_dtoa_r+0x364>)
 8005ffa:	e7e1      	b.n	8005fc0 <_dtoa_r+0x94>
 8005ffc:	ab1a      	add	r3, sp, #104	; 0x68
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	ab1b      	add	r3, sp, #108	; 0x6c
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	0038      	movs	r0, r7
 8006006:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006008:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800600a:	f001 f903 	bl	8007214 <__d2b>
 800600e:	006e      	lsls	r6, r5, #1
 8006010:	9005      	str	r0, [sp, #20]
 8006012:	0d76      	lsrs	r6, r6, #21
 8006014:	d100      	bne.n	8006018 <_dtoa_r+0xec>
 8006016:	e07c      	b.n	8006112 <_dtoa_r+0x1e6>
 8006018:	9812      	ldr	r0, [sp, #72]	; 0x48
 800601a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800601c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800601e:	4a9d      	ldr	r2, [pc, #628]	; (8006294 <_dtoa_r+0x368>)
 8006020:	031b      	lsls	r3, r3, #12
 8006022:	0b1b      	lsrs	r3, r3, #12
 8006024:	431a      	orrs	r2, r3
 8006026:	0011      	movs	r1, r2
 8006028:	4b9b      	ldr	r3, [pc, #620]	; (8006298 <_dtoa_r+0x36c>)
 800602a:	9418      	str	r4, [sp, #96]	; 0x60
 800602c:	18f6      	adds	r6, r6, r3
 800602e:	2200      	movs	r2, #0
 8006030:	4b9a      	ldr	r3, [pc, #616]	; (800629c <_dtoa_r+0x370>)
 8006032:	f7fb fedd 	bl	8001df0 <__aeabi_dsub>
 8006036:	4a9a      	ldr	r2, [pc, #616]	; (80062a0 <_dtoa_r+0x374>)
 8006038:	4b9a      	ldr	r3, [pc, #616]	; (80062a4 <_dtoa_r+0x378>)
 800603a:	f7fb fc6d 	bl	8001918 <__aeabi_dmul>
 800603e:	4a9a      	ldr	r2, [pc, #616]	; (80062a8 <_dtoa_r+0x37c>)
 8006040:	4b9a      	ldr	r3, [pc, #616]	; (80062ac <_dtoa_r+0x380>)
 8006042:	f7fa fd2b 	bl	8000a9c <__aeabi_dadd>
 8006046:	0004      	movs	r4, r0
 8006048:	0030      	movs	r0, r6
 800604a:	000d      	movs	r5, r1
 800604c:	f7fc fab6 	bl	80025bc <__aeabi_i2d>
 8006050:	4a97      	ldr	r2, [pc, #604]	; (80062b0 <_dtoa_r+0x384>)
 8006052:	4b98      	ldr	r3, [pc, #608]	; (80062b4 <_dtoa_r+0x388>)
 8006054:	f7fb fc60 	bl	8001918 <__aeabi_dmul>
 8006058:	0002      	movs	r2, r0
 800605a:	000b      	movs	r3, r1
 800605c:	0020      	movs	r0, r4
 800605e:	0029      	movs	r1, r5
 8006060:	f7fa fd1c 	bl	8000a9c <__aeabi_dadd>
 8006064:	0004      	movs	r4, r0
 8006066:	000d      	movs	r5, r1
 8006068:	f7fc fa72 	bl	8002550 <__aeabi_d2iz>
 800606c:	2200      	movs	r2, #0
 800606e:	9002      	str	r0, [sp, #8]
 8006070:	2300      	movs	r3, #0
 8006072:	0020      	movs	r0, r4
 8006074:	0029      	movs	r1, r5
 8006076:	f7fa f9ef 	bl	8000458 <__aeabi_dcmplt>
 800607a:	2800      	cmp	r0, #0
 800607c:	d00b      	beq.n	8006096 <_dtoa_r+0x16a>
 800607e:	9802      	ldr	r0, [sp, #8]
 8006080:	f7fc fa9c 	bl	80025bc <__aeabi_i2d>
 8006084:	002b      	movs	r3, r5
 8006086:	0022      	movs	r2, r4
 8006088:	f7fa f9e0 	bl	800044c <__aeabi_dcmpeq>
 800608c:	4243      	negs	r3, r0
 800608e:	4158      	adcs	r0, r3
 8006090:	9b02      	ldr	r3, [sp, #8]
 8006092:	1a1b      	subs	r3, r3, r0
 8006094:	9302      	str	r3, [sp, #8]
 8006096:	2301      	movs	r3, #1
 8006098:	9316      	str	r3, [sp, #88]	; 0x58
 800609a:	9b02      	ldr	r3, [sp, #8]
 800609c:	2b16      	cmp	r3, #22
 800609e:	d80f      	bhi.n	80060c0 <_dtoa_r+0x194>
 80060a0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80060a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80060a4:	00da      	lsls	r2, r3, #3
 80060a6:	4b84      	ldr	r3, [pc, #528]	; (80062b8 <_dtoa_r+0x38c>)
 80060a8:	189b      	adds	r3, r3, r2
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f7fa f9d3 	bl	8000458 <__aeabi_dcmplt>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d049      	beq.n	800614a <_dtoa_r+0x21e>
 80060b6:	9b02      	ldr	r3, [sp, #8]
 80060b8:	3b01      	subs	r3, #1
 80060ba:	9302      	str	r3, [sp, #8]
 80060bc:	2300      	movs	r3, #0
 80060be:	9316      	str	r3, [sp, #88]	; 0x58
 80060c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80060c2:	1b9e      	subs	r6, r3, r6
 80060c4:	2300      	movs	r3, #0
 80060c6:	930a      	str	r3, [sp, #40]	; 0x28
 80060c8:	0033      	movs	r3, r6
 80060ca:	3b01      	subs	r3, #1
 80060cc:	930d      	str	r3, [sp, #52]	; 0x34
 80060ce:	d504      	bpl.n	80060da <_dtoa_r+0x1ae>
 80060d0:	2301      	movs	r3, #1
 80060d2:	1b9b      	subs	r3, r3, r6
 80060d4:	930a      	str	r3, [sp, #40]	; 0x28
 80060d6:	2300      	movs	r3, #0
 80060d8:	930d      	str	r3, [sp, #52]	; 0x34
 80060da:	9b02      	ldr	r3, [sp, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	db36      	blt.n	800614e <_dtoa_r+0x222>
 80060e0:	9a02      	ldr	r2, [sp, #8]
 80060e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060e4:	4694      	mov	ip, r2
 80060e6:	4463      	add	r3, ip
 80060e8:	930d      	str	r3, [sp, #52]	; 0x34
 80060ea:	2300      	movs	r3, #0
 80060ec:	9215      	str	r2, [sp, #84]	; 0x54
 80060ee:	930e      	str	r3, [sp, #56]	; 0x38
 80060f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80060f2:	2401      	movs	r4, #1
 80060f4:	2b09      	cmp	r3, #9
 80060f6:	d864      	bhi.n	80061c2 <_dtoa_r+0x296>
 80060f8:	2b05      	cmp	r3, #5
 80060fa:	dd02      	ble.n	8006102 <_dtoa_r+0x1d6>
 80060fc:	2400      	movs	r4, #0
 80060fe:	3b04      	subs	r3, #4
 8006100:	9322      	str	r3, [sp, #136]	; 0x88
 8006102:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006104:	1e98      	subs	r0, r3, #2
 8006106:	2803      	cmp	r0, #3
 8006108:	d864      	bhi.n	80061d4 <_dtoa_r+0x2a8>
 800610a:	f7fa f805 	bl	8000118 <__gnu_thumb1_case_uqi>
 800610e:	3829      	.short	0x3829
 8006110:	5836      	.short	0x5836
 8006112:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006114:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006116:	189e      	adds	r6, r3, r2
 8006118:	4b68      	ldr	r3, [pc, #416]	; (80062bc <_dtoa_r+0x390>)
 800611a:	18f2      	adds	r2, r6, r3
 800611c:	2a20      	cmp	r2, #32
 800611e:	dd0f      	ble.n	8006140 <_dtoa_r+0x214>
 8006120:	2340      	movs	r3, #64	; 0x40
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	409d      	lsls	r5, r3
 8006126:	4b66      	ldr	r3, [pc, #408]	; (80062c0 <_dtoa_r+0x394>)
 8006128:	9802      	ldr	r0, [sp, #8]
 800612a:	18f3      	adds	r3, r6, r3
 800612c:	40d8      	lsrs	r0, r3
 800612e:	4328      	orrs	r0, r5
 8006130:	f7fc fa74 	bl	800261c <__aeabi_ui2d>
 8006134:	2301      	movs	r3, #1
 8006136:	4c63      	ldr	r4, [pc, #396]	; (80062c4 <_dtoa_r+0x398>)
 8006138:	3e01      	subs	r6, #1
 800613a:	1909      	adds	r1, r1, r4
 800613c:	9318      	str	r3, [sp, #96]	; 0x60
 800613e:	e776      	b.n	800602e <_dtoa_r+0x102>
 8006140:	2320      	movs	r3, #32
 8006142:	9802      	ldr	r0, [sp, #8]
 8006144:	1a9b      	subs	r3, r3, r2
 8006146:	4098      	lsls	r0, r3
 8006148:	e7f2      	b.n	8006130 <_dtoa_r+0x204>
 800614a:	9016      	str	r0, [sp, #88]	; 0x58
 800614c:	e7b8      	b.n	80060c0 <_dtoa_r+0x194>
 800614e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006150:	9a02      	ldr	r2, [sp, #8]
 8006152:	1a9b      	subs	r3, r3, r2
 8006154:	930a      	str	r3, [sp, #40]	; 0x28
 8006156:	4253      	negs	r3, r2
 8006158:	930e      	str	r3, [sp, #56]	; 0x38
 800615a:	2300      	movs	r3, #0
 800615c:	9315      	str	r3, [sp, #84]	; 0x54
 800615e:	e7c7      	b.n	80060f0 <_dtoa_r+0x1c4>
 8006160:	2300      	movs	r3, #0
 8006162:	930f      	str	r3, [sp, #60]	; 0x3c
 8006164:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006166:	930c      	str	r3, [sp, #48]	; 0x30
 8006168:	9307      	str	r3, [sp, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	dc13      	bgt.n	8006196 <_dtoa_r+0x26a>
 800616e:	2301      	movs	r3, #1
 8006170:	001a      	movs	r2, r3
 8006172:	930c      	str	r3, [sp, #48]	; 0x30
 8006174:	9307      	str	r3, [sp, #28]
 8006176:	9223      	str	r2, [sp, #140]	; 0x8c
 8006178:	e00d      	b.n	8006196 <_dtoa_r+0x26a>
 800617a:	2301      	movs	r3, #1
 800617c:	e7f1      	b.n	8006162 <_dtoa_r+0x236>
 800617e:	2300      	movs	r3, #0
 8006180:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006182:	930f      	str	r3, [sp, #60]	; 0x3c
 8006184:	4694      	mov	ip, r2
 8006186:	9b02      	ldr	r3, [sp, #8]
 8006188:	4463      	add	r3, ip
 800618a:	930c      	str	r3, [sp, #48]	; 0x30
 800618c:	3301      	adds	r3, #1
 800618e:	9307      	str	r3, [sp, #28]
 8006190:	2b00      	cmp	r3, #0
 8006192:	dc00      	bgt.n	8006196 <_dtoa_r+0x26a>
 8006194:	2301      	movs	r3, #1
 8006196:	2200      	movs	r2, #0
 8006198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800619a:	6042      	str	r2, [r0, #4]
 800619c:	3204      	adds	r2, #4
 800619e:	0015      	movs	r5, r2
 80061a0:	3514      	adds	r5, #20
 80061a2:	6841      	ldr	r1, [r0, #4]
 80061a4:	429d      	cmp	r5, r3
 80061a6:	d919      	bls.n	80061dc <_dtoa_r+0x2b0>
 80061a8:	0038      	movs	r0, r7
 80061aa:	f000 fcfb 	bl	8006ba4 <_Balloc>
 80061ae:	9006      	str	r0, [sp, #24]
 80061b0:	2800      	cmp	r0, #0
 80061b2:	d117      	bne.n	80061e4 <_dtoa_r+0x2b8>
 80061b4:	21d5      	movs	r1, #213	; 0xd5
 80061b6:	0002      	movs	r2, r0
 80061b8:	4b43      	ldr	r3, [pc, #268]	; (80062c8 <_dtoa_r+0x39c>)
 80061ba:	0049      	lsls	r1, r1, #1
 80061bc:	e6cb      	b.n	8005f56 <_dtoa_r+0x2a>
 80061be:	2301      	movs	r3, #1
 80061c0:	e7de      	b.n	8006180 <_dtoa_r+0x254>
 80061c2:	2300      	movs	r3, #0
 80061c4:	940f      	str	r4, [sp, #60]	; 0x3c
 80061c6:	9322      	str	r3, [sp, #136]	; 0x88
 80061c8:	3b01      	subs	r3, #1
 80061ca:	930c      	str	r3, [sp, #48]	; 0x30
 80061cc:	9307      	str	r3, [sp, #28]
 80061ce:	2200      	movs	r2, #0
 80061d0:	3313      	adds	r3, #19
 80061d2:	e7d0      	b.n	8006176 <_dtoa_r+0x24a>
 80061d4:	2301      	movs	r3, #1
 80061d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80061d8:	3b02      	subs	r3, #2
 80061da:	e7f6      	b.n	80061ca <_dtoa_r+0x29e>
 80061dc:	3101      	adds	r1, #1
 80061de:	6041      	str	r1, [r0, #4]
 80061e0:	0052      	lsls	r2, r2, #1
 80061e2:	e7dc      	b.n	800619e <_dtoa_r+0x272>
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	9a06      	ldr	r2, [sp, #24]
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	9b07      	ldr	r3, [sp, #28]
 80061ec:	2b0e      	cmp	r3, #14
 80061ee:	d900      	bls.n	80061f2 <_dtoa_r+0x2c6>
 80061f0:	e0eb      	b.n	80063ca <_dtoa_r+0x49e>
 80061f2:	2c00      	cmp	r4, #0
 80061f4:	d100      	bne.n	80061f8 <_dtoa_r+0x2cc>
 80061f6:	e0e8      	b.n	80063ca <_dtoa_r+0x49e>
 80061f8:	9b02      	ldr	r3, [sp, #8]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	dd68      	ble.n	80062d0 <_dtoa_r+0x3a4>
 80061fe:	001a      	movs	r2, r3
 8006200:	210f      	movs	r1, #15
 8006202:	4b2d      	ldr	r3, [pc, #180]	; (80062b8 <_dtoa_r+0x38c>)
 8006204:	400a      	ands	r2, r1
 8006206:	00d2      	lsls	r2, r2, #3
 8006208:	189b      	adds	r3, r3, r2
 800620a:	681d      	ldr	r5, [r3, #0]
 800620c:	685e      	ldr	r6, [r3, #4]
 800620e:	9b02      	ldr	r3, [sp, #8]
 8006210:	111c      	asrs	r4, r3, #4
 8006212:	2302      	movs	r3, #2
 8006214:	9310      	str	r3, [sp, #64]	; 0x40
 8006216:	9b02      	ldr	r3, [sp, #8]
 8006218:	05db      	lsls	r3, r3, #23
 800621a:	d50b      	bpl.n	8006234 <_dtoa_r+0x308>
 800621c:	4b2b      	ldr	r3, [pc, #172]	; (80062cc <_dtoa_r+0x3a0>)
 800621e:	400c      	ands	r4, r1
 8006220:	6a1a      	ldr	r2, [r3, #32]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006226:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006228:	f7fa ff74 	bl	8001114 <__aeabi_ddiv>
 800622c:	2303      	movs	r3, #3
 800622e:	9008      	str	r0, [sp, #32]
 8006230:	9109      	str	r1, [sp, #36]	; 0x24
 8006232:	9310      	str	r3, [sp, #64]	; 0x40
 8006234:	4b25      	ldr	r3, [pc, #148]	; (80062cc <_dtoa_r+0x3a0>)
 8006236:	9314      	str	r3, [sp, #80]	; 0x50
 8006238:	2c00      	cmp	r4, #0
 800623a:	d108      	bne.n	800624e <_dtoa_r+0x322>
 800623c:	9808      	ldr	r0, [sp, #32]
 800623e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006240:	002a      	movs	r2, r5
 8006242:	0033      	movs	r3, r6
 8006244:	f7fa ff66 	bl	8001114 <__aeabi_ddiv>
 8006248:	9008      	str	r0, [sp, #32]
 800624a:	9109      	str	r1, [sp, #36]	; 0x24
 800624c:	e05c      	b.n	8006308 <_dtoa_r+0x3dc>
 800624e:	2301      	movs	r3, #1
 8006250:	421c      	tst	r4, r3
 8006252:	d00b      	beq.n	800626c <_dtoa_r+0x340>
 8006254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006256:	0028      	movs	r0, r5
 8006258:	3301      	adds	r3, #1
 800625a:	9310      	str	r3, [sp, #64]	; 0x40
 800625c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800625e:	0031      	movs	r1, r6
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f7fb fb58 	bl	8001918 <__aeabi_dmul>
 8006268:	0005      	movs	r5, r0
 800626a:	000e      	movs	r6, r1
 800626c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800626e:	1064      	asrs	r4, r4, #1
 8006270:	3308      	adds	r3, #8
 8006272:	e7e0      	b.n	8006236 <_dtoa_r+0x30a>
 8006274:	08008591 	.word	0x08008591
 8006278:	080085a8 	.word	0x080085a8
 800627c:	7ff00000 	.word	0x7ff00000
 8006280:	0000270f 	.word	0x0000270f
 8006284:	0800858d 	.word	0x0800858d
 8006288:	08008590 	.word	0x08008590
 800628c:	08008560 	.word	0x08008560
 8006290:	08008561 	.word	0x08008561
 8006294:	3ff00000 	.word	0x3ff00000
 8006298:	fffffc01 	.word	0xfffffc01
 800629c:	3ff80000 	.word	0x3ff80000
 80062a0:	636f4361 	.word	0x636f4361
 80062a4:	3fd287a7 	.word	0x3fd287a7
 80062a8:	8b60c8b3 	.word	0x8b60c8b3
 80062ac:	3fc68a28 	.word	0x3fc68a28
 80062b0:	509f79fb 	.word	0x509f79fb
 80062b4:	3fd34413 	.word	0x3fd34413
 80062b8:	08008698 	.word	0x08008698
 80062bc:	00000432 	.word	0x00000432
 80062c0:	00000412 	.word	0x00000412
 80062c4:	fe100000 	.word	0xfe100000
 80062c8:	08008603 	.word	0x08008603
 80062cc:	08008670 	.word	0x08008670
 80062d0:	2302      	movs	r3, #2
 80062d2:	9310      	str	r3, [sp, #64]	; 0x40
 80062d4:	9b02      	ldr	r3, [sp, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d016      	beq.n	8006308 <_dtoa_r+0x3dc>
 80062da:	9812      	ldr	r0, [sp, #72]	; 0x48
 80062dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80062de:	425c      	negs	r4, r3
 80062e0:	230f      	movs	r3, #15
 80062e2:	4ab6      	ldr	r2, [pc, #728]	; (80065bc <_dtoa_r+0x690>)
 80062e4:	4023      	ands	r3, r4
 80062e6:	00db      	lsls	r3, r3, #3
 80062e8:	18d3      	adds	r3, r2, r3
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f7fb fb13 	bl	8001918 <__aeabi_dmul>
 80062f2:	2601      	movs	r6, #1
 80062f4:	2300      	movs	r3, #0
 80062f6:	9008      	str	r0, [sp, #32]
 80062f8:	9109      	str	r1, [sp, #36]	; 0x24
 80062fa:	4db1      	ldr	r5, [pc, #708]	; (80065c0 <_dtoa_r+0x694>)
 80062fc:	1124      	asrs	r4, r4, #4
 80062fe:	2c00      	cmp	r4, #0
 8006300:	d000      	beq.n	8006304 <_dtoa_r+0x3d8>
 8006302:	e094      	b.n	800642e <_dtoa_r+0x502>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d19f      	bne.n	8006248 <_dtoa_r+0x31c>
 8006308:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800630a:	2b00      	cmp	r3, #0
 800630c:	d100      	bne.n	8006310 <_dtoa_r+0x3e4>
 800630e:	e09b      	b.n	8006448 <_dtoa_r+0x51c>
 8006310:	9c08      	ldr	r4, [sp, #32]
 8006312:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006314:	2200      	movs	r2, #0
 8006316:	0020      	movs	r0, r4
 8006318:	0029      	movs	r1, r5
 800631a:	4baa      	ldr	r3, [pc, #680]	; (80065c4 <_dtoa_r+0x698>)
 800631c:	f7fa f89c 	bl	8000458 <__aeabi_dcmplt>
 8006320:	2800      	cmp	r0, #0
 8006322:	d100      	bne.n	8006326 <_dtoa_r+0x3fa>
 8006324:	e090      	b.n	8006448 <_dtoa_r+0x51c>
 8006326:	9b07      	ldr	r3, [sp, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d100      	bne.n	800632e <_dtoa_r+0x402>
 800632c:	e08c      	b.n	8006448 <_dtoa_r+0x51c>
 800632e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006330:	2b00      	cmp	r3, #0
 8006332:	dd46      	ble.n	80063c2 <_dtoa_r+0x496>
 8006334:	9b02      	ldr	r3, [sp, #8]
 8006336:	2200      	movs	r2, #0
 8006338:	0020      	movs	r0, r4
 800633a:	0029      	movs	r1, r5
 800633c:	1e5e      	subs	r6, r3, #1
 800633e:	4ba2      	ldr	r3, [pc, #648]	; (80065c8 <_dtoa_r+0x69c>)
 8006340:	f7fb faea 	bl	8001918 <__aeabi_dmul>
 8006344:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006346:	9008      	str	r0, [sp, #32]
 8006348:	9109      	str	r1, [sp, #36]	; 0x24
 800634a:	3301      	adds	r3, #1
 800634c:	9310      	str	r3, [sp, #64]	; 0x40
 800634e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006350:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006352:	9c08      	ldr	r4, [sp, #32]
 8006354:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006356:	9314      	str	r3, [sp, #80]	; 0x50
 8006358:	f7fc f930 	bl	80025bc <__aeabi_i2d>
 800635c:	0022      	movs	r2, r4
 800635e:	002b      	movs	r3, r5
 8006360:	f7fb fada 	bl	8001918 <__aeabi_dmul>
 8006364:	2200      	movs	r2, #0
 8006366:	4b99      	ldr	r3, [pc, #612]	; (80065cc <_dtoa_r+0x6a0>)
 8006368:	f7fa fb98 	bl	8000a9c <__aeabi_dadd>
 800636c:	9010      	str	r0, [sp, #64]	; 0x40
 800636e:	9111      	str	r1, [sp, #68]	; 0x44
 8006370:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006372:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006374:	9208      	str	r2, [sp, #32]
 8006376:	9309      	str	r3, [sp, #36]	; 0x24
 8006378:	4a95      	ldr	r2, [pc, #596]	; (80065d0 <_dtoa_r+0x6a4>)
 800637a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800637c:	4694      	mov	ip, r2
 800637e:	4463      	add	r3, ip
 8006380:	9317      	str	r3, [sp, #92]	; 0x5c
 8006382:	9309      	str	r3, [sp, #36]	; 0x24
 8006384:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006386:	2b00      	cmp	r3, #0
 8006388:	d161      	bne.n	800644e <_dtoa_r+0x522>
 800638a:	2200      	movs	r2, #0
 800638c:	0020      	movs	r0, r4
 800638e:	0029      	movs	r1, r5
 8006390:	4b90      	ldr	r3, [pc, #576]	; (80065d4 <_dtoa_r+0x6a8>)
 8006392:	f7fb fd2d 	bl	8001df0 <__aeabi_dsub>
 8006396:	9a08      	ldr	r2, [sp, #32]
 8006398:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800639a:	0004      	movs	r4, r0
 800639c:	000d      	movs	r5, r1
 800639e:	f7fa f86f 	bl	8000480 <__aeabi_dcmpgt>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d000      	beq.n	80063a8 <_dtoa_r+0x47c>
 80063a6:	e2af      	b.n	8006908 <_dtoa_r+0x9dc>
 80063a8:	488b      	ldr	r0, [pc, #556]	; (80065d8 <_dtoa_r+0x6ac>)
 80063aa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80063ac:	4684      	mov	ip, r0
 80063ae:	4461      	add	r1, ip
 80063b0:	000b      	movs	r3, r1
 80063b2:	0020      	movs	r0, r4
 80063b4:	0029      	movs	r1, r5
 80063b6:	9a08      	ldr	r2, [sp, #32]
 80063b8:	f7fa f84e 	bl	8000458 <__aeabi_dcmplt>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d000      	beq.n	80063c2 <_dtoa_r+0x496>
 80063c0:	e29f      	b.n	8006902 <_dtoa_r+0x9d6>
 80063c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80063c6:	9308      	str	r3, [sp, #32]
 80063c8:	9409      	str	r4, [sp, #36]	; 0x24
 80063ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	da00      	bge.n	80063d2 <_dtoa_r+0x4a6>
 80063d0:	e172      	b.n	80066b8 <_dtoa_r+0x78c>
 80063d2:	9a02      	ldr	r2, [sp, #8]
 80063d4:	2a0e      	cmp	r2, #14
 80063d6:	dd00      	ble.n	80063da <_dtoa_r+0x4ae>
 80063d8:	e16e      	b.n	80066b8 <_dtoa_r+0x78c>
 80063da:	4b78      	ldr	r3, [pc, #480]	; (80065bc <_dtoa_r+0x690>)
 80063dc:	00d2      	lsls	r2, r2, #3
 80063de:	189b      	adds	r3, r3, r2
 80063e0:	685c      	ldr	r4, [r3, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	930a      	str	r3, [sp, #40]	; 0x28
 80063e6:	940b      	str	r4, [sp, #44]	; 0x2c
 80063e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	db00      	blt.n	80063f0 <_dtoa_r+0x4c4>
 80063ee:	e0f7      	b.n	80065e0 <_dtoa_r+0x6b4>
 80063f0:	9b07      	ldr	r3, [sp, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dd00      	ble.n	80063f8 <_dtoa_r+0x4cc>
 80063f6:	e0f3      	b.n	80065e0 <_dtoa_r+0x6b4>
 80063f8:	d000      	beq.n	80063fc <_dtoa_r+0x4d0>
 80063fa:	e282      	b.n	8006902 <_dtoa_r+0x9d6>
 80063fc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80063fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006400:	2200      	movs	r2, #0
 8006402:	4b74      	ldr	r3, [pc, #464]	; (80065d4 <_dtoa_r+0x6a8>)
 8006404:	f7fb fa88 	bl	8001918 <__aeabi_dmul>
 8006408:	9a08      	ldr	r2, [sp, #32]
 800640a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800640c:	f7fa f842 	bl	8000494 <__aeabi_dcmpge>
 8006410:	9e07      	ldr	r6, [sp, #28]
 8006412:	0035      	movs	r5, r6
 8006414:	2800      	cmp	r0, #0
 8006416:	d000      	beq.n	800641a <_dtoa_r+0x4ee>
 8006418:	e259      	b.n	80068ce <_dtoa_r+0x9a2>
 800641a:	9b06      	ldr	r3, [sp, #24]
 800641c:	9a06      	ldr	r2, [sp, #24]
 800641e:	3301      	adds	r3, #1
 8006420:	9308      	str	r3, [sp, #32]
 8006422:	2331      	movs	r3, #49	; 0x31
 8006424:	7013      	strb	r3, [r2, #0]
 8006426:	9b02      	ldr	r3, [sp, #8]
 8006428:	3301      	adds	r3, #1
 800642a:	9302      	str	r3, [sp, #8]
 800642c:	e254      	b.n	80068d8 <_dtoa_r+0x9ac>
 800642e:	4234      	tst	r4, r6
 8006430:	d007      	beq.n	8006442 <_dtoa_r+0x516>
 8006432:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006434:	3301      	adds	r3, #1
 8006436:	9310      	str	r3, [sp, #64]	; 0x40
 8006438:	682a      	ldr	r2, [r5, #0]
 800643a:	686b      	ldr	r3, [r5, #4]
 800643c:	f7fb fa6c 	bl	8001918 <__aeabi_dmul>
 8006440:	0033      	movs	r3, r6
 8006442:	1064      	asrs	r4, r4, #1
 8006444:	3508      	adds	r5, #8
 8006446:	e75a      	b.n	80062fe <_dtoa_r+0x3d2>
 8006448:	9e02      	ldr	r6, [sp, #8]
 800644a:	9b07      	ldr	r3, [sp, #28]
 800644c:	e780      	b.n	8006350 <_dtoa_r+0x424>
 800644e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006450:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006452:	1e5a      	subs	r2, r3, #1
 8006454:	4b59      	ldr	r3, [pc, #356]	; (80065bc <_dtoa_r+0x690>)
 8006456:	00d2      	lsls	r2, r2, #3
 8006458:	189b      	adds	r3, r3, r2
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2900      	cmp	r1, #0
 8006460:	d051      	beq.n	8006506 <_dtoa_r+0x5da>
 8006462:	2000      	movs	r0, #0
 8006464:	495d      	ldr	r1, [pc, #372]	; (80065dc <_dtoa_r+0x6b0>)
 8006466:	f7fa fe55 	bl	8001114 <__aeabi_ddiv>
 800646a:	9a08      	ldr	r2, [sp, #32]
 800646c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800646e:	f7fb fcbf 	bl	8001df0 <__aeabi_dsub>
 8006472:	9a06      	ldr	r2, [sp, #24]
 8006474:	9b06      	ldr	r3, [sp, #24]
 8006476:	4694      	mov	ip, r2
 8006478:	9317      	str	r3, [sp, #92]	; 0x5c
 800647a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800647c:	9010      	str	r0, [sp, #64]	; 0x40
 800647e:	9111      	str	r1, [sp, #68]	; 0x44
 8006480:	4463      	add	r3, ip
 8006482:	9319      	str	r3, [sp, #100]	; 0x64
 8006484:	0029      	movs	r1, r5
 8006486:	0020      	movs	r0, r4
 8006488:	f7fc f862 	bl	8002550 <__aeabi_d2iz>
 800648c:	9014      	str	r0, [sp, #80]	; 0x50
 800648e:	f7fc f895 	bl	80025bc <__aeabi_i2d>
 8006492:	0002      	movs	r2, r0
 8006494:	000b      	movs	r3, r1
 8006496:	0020      	movs	r0, r4
 8006498:	0029      	movs	r1, r5
 800649a:	f7fb fca9 	bl	8001df0 <__aeabi_dsub>
 800649e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80064a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80064a2:	3301      	adds	r3, #1
 80064a4:	9308      	str	r3, [sp, #32]
 80064a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064a8:	0004      	movs	r4, r0
 80064aa:	3330      	adds	r3, #48	; 0x30
 80064ac:	7013      	strb	r3, [r2, #0]
 80064ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064b2:	000d      	movs	r5, r1
 80064b4:	f7f9 ffd0 	bl	8000458 <__aeabi_dcmplt>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d175      	bne.n	80065a8 <_dtoa_r+0x67c>
 80064bc:	0022      	movs	r2, r4
 80064be:	002b      	movs	r3, r5
 80064c0:	2000      	movs	r0, #0
 80064c2:	4940      	ldr	r1, [pc, #256]	; (80065c4 <_dtoa_r+0x698>)
 80064c4:	f7fb fc94 	bl	8001df0 <__aeabi_dsub>
 80064c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80064ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064cc:	f7f9 ffc4 	bl	8000458 <__aeabi_dcmplt>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d000      	beq.n	80064d6 <_dtoa_r+0x5aa>
 80064d4:	e0d2      	b.n	800667c <_dtoa_r+0x750>
 80064d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80064d8:	9a08      	ldr	r2, [sp, #32]
 80064da:	4293      	cmp	r3, r2
 80064dc:	d100      	bne.n	80064e0 <_dtoa_r+0x5b4>
 80064de:	e770      	b.n	80063c2 <_dtoa_r+0x496>
 80064e0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80064e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80064e4:	2200      	movs	r2, #0
 80064e6:	4b38      	ldr	r3, [pc, #224]	; (80065c8 <_dtoa_r+0x69c>)
 80064e8:	f7fb fa16 	bl	8001918 <__aeabi_dmul>
 80064ec:	4b36      	ldr	r3, [pc, #216]	; (80065c8 <_dtoa_r+0x69c>)
 80064ee:	9010      	str	r0, [sp, #64]	; 0x40
 80064f0:	9111      	str	r1, [sp, #68]	; 0x44
 80064f2:	2200      	movs	r2, #0
 80064f4:	0020      	movs	r0, r4
 80064f6:	0029      	movs	r1, r5
 80064f8:	f7fb fa0e 	bl	8001918 <__aeabi_dmul>
 80064fc:	9b08      	ldr	r3, [sp, #32]
 80064fe:	0004      	movs	r4, r0
 8006500:	000d      	movs	r5, r1
 8006502:	9317      	str	r3, [sp, #92]	; 0x5c
 8006504:	e7be      	b.n	8006484 <_dtoa_r+0x558>
 8006506:	9808      	ldr	r0, [sp, #32]
 8006508:	9909      	ldr	r1, [sp, #36]	; 0x24
 800650a:	f7fb fa05 	bl	8001918 <__aeabi_dmul>
 800650e:	9a06      	ldr	r2, [sp, #24]
 8006510:	9b06      	ldr	r3, [sp, #24]
 8006512:	4694      	mov	ip, r2
 8006514:	9308      	str	r3, [sp, #32]
 8006516:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006518:	9010      	str	r0, [sp, #64]	; 0x40
 800651a:	9111      	str	r1, [sp, #68]	; 0x44
 800651c:	4463      	add	r3, ip
 800651e:	9319      	str	r3, [sp, #100]	; 0x64
 8006520:	0029      	movs	r1, r5
 8006522:	0020      	movs	r0, r4
 8006524:	f7fc f814 	bl	8002550 <__aeabi_d2iz>
 8006528:	9017      	str	r0, [sp, #92]	; 0x5c
 800652a:	f7fc f847 	bl	80025bc <__aeabi_i2d>
 800652e:	0002      	movs	r2, r0
 8006530:	000b      	movs	r3, r1
 8006532:	0020      	movs	r0, r4
 8006534:	0029      	movs	r1, r5
 8006536:	f7fb fc5b 	bl	8001df0 <__aeabi_dsub>
 800653a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800653c:	9a08      	ldr	r2, [sp, #32]
 800653e:	3330      	adds	r3, #48	; 0x30
 8006540:	7013      	strb	r3, [r2, #0]
 8006542:	0013      	movs	r3, r2
 8006544:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006546:	3301      	adds	r3, #1
 8006548:	0004      	movs	r4, r0
 800654a:	000d      	movs	r5, r1
 800654c:	9308      	str	r3, [sp, #32]
 800654e:	4293      	cmp	r3, r2
 8006550:	d12c      	bne.n	80065ac <_dtoa_r+0x680>
 8006552:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006554:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006556:	9a06      	ldr	r2, [sp, #24]
 8006558:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800655a:	4694      	mov	ip, r2
 800655c:	4463      	add	r3, ip
 800655e:	2200      	movs	r2, #0
 8006560:	9308      	str	r3, [sp, #32]
 8006562:	4b1e      	ldr	r3, [pc, #120]	; (80065dc <_dtoa_r+0x6b0>)
 8006564:	f7fa fa9a 	bl	8000a9c <__aeabi_dadd>
 8006568:	0002      	movs	r2, r0
 800656a:	000b      	movs	r3, r1
 800656c:	0020      	movs	r0, r4
 800656e:	0029      	movs	r1, r5
 8006570:	f7f9 ff86 	bl	8000480 <__aeabi_dcmpgt>
 8006574:	2800      	cmp	r0, #0
 8006576:	d000      	beq.n	800657a <_dtoa_r+0x64e>
 8006578:	e080      	b.n	800667c <_dtoa_r+0x750>
 800657a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800657c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800657e:	2000      	movs	r0, #0
 8006580:	4916      	ldr	r1, [pc, #88]	; (80065dc <_dtoa_r+0x6b0>)
 8006582:	f7fb fc35 	bl	8001df0 <__aeabi_dsub>
 8006586:	0002      	movs	r2, r0
 8006588:	000b      	movs	r3, r1
 800658a:	0020      	movs	r0, r4
 800658c:	0029      	movs	r1, r5
 800658e:	f7f9 ff63 	bl	8000458 <__aeabi_dcmplt>
 8006592:	2800      	cmp	r0, #0
 8006594:	d100      	bne.n	8006598 <_dtoa_r+0x66c>
 8006596:	e714      	b.n	80063c2 <_dtoa_r+0x496>
 8006598:	9b08      	ldr	r3, [sp, #32]
 800659a:	001a      	movs	r2, r3
 800659c:	3a01      	subs	r2, #1
 800659e:	9208      	str	r2, [sp, #32]
 80065a0:	7812      	ldrb	r2, [r2, #0]
 80065a2:	2a30      	cmp	r2, #48	; 0x30
 80065a4:	d0f8      	beq.n	8006598 <_dtoa_r+0x66c>
 80065a6:	9308      	str	r3, [sp, #32]
 80065a8:	9602      	str	r6, [sp, #8]
 80065aa:	e055      	b.n	8006658 <_dtoa_r+0x72c>
 80065ac:	2200      	movs	r2, #0
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <_dtoa_r+0x69c>)
 80065b0:	f7fb f9b2 	bl	8001918 <__aeabi_dmul>
 80065b4:	0004      	movs	r4, r0
 80065b6:	000d      	movs	r5, r1
 80065b8:	e7b2      	b.n	8006520 <_dtoa_r+0x5f4>
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	08008698 	.word	0x08008698
 80065c0:	08008670 	.word	0x08008670
 80065c4:	3ff00000 	.word	0x3ff00000
 80065c8:	40240000 	.word	0x40240000
 80065cc:	401c0000 	.word	0x401c0000
 80065d0:	fcc00000 	.word	0xfcc00000
 80065d4:	40140000 	.word	0x40140000
 80065d8:	7cc00000 	.word	0x7cc00000
 80065dc:	3fe00000 	.word	0x3fe00000
 80065e0:	9b07      	ldr	r3, [sp, #28]
 80065e2:	9e06      	ldr	r6, [sp, #24]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	199b      	adds	r3, r3, r6
 80065e8:	930c      	str	r3, [sp, #48]	; 0x30
 80065ea:	9c08      	ldr	r4, [sp, #32]
 80065ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80065ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f2:	0020      	movs	r0, r4
 80065f4:	0029      	movs	r1, r5
 80065f6:	f7fa fd8d 	bl	8001114 <__aeabi_ddiv>
 80065fa:	f7fb ffa9 	bl	8002550 <__aeabi_d2iz>
 80065fe:	9007      	str	r0, [sp, #28]
 8006600:	f7fb ffdc 	bl	80025bc <__aeabi_i2d>
 8006604:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006608:	f7fb f986 	bl	8001918 <__aeabi_dmul>
 800660c:	0002      	movs	r2, r0
 800660e:	000b      	movs	r3, r1
 8006610:	0020      	movs	r0, r4
 8006612:	0029      	movs	r1, r5
 8006614:	f7fb fbec 	bl	8001df0 <__aeabi_dsub>
 8006618:	0033      	movs	r3, r6
 800661a:	9a07      	ldr	r2, [sp, #28]
 800661c:	3601      	adds	r6, #1
 800661e:	3230      	adds	r2, #48	; 0x30
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006624:	9608      	str	r6, [sp, #32]
 8006626:	429a      	cmp	r2, r3
 8006628:	d139      	bne.n	800669e <_dtoa_r+0x772>
 800662a:	0002      	movs	r2, r0
 800662c:	000b      	movs	r3, r1
 800662e:	f7fa fa35 	bl	8000a9c <__aeabi_dadd>
 8006632:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006636:	0004      	movs	r4, r0
 8006638:	000d      	movs	r5, r1
 800663a:	f7f9 ff21 	bl	8000480 <__aeabi_dcmpgt>
 800663e:	2800      	cmp	r0, #0
 8006640:	d11b      	bne.n	800667a <_dtoa_r+0x74e>
 8006642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006646:	0020      	movs	r0, r4
 8006648:	0029      	movs	r1, r5
 800664a:	f7f9 feff 	bl	800044c <__aeabi_dcmpeq>
 800664e:	2800      	cmp	r0, #0
 8006650:	d002      	beq.n	8006658 <_dtoa_r+0x72c>
 8006652:	9b07      	ldr	r3, [sp, #28]
 8006654:	07db      	lsls	r3, r3, #31
 8006656:	d410      	bmi.n	800667a <_dtoa_r+0x74e>
 8006658:	0038      	movs	r0, r7
 800665a:	9905      	ldr	r1, [sp, #20]
 800665c:	f000 fae6 	bl	8006c2c <_Bfree>
 8006660:	2300      	movs	r3, #0
 8006662:	9a08      	ldr	r2, [sp, #32]
 8006664:	9802      	ldr	r0, [sp, #8]
 8006666:	7013      	strb	r3, [r2, #0]
 8006668:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800666a:	3001      	adds	r0, #1
 800666c:	6018      	str	r0, [r3, #0]
 800666e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006670:	2b00      	cmp	r3, #0
 8006672:	d100      	bne.n	8006676 <_dtoa_r+0x74a>
 8006674:	e4a6      	b.n	8005fc4 <_dtoa_r+0x98>
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	e4a4      	b.n	8005fc4 <_dtoa_r+0x98>
 800667a:	9e02      	ldr	r6, [sp, #8]
 800667c:	9b08      	ldr	r3, [sp, #32]
 800667e:	9308      	str	r3, [sp, #32]
 8006680:	3b01      	subs	r3, #1
 8006682:	781a      	ldrb	r2, [r3, #0]
 8006684:	2a39      	cmp	r2, #57	; 0x39
 8006686:	d106      	bne.n	8006696 <_dtoa_r+0x76a>
 8006688:	9a06      	ldr	r2, [sp, #24]
 800668a:	429a      	cmp	r2, r3
 800668c:	d1f7      	bne.n	800667e <_dtoa_r+0x752>
 800668e:	2230      	movs	r2, #48	; 0x30
 8006690:	9906      	ldr	r1, [sp, #24]
 8006692:	3601      	adds	r6, #1
 8006694:	700a      	strb	r2, [r1, #0]
 8006696:	781a      	ldrb	r2, [r3, #0]
 8006698:	3201      	adds	r2, #1
 800669a:	701a      	strb	r2, [r3, #0]
 800669c:	e784      	b.n	80065a8 <_dtoa_r+0x67c>
 800669e:	2200      	movs	r2, #0
 80066a0:	4baa      	ldr	r3, [pc, #680]	; (800694c <_dtoa_r+0xa20>)
 80066a2:	f7fb f939 	bl	8001918 <__aeabi_dmul>
 80066a6:	2200      	movs	r2, #0
 80066a8:	2300      	movs	r3, #0
 80066aa:	0004      	movs	r4, r0
 80066ac:	000d      	movs	r5, r1
 80066ae:	f7f9 fecd 	bl	800044c <__aeabi_dcmpeq>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d09b      	beq.n	80065ee <_dtoa_r+0x6c2>
 80066b6:	e7cf      	b.n	8006658 <_dtoa_r+0x72c>
 80066b8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80066ba:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80066bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80066be:	2d00      	cmp	r5, #0
 80066c0:	d012      	beq.n	80066e8 <_dtoa_r+0x7bc>
 80066c2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066c4:	2a01      	cmp	r2, #1
 80066c6:	dc66      	bgt.n	8006796 <_dtoa_r+0x86a>
 80066c8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	d05d      	beq.n	800678a <_dtoa_r+0x85e>
 80066ce:	4aa0      	ldr	r2, [pc, #640]	; (8006950 <_dtoa_r+0xa24>)
 80066d0:	189b      	adds	r3, r3, r2
 80066d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066d4:	2101      	movs	r1, #1
 80066d6:	18d2      	adds	r2, r2, r3
 80066d8:	920a      	str	r2, [sp, #40]	; 0x28
 80066da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066dc:	0038      	movs	r0, r7
 80066de:	18d3      	adds	r3, r2, r3
 80066e0:	930d      	str	r3, [sp, #52]	; 0x34
 80066e2:	f000 fb53 	bl	8006d8c <__i2b>
 80066e6:	0005      	movs	r5, r0
 80066e8:	2c00      	cmp	r4, #0
 80066ea:	dd0e      	ble.n	800670a <_dtoa_r+0x7de>
 80066ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	dd0b      	ble.n	800670a <_dtoa_r+0x7de>
 80066f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80066f4:	0023      	movs	r3, r4
 80066f6:	4294      	cmp	r4, r2
 80066f8:	dd00      	ble.n	80066fc <_dtoa_r+0x7d0>
 80066fa:	0013      	movs	r3, r2
 80066fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066fe:	1ae4      	subs	r4, r4, r3
 8006700:	1ad2      	subs	r2, r2, r3
 8006702:	920a      	str	r2, [sp, #40]	; 0x28
 8006704:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	930d      	str	r3, [sp, #52]	; 0x34
 800670a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800670c:	2b00      	cmp	r3, #0
 800670e:	d01f      	beq.n	8006750 <_dtoa_r+0x824>
 8006710:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006712:	2b00      	cmp	r3, #0
 8006714:	d054      	beq.n	80067c0 <_dtoa_r+0x894>
 8006716:	2e00      	cmp	r6, #0
 8006718:	dd11      	ble.n	800673e <_dtoa_r+0x812>
 800671a:	0029      	movs	r1, r5
 800671c:	0032      	movs	r2, r6
 800671e:	0038      	movs	r0, r7
 8006720:	f000 fbfa 	bl	8006f18 <__pow5mult>
 8006724:	9a05      	ldr	r2, [sp, #20]
 8006726:	0001      	movs	r1, r0
 8006728:	0005      	movs	r5, r0
 800672a:	0038      	movs	r0, r7
 800672c:	f000 fb44 	bl	8006db8 <__multiply>
 8006730:	9905      	ldr	r1, [sp, #20]
 8006732:	9014      	str	r0, [sp, #80]	; 0x50
 8006734:	0038      	movs	r0, r7
 8006736:	f000 fa79 	bl	8006c2c <_Bfree>
 800673a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800673c:	9305      	str	r3, [sp, #20]
 800673e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006740:	1b9a      	subs	r2, r3, r6
 8006742:	42b3      	cmp	r3, r6
 8006744:	d004      	beq.n	8006750 <_dtoa_r+0x824>
 8006746:	0038      	movs	r0, r7
 8006748:	9905      	ldr	r1, [sp, #20]
 800674a:	f000 fbe5 	bl	8006f18 <__pow5mult>
 800674e:	9005      	str	r0, [sp, #20]
 8006750:	2101      	movs	r1, #1
 8006752:	0038      	movs	r0, r7
 8006754:	f000 fb1a 	bl	8006d8c <__i2b>
 8006758:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800675a:	0006      	movs	r6, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	dd31      	ble.n	80067c4 <_dtoa_r+0x898>
 8006760:	001a      	movs	r2, r3
 8006762:	0001      	movs	r1, r0
 8006764:	0038      	movs	r0, r7
 8006766:	f000 fbd7 	bl	8006f18 <__pow5mult>
 800676a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800676c:	0006      	movs	r6, r0
 800676e:	2b01      	cmp	r3, #1
 8006770:	dd2d      	ble.n	80067ce <_dtoa_r+0x8a2>
 8006772:	2300      	movs	r3, #0
 8006774:	930e      	str	r3, [sp, #56]	; 0x38
 8006776:	6933      	ldr	r3, [r6, #16]
 8006778:	3303      	adds	r3, #3
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	18f3      	adds	r3, r6, r3
 800677e:	6858      	ldr	r0, [r3, #4]
 8006780:	f000 fabc 	bl	8006cfc <__hi0bits>
 8006784:	2320      	movs	r3, #32
 8006786:	1a18      	subs	r0, r3, r0
 8006788:	e039      	b.n	80067fe <_dtoa_r+0x8d2>
 800678a:	2336      	movs	r3, #54	; 0x36
 800678c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800678e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006790:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006792:	1a9b      	subs	r3, r3, r2
 8006794:	e79d      	b.n	80066d2 <_dtoa_r+0x7a6>
 8006796:	9b07      	ldr	r3, [sp, #28]
 8006798:	1e5e      	subs	r6, r3, #1
 800679a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800679c:	42b3      	cmp	r3, r6
 800679e:	db07      	blt.n	80067b0 <_dtoa_r+0x884>
 80067a0:	1b9e      	subs	r6, r3, r6
 80067a2:	9b07      	ldr	r3, [sp, #28]
 80067a4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	da93      	bge.n	80066d2 <_dtoa_r+0x7a6>
 80067aa:	1ae4      	subs	r4, r4, r3
 80067ac:	2300      	movs	r3, #0
 80067ae:	e790      	b.n	80066d2 <_dtoa_r+0x7a6>
 80067b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067b4:	1af3      	subs	r3, r6, r3
 80067b6:	18d3      	adds	r3, r2, r3
 80067b8:	960e      	str	r6, [sp, #56]	; 0x38
 80067ba:	9315      	str	r3, [sp, #84]	; 0x54
 80067bc:	2600      	movs	r6, #0
 80067be:	e7f0      	b.n	80067a2 <_dtoa_r+0x876>
 80067c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067c2:	e7c0      	b.n	8006746 <_dtoa_r+0x81a>
 80067c4:	2300      	movs	r3, #0
 80067c6:	930e      	str	r3, [sp, #56]	; 0x38
 80067c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	dc13      	bgt.n	80067f6 <_dtoa_r+0x8ca>
 80067ce:	2300      	movs	r3, #0
 80067d0:	930e      	str	r3, [sp, #56]	; 0x38
 80067d2:	9b08      	ldr	r3, [sp, #32]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10e      	bne.n	80067f6 <_dtoa_r+0x8ca>
 80067d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067da:	031b      	lsls	r3, r3, #12
 80067dc:	d10b      	bne.n	80067f6 <_dtoa_r+0x8ca>
 80067de:	4b5d      	ldr	r3, [pc, #372]	; (8006954 <_dtoa_r+0xa28>)
 80067e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067e2:	4213      	tst	r3, r2
 80067e4:	d007      	beq.n	80067f6 <_dtoa_r+0x8ca>
 80067e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067e8:	3301      	adds	r3, #1
 80067ea:	930a      	str	r3, [sp, #40]	; 0x28
 80067ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80067ee:	3301      	adds	r3, #1
 80067f0:	930d      	str	r3, [sp, #52]	; 0x34
 80067f2:	2301      	movs	r3, #1
 80067f4:	930e      	str	r3, [sp, #56]	; 0x38
 80067f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80067f8:	2001      	movs	r0, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1bb      	bne.n	8006776 <_dtoa_r+0x84a>
 80067fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006800:	221f      	movs	r2, #31
 8006802:	1818      	adds	r0, r3, r0
 8006804:	0003      	movs	r3, r0
 8006806:	4013      	ands	r3, r2
 8006808:	4210      	tst	r0, r2
 800680a:	d046      	beq.n	800689a <_dtoa_r+0x96e>
 800680c:	3201      	adds	r2, #1
 800680e:	1ad2      	subs	r2, r2, r3
 8006810:	2a04      	cmp	r2, #4
 8006812:	dd3f      	ble.n	8006894 <_dtoa_r+0x968>
 8006814:	221c      	movs	r2, #28
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800681a:	18e4      	adds	r4, r4, r3
 800681c:	18d2      	adds	r2, r2, r3
 800681e:	920a      	str	r2, [sp, #40]	; 0x28
 8006820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006822:	18d3      	adds	r3, r2, r3
 8006824:	930d      	str	r3, [sp, #52]	; 0x34
 8006826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006828:	2b00      	cmp	r3, #0
 800682a:	dd05      	ble.n	8006838 <_dtoa_r+0x90c>
 800682c:	001a      	movs	r2, r3
 800682e:	0038      	movs	r0, r7
 8006830:	9905      	ldr	r1, [sp, #20]
 8006832:	f000 fbcd 	bl	8006fd0 <__lshift>
 8006836:	9005      	str	r0, [sp, #20]
 8006838:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800683a:	2b00      	cmp	r3, #0
 800683c:	dd05      	ble.n	800684a <_dtoa_r+0x91e>
 800683e:	0031      	movs	r1, r6
 8006840:	001a      	movs	r2, r3
 8006842:	0038      	movs	r0, r7
 8006844:	f000 fbc4 	bl	8006fd0 <__lshift>
 8006848:	0006      	movs	r6, r0
 800684a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800684c:	2b00      	cmp	r3, #0
 800684e:	d026      	beq.n	800689e <_dtoa_r+0x972>
 8006850:	0031      	movs	r1, r6
 8006852:	9805      	ldr	r0, [sp, #20]
 8006854:	f000 fc2a 	bl	80070ac <__mcmp>
 8006858:	2800      	cmp	r0, #0
 800685a:	da20      	bge.n	800689e <_dtoa_r+0x972>
 800685c:	9b02      	ldr	r3, [sp, #8]
 800685e:	220a      	movs	r2, #10
 8006860:	3b01      	subs	r3, #1
 8006862:	9302      	str	r3, [sp, #8]
 8006864:	0038      	movs	r0, r7
 8006866:	2300      	movs	r3, #0
 8006868:	9905      	ldr	r1, [sp, #20]
 800686a:	f000 fa03 	bl	8006c74 <__multadd>
 800686e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006870:	9005      	str	r0, [sp, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d100      	bne.n	8006878 <_dtoa_r+0x94c>
 8006876:	e166      	b.n	8006b46 <_dtoa_r+0xc1a>
 8006878:	2300      	movs	r3, #0
 800687a:	0029      	movs	r1, r5
 800687c:	220a      	movs	r2, #10
 800687e:	0038      	movs	r0, r7
 8006880:	f000 f9f8 	bl	8006c74 <__multadd>
 8006884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006886:	0005      	movs	r5, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	dc47      	bgt.n	800691c <_dtoa_r+0x9f0>
 800688c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800688e:	2b02      	cmp	r3, #2
 8006890:	dc0d      	bgt.n	80068ae <_dtoa_r+0x982>
 8006892:	e043      	b.n	800691c <_dtoa_r+0x9f0>
 8006894:	2a04      	cmp	r2, #4
 8006896:	d0c6      	beq.n	8006826 <_dtoa_r+0x8fa>
 8006898:	0013      	movs	r3, r2
 800689a:	331c      	adds	r3, #28
 800689c:	e7bc      	b.n	8006818 <_dtoa_r+0x8ec>
 800689e:	9b07      	ldr	r3, [sp, #28]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	dc35      	bgt.n	8006910 <_dtoa_r+0x9e4>
 80068a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	dd32      	ble.n	8006910 <_dtoa_r+0x9e4>
 80068aa:	9b07      	ldr	r3, [sp, #28]
 80068ac:	930c      	str	r3, [sp, #48]	; 0x30
 80068ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10c      	bne.n	80068ce <_dtoa_r+0x9a2>
 80068b4:	0031      	movs	r1, r6
 80068b6:	2205      	movs	r2, #5
 80068b8:	0038      	movs	r0, r7
 80068ba:	f000 f9db 	bl	8006c74 <__multadd>
 80068be:	0006      	movs	r6, r0
 80068c0:	0001      	movs	r1, r0
 80068c2:	9805      	ldr	r0, [sp, #20]
 80068c4:	f000 fbf2 	bl	80070ac <__mcmp>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	dd00      	ble.n	80068ce <_dtoa_r+0x9a2>
 80068cc:	e5a5      	b.n	800641a <_dtoa_r+0x4ee>
 80068ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068d0:	43db      	mvns	r3, r3
 80068d2:	9302      	str	r3, [sp, #8]
 80068d4:	9b06      	ldr	r3, [sp, #24]
 80068d6:	9308      	str	r3, [sp, #32]
 80068d8:	2400      	movs	r4, #0
 80068da:	0031      	movs	r1, r6
 80068dc:	0038      	movs	r0, r7
 80068de:	f000 f9a5 	bl	8006c2c <_Bfree>
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	d100      	bne.n	80068e8 <_dtoa_r+0x9bc>
 80068e6:	e6b7      	b.n	8006658 <_dtoa_r+0x72c>
 80068e8:	2c00      	cmp	r4, #0
 80068ea:	d005      	beq.n	80068f8 <_dtoa_r+0x9cc>
 80068ec:	42ac      	cmp	r4, r5
 80068ee:	d003      	beq.n	80068f8 <_dtoa_r+0x9cc>
 80068f0:	0021      	movs	r1, r4
 80068f2:	0038      	movs	r0, r7
 80068f4:	f000 f99a 	bl	8006c2c <_Bfree>
 80068f8:	0029      	movs	r1, r5
 80068fa:	0038      	movs	r0, r7
 80068fc:	f000 f996 	bl	8006c2c <_Bfree>
 8006900:	e6aa      	b.n	8006658 <_dtoa_r+0x72c>
 8006902:	2600      	movs	r6, #0
 8006904:	0035      	movs	r5, r6
 8006906:	e7e2      	b.n	80068ce <_dtoa_r+0x9a2>
 8006908:	9602      	str	r6, [sp, #8]
 800690a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800690c:	0035      	movs	r5, r6
 800690e:	e584      	b.n	800641a <_dtoa_r+0x4ee>
 8006910:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d100      	bne.n	8006918 <_dtoa_r+0x9ec>
 8006916:	e0ce      	b.n	8006ab6 <_dtoa_r+0xb8a>
 8006918:	9b07      	ldr	r3, [sp, #28]
 800691a:	930c      	str	r3, [sp, #48]	; 0x30
 800691c:	2c00      	cmp	r4, #0
 800691e:	dd05      	ble.n	800692c <_dtoa_r+0xa00>
 8006920:	0029      	movs	r1, r5
 8006922:	0022      	movs	r2, r4
 8006924:	0038      	movs	r0, r7
 8006926:	f000 fb53 	bl	8006fd0 <__lshift>
 800692a:	0005      	movs	r5, r0
 800692c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800692e:	0028      	movs	r0, r5
 8006930:	2b00      	cmp	r3, #0
 8006932:	d022      	beq.n	800697a <_dtoa_r+0xa4e>
 8006934:	0038      	movs	r0, r7
 8006936:	6869      	ldr	r1, [r5, #4]
 8006938:	f000 f934 	bl	8006ba4 <_Balloc>
 800693c:	1e04      	subs	r4, r0, #0
 800693e:	d10f      	bne.n	8006960 <_dtoa_r+0xa34>
 8006940:	0002      	movs	r2, r0
 8006942:	4b05      	ldr	r3, [pc, #20]	; (8006958 <_dtoa_r+0xa2c>)
 8006944:	4905      	ldr	r1, [pc, #20]	; (800695c <_dtoa_r+0xa30>)
 8006946:	f7ff fb06 	bl	8005f56 <_dtoa_r+0x2a>
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	40240000 	.word	0x40240000
 8006950:	00000433 	.word	0x00000433
 8006954:	7ff00000 	.word	0x7ff00000
 8006958:	08008603 	.word	0x08008603
 800695c:	000002ea 	.word	0x000002ea
 8006960:	0029      	movs	r1, r5
 8006962:	692b      	ldr	r3, [r5, #16]
 8006964:	310c      	adds	r1, #12
 8006966:	1c9a      	adds	r2, r3, #2
 8006968:	0092      	lsls	r2, r2, #2
 800696a:	300c      	adds	r0, #12
 800696c:	f000 f911 	bl	8006b92 <memcpy>
 8006970:	2201      	movs	r2, #1
 8006972:	0021      	movs	r1, r4
 8006974:	0038      	movs	r0, r7
 8006976:	f000 fb2b 	bl	8006fd0 <__lshift>
 800697a:	9b06      	ldr	r3, [sp, #24]
 800697c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800697e:	930a      	str	r3, [sp, #40]	; 0x28
 8006980:	3b01      	subs	r3, #1
 8006982:	189b      	adds	r3, r3, r2
 8006984:	2201      	movs	r2, #1
 8006986:	002c      	movs	r4, r5
 8006988:	0005      	movs	r5, r0
 800698a:	9314      	str	r3, [sp, #80]	; 0x50
 800698c:	9b08      	ldr	r3, [sp, #32]
 800698e:	4013      	ands	r3, r2
 8006990:	930f      	str	r3, [sp, #60]	; 0x3c
 8006992:	0031      	movs	r1, r6
 8006994:	9805      	ldr	r0, [sp, #20]
 8006996:	f7ff fa3d 	bl	8005e14 <quorem>
 800699a:	0003      	movs	r3, r0
 800699c:	0021      	movs	r1, r4
 800699e:	3330      	adds	r3, #48	; 0x30
 80069a0:	900d      	str	r0, [sp, #52]	; 0x34
 80069a2:	9805      	ldr	r0, [sp, #20]
 80069a4:	9307      	str	r3, [sp, #28]
 80069a6:	f000 fb81 	bl	80070ac <__mcmp>
 80069aa:	002a      	movs	r2, r5
 80069ac:	900e      	str	r0, [sp, #56]	; 0x38
 80069ae:	0031      	movs	r1, r6
 80069b0:	0038      	movs	r0, r7
 80069b2:	f000 fb97 	bl	80070e4 <__mdiff>
 80069b6:	68c3      	ldr	r3, [r0, #12]
 80069b8:	9008      	str	r0, [sp, #32]
 80069ba:	9310      	str	r3, [sp, #64]	; 0x40
 80069bc:	2301      	movs	r3, #1
 80069be:	930c      	str	r3, [sp, #48]	; 0x30
 80069c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <_dtoa_r+0xaa4>
 80069c6:	0001      	movs	r1, r0
 80069c8:	9805      	ldr	r0, [sp, #20]
 80069ca:	f000 fb6f 	bl	80070ac <__mcmp>
 80069ce:	900c      	str	r0, [sp, #48]	; 0x30
 80069d0:	0038      	movs	r0, r7
 80069d2:	9908      	ldr	r1, [sp, #32]
 80069d4:	f000 f92a 	bl	8006c2c <_Bfree>
 80069d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069dc:	3301      	adds	r3, #1
 80069de:	9308      	str	r3, [sp, #32]
 80069e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069e2:	4313      	orrs	r3, r2
 80069e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069e6:	4313      	orrs	r3, r2
 80069e8:	d10c      	bne.n	8006a04 <_dtoa_r+0xad8>
 80069ea:	9b07      	ldr	r3, [sp, #28]
 80069ec:	2b39      	cmp	r3, #57	; 0x39
 80069ee:	d026      	beq.n	8006a3e <_dtoa_r+0xb12>
 80069f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	dd02      	ble.n	80069fc <_dtoa_r+0xad0>
 80069f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069f8:	3331      	adds	r3, #49	; 0x31
 80069fa:	9307      	str	r3, [sp, #28]
 80069fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069fe:	9a07      	ldr	r2, [sp, #28]
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	e76a      	b.n	80068da <_dtoa_r+0x9ae>
 8006a04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	db04      	blt.n	8006a14 <_dtoa_r+0xae8>
 8006a0a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a10:	4313      	orrs	r3, r2
 8006a12:	d11f      	bne.n	8006a54 <_dtoa_r+0xb28>
 8006a14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	ddf0      	ble.n	80069fc <_dtoa_r+0xad0>
 8006a1a:	9905      	ldr	r1, [sp, #20]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	0038      	movs	r0, r7
 8006a20:	f000 fad6 	bl	8006fd0 <__lshift>
 8006a24:	0031      	movs	r1, r6
 8006a26:	9005      	str	r0, [sp, #20]
 8006a28:	f000 fb40 	bl	80070ac <__mcmp>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	dc03      	bgt.n	8006a38 <_dtoa_r+0xb0c>
 8006a30:	d1e4      	bne.n	80069fc <_dtoa_r+0xad0>
 8006a32:	9b07      	ldr	r3, [sp, #28]
 8006a34:	07db      	lsls	r3, r3, #31
 8006a36:	d5e1      	bpl.n	80069fc <_dtoa_r+0xad0>
 8006a38:	9b07      	ldr	r3, [sp, #28]
 8006a3a:	2b39      	cmp	r3, #57	; 0x39
 8006a3c:	d1db      	bne.n	80069f6 <_dtoa_r+0xaca>
 8006a3e:	2339      	movs	r3, #57	; 0x39
 8006a40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a42:	7013      	strb	r3, [r2, #0]
 8006a44:	9b08      	ldr	r3, [sp, #32]
 8006a46:	9308      	str	r3, [sp, #32]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	781a      	ldrb	r2, [r3, #0]
 8006a4c:	2a39      	cmp	r2, #57	; 0x39
 8006a4e:	d068      	beq.n	8006b22 <_dtoa_r+0xbf6>
 8006a50:	3201      	adds	r2, #1
 8006a52:	e7d5      	b.n	8006a00 <_dtoa_r+0xad4>
 8006a54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	dd07      	ble.n	8006a6a <_dtoa_r+0xb3e>
 8006a5a:	9b07      	ldr	r3, [sp, #28]
 8006a5c:	2b39      	cmp	r3, #57	; 0x39
 8006a5e:	d0ee      	beq.n	8006a3e <_dtoa_r+0xb12>
 8006a60:	9b07      	ldr	r3, [sp, #28]
 8006a62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a64:	3301      	adds	r3, #1
 8006a66:	7013      	strb	r3, [r2, #0]
 8006a68:	e737      	b.n	80068da <_dtoa_r+0x9ae>
 8006a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6c:	9a07      	ldr	r2, [sp, #28]
 8006a6e:	701a      	strb	r2, [r3, #0]
 8006a70:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006a72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d03e      	beq.n	8006af6 <_dtoa_r+0xbca>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	220a      	movs	r2, #10
 8006a7c:	9905      	ldr	r1, [sp, #20]
 8006a7e:	0038      	movs	r0, r7
 8006a80:	f000 f8f8 	bl	8006c74 <__multadd>
 8006a84:	2300      	movs	r3, #0
 8006a86:	9005      	str	r0, [sp, #20]
 8006a88:	220a      	movs	r2, #10
 8006a8a:	0021      	movs	r1, r4
 8006a8c:	0038      	movs	r0, r7
 8006a8e:	42ac      	cmp	r4, r5
 8006a90:	d106      	bne.n	8006aa0 <_dtoa_r+0xb74>
 8006a92:	f000 f8ef 	bl	8006c74 <__multadd>
 8006a96:	0004      	movs	r4, r0
 8006a98:	0005      	movs	r5, r0
 8006a9a:	9b08      	ldr	r3, [sp, #32]
 8006a9c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a9e:	e778      	b.n	8006992 <_dtoa_r+0xa66>
 8006aa0:	f000 f8e8 	bl	8006c74 <__multadd>
 8006aa4:	0029      	movs	r1, r5
 8006aa6:	0004      	movs	r4, r0
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	220a      	movs	r2, #10
 8006aac:	0038      	movs	r0, r7
 8006aae:	f000 f8e1 	bl	8006c74 <__multadd>
 8006ab2:	0005      	movs	r5, r0
 8006ab4:	e7f1      	b.n	8006a9a <_dtoa_r+0xb6e>
 8006ab6:	9b07      	ldr	r3, [sp, #28]
 8006ab8:	930c      	str	r3, [sp, #48]	; 0x30
 8006aba:	2400      	movs	r4, #0
 8006abc:	0031      	movs	r1, r6
 8006abe:	9805      	ldr	r0, [sp, #20]
 8006ac0:	f7ff f9a8 	bl	8005e14 <quorem>
 8006ac4:	9b06      	ldr	r3, [sp, #24]
 8006ac6:	3030      	adds	r0, #48	; 0x30
 8006ac8:	5518      	strb	r0, [r3, r4]
 8006aca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006acc:	3401      	adds	r4, #1
 8006ace:	9007      	str	r0, [sp, #28]
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	dd07      	ble.n	8006ae4 <_dtoa_r+0xbb8>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	220a      	movs	r2, #10
 8006ad8:	0038      	movs	r0, r7
 8006ada:	9905      	ldr	r1, [sp, #20]
 8006adc:	f000 f8ca 	bl	8006c74 <__multadd>
 8006ae0:	9005      	str	r0, [sp, #20]
 8006ae2:	e7eb      	b.n	8006abc <_dtoa_r+0xb90>
 8006ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ae6:	2001      	movs	r0, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dd00      	ble.n	8006aee <_dtoa_r+0xbc2>
 8006aec:	0018      	movs	r0, r3
 8006aee:	2400      	movs	r4, #0
 8006af0:	9b06      	ldr	r3, [sp, #24]
 8006af2:	181b      	adds	r3, r3, r0
 8006af4:	9308      	str	r3, [sp, #32]
 8006af6:	9905      	ldr	r1, [sp, #20]
 8006af8:	2201      	movs	r2, #1
 8006afa:	0038      	movs	r0, r7
 8006afc:	f000 fa68 	bl	8006fd0 <__lshift>
 8006b00:	0031      	movs	r1, r6
 8006b02:	9005      	str	r0, [sp, #20]
 8006b04:	f000 fad2 	bl	80070ac <__mcmp>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	dc9b      	bgt.n	8006a44 <_dtoa_r+0xb18>
 8006b0c:	d102      	bne.n	8006b14 <_dtoa_r+0xbe8>
 8006b0e:	9b07      	ldr	r3, [sp, #28]
 8006b10:	07db      	lsls	r3, r3, #31
 8006b12:	d497      	bmi.n	8006a44 <_dtoa_r+0xb18>
 8006b14:	9b08      	ldr	r3, [sp, #32]
 8006b16:	9308      	str	r3, [sp, #32]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	781a      	ldrb	r2, [r3, #0]
 8006b1c:	2a30      	cmp	r2, #48	; 0x30
 8006b1e:	d0fa      	beq.n	8006b16 <_dtoa_r+0xbea>
 8006b20:	e6db      	b.n	80068da <_dtoa_r+0x9ae>
 8006b22:	9a06      	ldr	r2, [sp, #24]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d18e      	bne.n	8006a46 <_dtoa_r+0xb1a>
 8006b28:	9b02      	ldr	r3, [sp, #8]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	9302      	str	r3, [sp, #8]
 8006b2e:	2331      	movs	r3, #49	; 0x31
 8006b30:	e799      	b.n	8006a66 <_dtoa_r+0xb3a>
 8006b32:	4b09      	ldr	r3, [pc, #36]	; (8006b58 <_dtoa_r+0xc2c>)
 8006b34:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006b36:	9306      	str	r3, [sp, #24]
 8006b38:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <_dtoa_r+0xc30>)
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	d001      	beq.n	8006b42 <_dtoa_r+0xc16>
 8006b3e:	f7ff fa3f 	bl	8005fc0 <_dtoa_r+0x94>
 8006b42:	f7ff fa3f 	bl	8005fc4 <_dtoa_r+0x98>
 8006b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dcb6      	bgt.n	8006aba <_dtoa_r+0xb8e>
 8006b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	dd00      	ble.n	8006b54 <_dtoa_r+0xc28>
 8006b52:	e6ac      	b.n	80068ae <_dtoa_r+0x982>
 8006b54:	e7b1      	b.n	8006aba <_dtoa_r+0xb8e>
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	08008584 	.word	0x08008584
 8006b5c:	0800858c 	.word	0x0800858c

08006b60 <_localeconv_r>:
 8006b60:	4800      	ldr	r0, [pc, #0]	; (8006b64 <_localeconv_r+0x4>)
 8006b62:	4770      	bx	lr
 8006b64:	20000160 	.word	0x20000160

08006b68 <malloc>:
 8006b68:	b510      	push	{r4, lr}
 8006b6a:	4b03      	ldr	r3, [pc, #12]	; (8006b78 <malloc+0x10>)
 8006b6c:	0001      	movs	r1, r0
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	f000 fc4c 	bl	800740c <_malloc_r>
 8006b74:	bd10      	pop	{r4, pc}
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	2000000c 	.word	0x2000000c

08006b7c <memchr>:
 8006b7c:	b2c9      	uxtb	r1, r1
 8006b7e:	1882      	adds	r2, r0, r2
 8006b80:	4290      	cmp	r0, r2
 8006b82:	d101      	bne.n	8006b88 <memchr+0xc>
 8006b84:	2000      	movs	r0, #0
 8006b86:	4770      	bx	lr
 8006b88:	7803      	ldrb	r3, [r0, #0]
 8006b8a:	428b      	cmp	r3, r1
 8006b8c:	d0fb      	beq.n	8006b86 <memchr+0xa>
 8006b8e:	3001      	adds	r0, #1
 8006b90:	e7f6      	b.n	8006b80 <memchr+0x4>

08006b92 <memcpy>:
 8006b92:	2300      	movs	r3, #0
 8006b94:	b510      	push	{r4, lr}
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d100      	bne.n	8006b9c <memcpy+0xa>
 8006b9a:	bd10      	pop	{r4, pc}
 8006b9c:	5ccc      	ldrb	r4, [r1, r3]
 8006b9e:	54c4      	strb	r4, [r0, r3]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	e7f8      	b.n	8006b96 <memcpy+0x4>

08006ba4 <_Balloc>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ba8:	0006      	movs	r6, r0
 8006baa:	000c      	movs	r4, r1
 8006bac:	2d00      	cmp	r5, #0
 8006bae:	d10e      	bne.n	8006bce <_Balloc+0x2a>
 8006bb0:	2010      	movs	r0, #16
 8006bb2:	f7ff ffd9 	bl	8006b68 <malloc>
 8006bb6:	1e02      	subs	r2, r0, #0
 8006bb8:	6270      	str	r0, [r6, #36]	; 0x24
 8006bba:	d104      	bne.n	8006bc6 <_Balloc+0x22>
 8006bbc:	2166      	movs	r1, #102	; 0x66
 8006bbe:	4b19      	ldr	r3, [pc, #100]	; (8006c24 <_Balloc+0x80>)
 8006bc0:	4819      	ldr	r0, [pc, #100]	; (8006c28 <_Balloc+0x84>)
 8006bc2:	f000 fe0d 	bl	80077e0 <__assert_func>
 8006bc6:	6045      	str	r5, [r0, #4]
 8006bc8:	6085      	str	r5, [r0, #8]
 8006bca:	6005      	str	r5, [r0, #0]
 8006bcc:	60c5      	str	r5, [r0, #12]
 8006bce:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006bd0:	68eb      	ldr	r3, [r5, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d013      	beq.n	8006bfe <_Balloc+0x5a>
 8006bd6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006bd8:	00a2      	lsls	r2, r4, #2
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	189b      	adds	r3, r3, r2
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d118      	bne.n	8006c16 <_Balloc+0x72>
 8006be4:	2101      	movs	r1, #1
 8006be6:	000d      	movs	r5, r1
 8006be8:	40a5      	lsls	r5, r4
 8006bea:	1d6a      	adds	r2, r5, #5
 8006bec:	0030      	movs	r0, r6
 8006bee:	0092      	lsls	r2, r2, #2
 8006bf0:	f000 fb74 	bl	80072dc <_calloc_r>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	d00c      	beq.n	8006c12 <_Balloc+0x6e>
 8006bf8:	6044      	str	r4, [r0, #4]
 8006bfa:	6085      	str	r5, [r0, #8]
 8006bfc:	e00d      	b.n	8006c1a <_Balloc+0x76>
 8006bfe:	2221      	movs	r2, #33	; 0x21
 8006c00:	2104      	movs	r1, #4
 8006c02:	0030      	movs	r0, r6
 8006c04:	f000 fb6a 	bl	80072dc <_calloc_r>
 8006c08:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006c0a:	60e8      	str	r0, [r5, #12]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e1      	bne.n	8006bd6 <_Balloc+0x32>
 8006c12:	2000      	movs	r0, #0
 8006c14:	bd70      	pop	{r4, r5, r6, pc}
 8006c16:	6802      	ldr	r2, [r0, #0]
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	6103      	str	r3, [r0, #16]
 8006c1e:	60c3      	str	r3, [r0, #12]
 8006c20:	e7f8      	b.n	8006c14 <_Balloc+0x70>
 8006c22:	46c0      	nop			; (mov r8, r8)
 8006c24:	08008591 	.word	0x08008591
 8006c28:	08008614 	.word	0x08008614

08006c2c <_Bfree>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c30:	0005      	movs	r5, r0
 8006c32:	000c      	movs	r4, r1
 8006c34:	2e00      	cmp	r6, #0
 8006c36:	d10e      	bne.n	8006c56 <_Bfree+0x2a>
 8006c38:	2010      	movs	r0, #16
 8006c3a:	f7ff ff95 	bl	8006b68 <malloc>
 8006c3e:	1e02      	subs	r2, r0, #0
 8006c40:	6268      	str	r0, [r5, #36]	; 0x24
 8006c42:	d104      	bne.n	8006c4e <_Bfree+0x22>
 8006c44:	218a      	movs	r1, #138	; 0x8a
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <_Bfree+0x40>)
 8006c48:	4809      	ldr	r0, [pc, #36]	; (8006c70 <_Bfree+0x44>)
 8006c4a:	f000 fdc9 	bl	80077e0 <__assert_func>
 8006c4e:	6046      	str	r6, [r0, #4]
 8006c50:	6086      	str	r6, [r0, #8]
 8006c52:	6006      	str	r6, [r0, #0]
 8006c54:	60c6      	str	r6, [r0, #12]
 8006c56:	2c00      	cmp	r4, #0
 8006c58:	d007      	beq.n	8006c6a <_Bfree+0x3e>
 8006c5a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c5c:	6862      	ldr	r2, [r4, #4]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	0092      	lsls	r2, r2, #2
 8006c62:	189b      	adds	r3, r3, r2
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	6022      	str	r2, [r4, #0]
 8006c68:	601c      	str	r4, [r3, #0]
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	08008591 	.word	0x08008591
 8006c70:	08008614 	.word	0x08008614

08006c74 <__multadd>:
 8006c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c76:	000e      	movs	r6, r1
 8006c78:	9001      	str	r0, [sp, #4]
 8006c7a:	000c      	movs	r4, r1
 8006c7c:	001d      	movs	r5, r3
 8006c7e:	2000      	movs	r0, #0
 8006c80:	690f      	ldr	r7, [r1, #16]
 8006c82:	3614      	adds	r6, #20
 8006c84:	6833      	ldr	r3, [r6, #0]
 8006c86:	3001      	adds	r0, #1
 8006c88:	b299      	uxth	r1, r3
 8006c8a:	4351      	muls	r1, r2
 8006c8c:	0c1b      	lsrs	r3, r3, #16
 8006c8e:	4353      	muls	r3, r2
 8006c90:	1949      	adds	r1, r1, r5
 8006c92:	0c0d      	lsrs	r5, r1, #16
 8006c94:	195b      	adds	r3, r3, r5
 8006c96:	0c1d      	lsrs	r5, r3, #16
 8006c98:	b289      	uxth	r1, r1
 8006c9a:	041b      	lsls	r3, r3, #16
 8006c9c:	185b      	adds	r3, r3, r1
 8006c9e:	c608      	stmia	r6!, {r3}
 8006ca0:	4287      	cmp	r7, r0
 8006ca2:	dcef      	bgt.n	8006c84 <__multadd+0x10>
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	d022      	beq.n	8006cee <__multadd+0x7a>
 8006ca8:	68a3      	ldr	r3, [r4, #8]
 8006caa:	42bb      	cmp	r3, r7
 8006cac:	dc19      	bgt.n	8006ce2 <__multadd+0x6e>
 8006cae:	6863      	ldr	r3, [r4, #4]
 8006cb0:	9801      	ldr	r0, [sp, #4]
 8006cb2:	1c59      	adds	r1, r3, #1
 8006cb4:	f7ff ff76 	bl	8006ba4 <_Balloc>
 8006cb8:	1e06      	subs	r6, r0, #0
 8006cba:	d105      	bne.n	8006cc8 <__multadd+0x54>
 8006cbc:	0002      	movs	r2, r0
 8006cbe:	21b5      	movs	r1, #181	; 0xb5
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	; (8006cf4 <__multadd+0x80>)
 8006cc2:	480d      	ldr	r0, [pc, #52]	; (8006cf8 <__multadd+0x84>)
 8006cc4:	f000 fd8c 	bl	80077e0 <__assert_func>
 8006cc8:	0021      	movs	r1, r4
 8006cca:	6923      	ldr	r3, [r4, #16]
 8006ccc:	310c      	adds	r1, #12
 8006cce:	1c9a      	adds	r2, r3, #2
 8006cd0:	0092      	lsls	r2, r2, #2
 8006cd2:	300c      	adds	r0, #12
 8006cd4:	f7ff ff5d 	bl	8006b92 <memcpy>
 8006cd8:	0021      	movs	r1, r4
 8006cda:	9801      	ldr	r0, [sp, #4]
 8006cdc:	f7ff ffa6 	bl	8006c2c <_Bfree>
 8006ce0:	0034      	movs	r4, r6
 8006ce2:	1d3b      	adds	r3, r7, #4
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	18e3      	adds	r3, r4, r3
 8006ce8:	605d      	str	r5, [r3, #4]
 8006cea:	1c7b      	adds	r3, r7, #1
 8006cec:	6123      	str	r3, [r4, #16]
 8006cee:	0020      	movs	r0, r4
 8006cf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	08008603 	.word	0x08008603
 8006cf8:	08008614 	.word	0x08008614

08006cfc <__hi0bits>:
 8006cfc:	0003      	movs	r3, r0
 8006cfe:	0c02      	lsrs	r2, r0, #16
 8006d00:	2000      	movs	r0, #0
 8006d02:	4282      	cmp	r2, r0
 8006d04:	d101      	bne.n	8006d0a <__hi0bits+0xe>
 8006d06:	041b      	lsls	r3, r3, #16
 8006d08:	3010      	adds	r0, #16
 8006d0a:	0e1a      	lsrs	r2, r3, #24
 8006d0c:	d101      	bne.n	8006d12 <__hi0bits+0x16>
 8006d0e:	3008      	adds	r0, #8
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	0f1a      	lsrs	r2, r3, #28
 8006d14:	d101      	bne.n	8006d1a <__hi0bits+0x1e>
 8006d16:	3004      	adds	r0, #4
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	0f9a      	lsrs	r2, r3, #30
 8006d1c:	d101      	bne.n	8006d22 <__hi0bits+0x26>
 8006d1e:	3002      	adds	r0, #2
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	db03      	blt.n	8006d2e <__hi0bits+0x32>
 8006d26:	3001      	adds	r0, #1
 8006d28:	005b      	lsls	r3, r3, #1
 8006d2a:	d400      	bmi.n	8006d2e <__hi0bits+0x32>
 8006d2c:	2020      	movs	r0, #32
 8006d2e:	4770      	bx	lr

08006d30 <__lo0bits>:
 8006d30:	6803      	ldr	r3, [r0, #0]
 8006d32:	0002      	movs	r2, r0
 8006d34:	2107      	movs	r1, #7
 8006d36:	0018      	movs	r0, r3
 8006d38:	4008      	ands	r0, r1
 8006d3a:	420b      	tst	r3, r1
 8006d3c:	d00d      	beq.n	8006d5a <__lo0bits+0x2a>
 8006d3e:	3906      	subs	r1, #6
 8006d40:	2000      	movs	r0, #0
 8006d42:	420b      	tst	r3, r1
 8006d44:	d105      	bne.n	8006d52 <__lo0bits+0x22>
 8006d46:	3002      	adds	r0, #2
 8006d48:	4203      	tst	r3, r0
 8006d4a:	d003      	beq.n	8006d54 <__lo0bits+0x24>
 8006d4c:	40cb      	lsrs	r3, r1
 8006d4e:	0008      	movs	r0, r1
 8006d50:	6013      	str	r3, [r2, #0]
 8006d52:	4770      	bx	lr
 8006d54:	089b      	lsrs	r3, r3, #2
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	e7fb      	b.n	8006d52 <__lo0bits+0x22>
 8006d5a:	b299      	uxth	r1, r3
 8006d5c:	2900      	cmp	r1, #0
 8006d5e:	d101      	bne.n	8006d64 <__lo0bits+0x34>
 8006d60:	2010      	movs	r0, #16
 8006d62:	0c1b      	lsrs	r3, r3, #16
 8006d64:	b2d9      	uxtb	r1, r3
 8006d66:	2900      	cmp	r1, #0
 8006d68:	d101      	bne.n	8006d6e <__lo0bits+0x3e>
 8006d6a:	3008      	adds	r0, #8
 8006d6c:	0a1b      	lsrs	r3, r3, #8
 8006d6e:	0719      	lsls	r1, r3, #28
 8006d70:	d101      	bne.n	8006d76 <__lo0bits+0x46>
 8006d72:	3004      	adds	r0, #4
 8006d74:	091b      	lsrs	r3, r3, #4
 8006d76:	0799      	lsls	r1, r3, #30
 8006d78:	d101      	bne.n	8006d7e <__lo0bits+0x4e>
 8006d7a:	3002      	adds	r0, #2
 8006d7c:	089b      	lsrs	r3, r3, #2
 8006d7e:	07d9      	lsls	r1, r3, #31
 8006d80:	d4e9      	bmi.n	8006d56 <__lo0bits+0x26>
 8006d82:	3001      	adds	r0, #1
 8006d84:	085b      	lsrs	r3, r3, #1
 8006d86:	d1e6      	bne.n	8006d56 <__lo0bits+0x26>
 8006d88:	2020      	movs	r0, #32
 8006d8a:	e7e2      	b.n	8006d52 <__lo0bits+0x22>

08006d8c <__i2b>:
 8006d8c:	b510      	push	{r4, lr}
 8006d8e:	000c      	movs	r4, r1
 8006d90:	2101      	movs	r1, #1
 8006d92:	f7ff ff07 	bl	8006ba4 <_Balloc>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d106      	bne.n	8006da8 <__i2b+0x1c>
 8006d9a:	21a0      	movs	r1, #160	; 0xa0
 8006d9c:	0002      	movs	r2, r0
 8006d9e:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <__i2b+0x24>)
 8006da0:	4804      	ldr	r0, [pc, #16]	; (8006db4 <__i2b+0x28>)
 8006da2:	0049      	lsls	r1, r1, #1
 8006da4:	f000 fd1c 	bl	80077e0 <__assert_func>
 8006da8:	2301      	movs	r3, #1
 8006daa:	6144      	str	r4, [r0, #20]
 8006dac:	6103      	str	r3, [r0, #16]
 8006dae:	bd10      	pop	{r4, pc}
 8006db0:	08008603 	.word	0x08008603
 8006db4:	08008614 	.word	0x08008614

08006db8 <__multiply>:
 8006db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dba:	690b      	ldr	r3, [r1, #16]
 8006dbc:	0014      	movs	r4, r2
 8006dbe:	6912      	ldr	r2, [r2, #16]
 8006dc0:	000d      	movs	r5, r1
 8006dc2:	b089      	sub	sp, #36	; 0x24
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	da01      	bge.n	8006dcc <__multiply+0x14>
 8006dc8:	0025      	movs	r5, r4
 8006dca:	000c      	movs	r4, r1
 8006dcc:	692f      	ldr	r7, [r5, #16]
 8006dce:	6926      	ldr	r6, [r4, #16]
 8006dd0:	6869      	ldr	r1, [r5, #4]
 8006dd2:	19bb      	adds	r3, r7, r6
 8006dd4:	9302      	str	r3, [sp, #8]
 8006dd6:	68ab      	ldr	r3, [r5, #8]
 8006dd8:	19ba      	adds	r2, r7, r6
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	da00      	bge.n	8006de0 <__multiply+0x28>
 8006dde:	3101      	adds	r1, #1
 8006de0:	f7ff fee0 	bl	8006ba4 <_Balloc>
 8006de4:	9001      	str	r0, [sp, #4]
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d106      	bne.n	8006df8 <__multiply+0x40>
 8006dea:	215e      	movs	r1, #94	; 0x5e
 8006dec:	0002      	movs	r2, r0
 8006dee:	4b48      	ldr	r3, [pc, #288]	; (8006f10 <__multiply+0x158>)
 8006df0:	4848      	ldr	r0, [pc, #288]	; (8006f14 <__multiply+0x15c>)
 8006df2:	31ff      	adds	r1, #255	; 0xff
 8006df4:	f000 fcf4 	bl	80077e0 <__assert_func>
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	3314      	adds	r3, #20
 8006dfe:	469c      	mov	ip, r3
 8006e00:	19bb      	adds	r3, r7, r6
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4463      	add	r3, ip
 8006e06:	9303      	str	r3, [sp, #12]
 8006e08:	4663      	mov	r3, ip
 8006e0a:	9903      	ldr	r1, [sp, #12]
 8006e0c:	428b      	cmp	r3, r1
 8006e0e:	d32c      	bcc.n	8006e6a <__multiply+0xb2>
 8006e10:	002b      	movs	r3, r5
 8006e12:	0022      	movs	r2, r4
 8006e14:	3314      	adds	r3, #20
 8006e16:	00bf      	lsls	r7, r7, #2
 8006e18:	3214      	adds	r2, #20
 8006e1a:	9306      	str	r3, [sp, #24]
 8006e1c:	00b6      	lsls	r6, r6, #2
 8006e1e:	19db      	adds	r3, r3, r7
 8006e20:	9304      	str	r3, [sp, #16]
 8006e22:	1993      	adds	r3, r2, r6
 8006e24:	9307      	str	r3, [sp, #28]
 8006e26:	2304      	movs	r3, #4
 8006e28:	9305      	str	r3, [sp, #20]
 8006e2a:	002b      	movs	r3, r5
 8006e2c:	9904      	ldr	r1, [sp, #16]
 8006e2e:	3315      	adds	r3, #21
 8006e30:	9200      	str	r2, [sp, #0]
 8006e32:	4299      	cmp	r1, r3
 8006e34:	d305      	bcc.n	8006e42 <__multiply+0x8a>
 8006e36:	1b4b      	subs	r3, r1, r5
 8006e38:	3b15      	subs	r3, #21
 8006e3a:	089b      	lsrs	r3, r3, #2
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	9305      	str	r3, [sp, #20]
 8006e42:	9b07      	ldr	r3, [sp, #28]
 8006e44:	9a00      	ldr	r2, [sp, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d311      	bcc.n	8006e6e <__multiply+0xb6>
 8006e4a:	9b02      	ldr	r3, [sp, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dd06      	ble.n	8006e5e <__multiply+0xa6>
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	3b04      	subs	r3, #4
 8006e54:	9303      	str	r3, [sp, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d053      	beq.n	8006f06 <__multiply+0x14e>
 8006e5e:	9b01      	ldr	r3, [sp, #4]
 8006e60:	9a02      	ldr	r2, [sp, #8]
 8006e62:	0018      	movs	r0, r3
 8006e64:	611a      	str	r2, [r3, #16]
 8006e66:	b009      	add	sp, #36	; 0x24
 8006e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e6a:	c304      	stmia	r3!, {r2}
 8006e6c:	e7cd      	b.n	8006e0a <__multiply+0x52>
 8006e6e:	9b00      	ldr	r3, [sp, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	b298      	uxth	r0, r3
 8006e74:	2800      	cmp	r0, #0
 8006e76:	d01b      	beq.n	8006eb0 <__multiply+0xf8>
 8006e78:	4667      	mov	r7, ip
 8006e7a:	2400      	movs	r4, #0
 8006e7c:	9e06      	ldr	r6, [sp, #24]
 8006e7e:	ce02      	ldmia	r6!, {r1}
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	b28b      	uxth	r3, r1
 8006e84:	4343      	muls	r3, r0
 8006e86:	b292      	uxth	r2, r2
 8006e88:	189b      	adds	r3, r3, r2
 8006e8a:	191b      	adds	r3, r3, r4
 8006e8c:	0c0c      	lsrs	r4, r1, #16
 8006e8e:	4344      	muls	r4, r0
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	0c11      	lsrs	r1, r2, #16
 8006e94:	1861      	adds	r1, r4, r1
 8006e96:	0c1c      	lsrs	r4, r3, #16
 8006e98:	1909      	adds	r1, r1, r4
 8006e9a:	0c0c      	lsrs	r4, r1, #16
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	0409      	lsls	r1, r1, #16
 8006ea0:	430b      	orrs	r3, r1
 8006ea2:	c708      	stmia	r7!, {r3}
 8006ea4:	9b04      	ldr	r3, [sp, #16]
 8006ea6:	42b3      	cmp	r3, r6
 8006ea8:	d8e9      	bhi.n	8006e7e <__multiply+0xc6>
 8006eaa:	4663      	mov	r3, ip
 8006eac:	9a05      	ldr	r2, [sp, #20]
 8006eae:	509c      	str	r4, [r3, r2]
 8006eb0:	9b00      	ldr	r3, [sp, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	0c1e      	lsrs	r6, r3, #16
 8006eb6:	d020      	beq.n	8006efa <__multiply+0x142>
 8006eb8:	4663      	mov	r3, ip
 8006eba:	002c      	movs	r4, r5
 8006ebc:	4660      	mov	r0, ip
 8006ebe:	2700      	movs	r7, #0
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3414      	adds	r4, #20
 8006ec4:	6822      	ldr	r2, [r4, #0]
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	b291      	uxth	r1, r2
 8006eca:	4371      	muls	r1, r6
 8006ecc:	6802      	ldr	r2, [r0, #0]
 8006ece:	0c12      	lsrs	r2, r2, #16
 8006ed0:	1889      	adds	r1, r1, r2
 8006ed2:	19cf      	adds	r7, r1, r7
 8006ed4:	0439      	lsls	r1, r7, #16
 8006ed6:	430b      	orrs	r3, r1
 8006ed8:	6003      	str	r3, [r0, #0]
 8006eda:	cc02      	ldmia	r4!, {r1}
 8006edc:	6843      	ldr	r3, [r0, #4]
 8006ede:	0c09      	lsrs	r1, r1, #16
 8006ee0:	4371      	muls	r1, r6
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	0c3f      	lsrs	r7, r7, #16
 8006ee6:	18cb      	adds	r3, r1, r3
 8006ee8:	9a04      	ldr	r2, [sp, #16]
 8006eea:	19db      	adds	r3, r3, r7
 8006eec:	0c1f      	lsrs	r7, r3, #16
 8006eee:	3004      	adds	r0, #4
 8006ef0:	42a2      	cmp	r2, r4
 8006ef2:	d8e7      	bhi.n	8006ec4 <__multiply+0x10c>
 8006ef4:	4662      	mov	r2, ip
 8006ef6:	9905      	ldr	r1, [sp, #20]
 8006ef8:	5053      	str	r3, [r2, r1]
 8006efa:	9b00      	ldr	r3, [sp, #0]
 8006efc:	3304      	adds	r3, #4
 8006efe:	9300      	str	r3, [sp, #0]
 8006f00:	2304      	movs	r3, #4
 8006f02:	449c      	add	ip, r3
 8006f04:	e79d      	b.n	8006e42 <__multiply+0x8a>
 8006f06:	9b02      	ldr	r3, [sp, #8]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	9302      	str	r3, [sp, #8]
 8006f0c:	e79d      	b.n	8006e4a <__multiply+0x92>
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	08008603 	.word	0x08008603
 8006f14:	08008614 	.word	0x08008614

08006f18 <__pow5mult>:
 8006f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	0015      	movs	r5, r2
 8006f1e:	0007      	movs	r7, r0
 8006f20:	000e      	movs	r6, r1
 8006f22:	401a      	ands	r2, r3
 8006f24:	421d      	tst	r5, r3
 8006f26:	d008      	beq.n	8006f3a <__pow5mult+0x22>
 8006f28:	4925      	ldr	r1, [pc, #148]	; (8006fc0 <__pow5mult+0xa8>)
 8006f2a:	3a01      	subs	r2, #1
 8006f2c:	0092      	lsls	r2, r2, #2
 8006f2e:	5852      	ldr	r2, [r2, r1]
 8006f30:	2300      	movs	r3, #0
 8006f32:	0031      	movs	r1, r6
 8006f34:	f7ff fe9e 	bl	8006c74 <__multadd>
 8006f38:	0006      	movs	r6, r0
 8006f3a:	10ad      	asrs	r5, r5, #2
 8006f3c:	d03d      	beq.n	8006fba <__pow5mult+0xa2>
 8006f3e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006f40:	2c00      	cmp	r4, #0
 8006f42:	d10f      	bne.n	8006f64 <__pow5mult+0x4c>
 8006f44:	2010      	movs	r0, #16
 8006f46:	f7ff fe0f 	bl	8006b68 <malloc>
 8006f4a:	1e02      	subs	r2, r0, #0
 8006f4c:	6278      	str	r0, [r7, #36]	; 0x24
 8006f4e:	d105      	bne.n	8006f5c <__pow5mult+0x44>
 8006f50:	21d7      	movs	r1, #215	; 0xd7
 8006f52:	4b1c      	ldr	r3, [pc, #112]	; (8006fc4 <__pow5mult+0xac>)
 8006f54:	481c      	ldr	r0, [pc, #112]	; (8006fc8 <__pow5mult+0xb0>)
 8006f56:	0049      	lsls	r1, r1, #1
 8006f58:	f000 fc42 	bl	80077e0 <__assert_func>
 8006f5c:	6044      	str	r4, [r0, #4]
 8006f5e:	6084      	str	r4, [r0, #8]
 8006f60:	6004      	str	r4, [r0, #0]
 8006f62:	60c4      	str	r4, [r0, #12]
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	689c      	ldr	r4, [r3, #8]
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	2c00      	cmp	r4, #0
 8006f6c:	d108      	bne.n	8006f80 <__pow5mult+0x68>
 8006f6e:	0038      	movs	r0, r7
 8006f70:	4916      	ldr	r1, [pc, #88]	; (8006fcc <__pow5mult+0xb4>)
 8006f72:	f7ff ff0b 	bl	8006d8c <__i2b>
 8006f76:	9b01      	ldr	r3, [sp, #4]
 8006f78:	0004      	movs	r4, r0
 8006f7a:	6098      	str	r0, [r3, #8]
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	6003      	str	r3, [r0, #0]
 8006f80:	2301      	movs	r3, #1
 8006f82:	421d      	tst	r5, r3
 8006f84:	d00a      	beq.n	8006f9c <__pow5mult+0x84>
 8006f86:	0031      	movs	r1, r6
 8006f88:	0022      	movs	r2, r4
 8006f8a:	0038      	movs	r0, r7
 8006f8c:	f7ff ff14 	bl	8006db8 <__multiply>
 8006f90:	0031      	movs	r1, r6
 8006f92:	9001      	str	r0, [sp, #4]
 8006f94:	0038      	movs	r0, r7
 8006f96:	f7ff fe49 	bl	8006c2c <_Bfree>
 8006f9a:	9e01      	ldr	r6, [sp, #4]
 8006f9c:	106d      	asrs	r5, r5, #1
 8006f9e:	d00c      	beq.n	8006fba <__pow5mult+0xa2>
 8006fa0:	6820      	ldr	r0, [r4, #0]
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d107      	bne.n	8006fb6 <__pow5mult+0x9e>
 8006fa6:	0022      	movs	r2, r4
 8006fa8:	0021      	movs	r1, r4
 8006faa:	0038      	movs	r0, r7
 8006fac:	f7ff ff04 	bl	8006db8 <__multiply>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	6020      	str	r0, [r4, #0]
 8006fb4:	6003      	str	r3, [r0, #0]
 8006fb6:	0004      	movs	r4, r0
 8006fb8:	e7e2      	b.n	8006f80 <__pow5mult+0x68>
 8006fba:	0030      	movs	r0, r6
 8006fbc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fbe:	46c0      	nop			; (mov r8, r8)
 8006fc0:	08008760 	.word	0x08008760
 8006fc4:	08008591 	.word	0x08008591
 8006fc8:	08008614 	.word	0x08008614
 8006fcc:	00000271 	.word	0x00000271

08006fd0 <__lshift>:
 8006fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fd2:	000c      	movs	r4, r1
 8006fd4:	0017      	movs	r7, r2
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	1155      	asrs	r5, r2, #5
 8006fda:	b087      	sub	sp, #28
 8006fdc:	18eb      	adds	r3, r5, r3
 8006fde:	9302      	str	r3, [sp, #8]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	9301      	str	r3, [sp, #4]
 8006fe4:	6849      	ldr	r1, [r1, #4]
 8006fe6:	68a3      	ldr	r3, [r4, #8]
 8006fe8:	9004      	str	r0, [sp, #16]
 8006fea:	9a01      	ldr	r2, [sp, #4]
 8006fec:	4293      	cmp	r3, r2
 8006fee:	db10      	blt.n	8007012 <__lshift+0x42>
 8006ff0:	9804      	ldr	r0, [sp, #16]
 8006ff2:	f7ff fdd7 	bl	8006ba4 <_Balloc>
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	0002      	movs	r2, r0
 8006ffa:	0006      	movs	r6, r0
 8006ffc:	0019      	movs	r1, r3
 8006ffe:	3214      	adds	r2, #20
 8007000:	4298      	cmp	r0, r3
 8007002:	d10c      	bne.n	800701e <__lshift+0x4e>
 8007004:	21da      	movs	r1, #218	; 0xda
 8007006:	0002      	movs	r2, r0
 8007008:	4b26      	ldr	r3, [pc, #152]	; (80070a4 <__lshift+0xd4>)
 800700a:	4827      	ldr	r0, [pc, #156]	; (80070a8 <__lshift+0xd8>)
 800700c:	31ff      	adds	r1, #255	; 0xff
 800700e:	f000 fbe7 	bl	80077e0 <__assert_func>
 8007012:	3101      	adds	r1, #1
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	e7e8      	b.n	8006fea <__lshift+0x1a>
 8007018:	0098      	lsls	r0, r3, #2
 800701a:	5011      	str	r1, [r2, r0]
 800701c:	3301      	adds	r3, #1
 800701e:	42ab      	cmp	r3, r5
 8007020:	dbfa      	blt.n	8007018 <__lshift+0x48>
 8007022:	43eb      	mvns	r3, r5
 8007024:	17db      	asrs	r3, r3, #31
 8007026:	401d      	ands	r5, r3
 8007028:	211f      	movs	r1, #31
 800702a:	0023      	movs	r3, r4
 800702c:	0038      	movs	r0, r7
 800702e:	00ad      	lsls	r5, r5, #2
 8007030:	1955      	adds	r5, r2, r5
 8007032:	6922      	ldr	r2, [r4, #16]
 8007034:	3314      	adds	r3, #20
 8007036:	0092      	lsls	r2, r2, #2
 8007038:	4008      	ands	r0, r1
 800703a:	4684      	mov	ip, r0
 800703c:	189a      	adds	r2, r3, r2
 800703e:	420f      	tst	r7, r1
 8007040:	d02a      	beq.n	8007098 <__lshift+0xc8>
 8007042:	3101      	adds	r1, #1
 8007044:	1a09      	subs	r1, r1, r0
 8007046:	9105      	str	r1, [sp, #20]
 8007048:	2100      	movs	r1, #0
 800704a:	9503      	str	r5, [sp, #12]
 800704c:	4667      	mov	r7, ip
 800704e:	6818      	ldr	r0, [r3, #0]
 8007050:	40b8      	lsls	r0, r7
 8007052:	4301      	orrs	r1, r0
 8007054:	9803      	ldr	r0, [sp, #12]
 8007056:	c002      	stmia	r0!, {r1}
 8007058:	cb02      	ldmia	r3!, {r1}
 800705a:	9003      	str	r0, [sp, #12]
 800705c:	9805      	ldr	r0, [sp, #20]
 800705e:	40c1      	lsrs	r1, r0
 8007060:	429a      	cmp	r2, r3
 8007062:	d8f3      	bhi.n	800704c <__lshift+0x7c>
 8007064:	0020      	movs	r0, r4
 8007066:	3015      	adds	r0, #21
 8007068:	2304      	movs	r3, #4
 800706a:	4282      	cmp	r2, r0
 800706c:	d304      	bcc.n	8007078 <__lshift+0xa8>
 800706e:	1b13      	subs	r3, r2, r4
 8007070:	3b15      	subs	r3, #21
 8007072:	089b      	lsrs	r3, r3, #2
 8007074:	3301      	adds	r3, #1
 8007076:	009b      	lsls	r3, r3, #2
 8007078:	50e9      	str	r1, [r5, r3]
 800707a:	2900      	cmp	r1, #0
 800707c:	d002      	beq.n	8007084 <__lshift+0xb4>
 800707e:	9b02      	ldr	r3, [sp, #8]
 8007080:	3302      	adds	r3, #2
 8007082:	9301      	str	r3, [sp, #4]
 8007084:	9b01      	ldr	r3, [sp, #4]
 8007086:	9804      	ldr	r0, [sp, #16]
 8007088:	3b01      	subs	r3, #1
 800708a:	0021      	movs	r1, r4
 800708c:	6133      	str	r3, [r6, #16]
 800708e:	f7ff fdcd 	bl	8006c2c <_Bfree>
 8007092:	0030      	movs	r0, r6
 8007094:	b007      	add	sp, #28
 8007096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007098:	cb02      	ldmia	r3!, {r1}
 800709a:	c502      	stmia	r5!, {r1}
 800709c:	429a      	cmp	r2, r3
 800709e:	d8fb      	bhi.n	8007098 <__lshift+0xc8>
 80070a0:	e7f0      	b.n	8007084 <__lshift+0xb4>
 80070a2:	46c0      	nop			; (mov r8, r8)
 80070a4:	08008603 	.word	0x08008603
 80070a8:	08008614 	.word	0x08008614

080070ac <__mcmp>:
 80070ac:	6902      	ldr	r2, [r0, #16]
 80070ae:	690b      	ldr	r3, [r1, #16]
 80070b0:	b530      	push	{r4, r5, lr}
 80070b2:	0004      	movs	r4, r0
 80070b4:	1ad0      	subs	r0, r2, r3
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d10d      	bne.n	80070d6 <__mcmp+0x2a>
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	3414      	adds	r4, #20
 80070be:	3114      	adds	r1, #20
 80070c0:	18e2      	adds	r2, r4, r3
 80070c2:	18c9      	adds	r1, r1, r3
 80070c4:	3a04      	subs	r2, #4
 80070c6:	3904      	subs	r1, #4
 80070c8:	6815      	ldr	r5, [r2, #0]
 80070ca:	680b      	ldr	r3, [r1, #0]
 80070cc:	429d      	cmp	r5, r3
 80070ce:	d003      	beq.n	80070d8 <__mcmp+0x2c>
 80070d0:	2001      	movs	r0, #1
 80070d2:	429d      	cmp	r5, r3
 80070d4:	d303      	bcc.n	80070de <__mcmp+0x32>
 80070d6:	bd30      	pop	{r4, r5, pc}
 80070d8:	4294      	cmp	r4, r2
 80070da:	d3f3      	bcc.n	80070c4 <__mcmp+0x18>
 80070dc:	e7fb      	b.n	80070d6 <__mcmp+0x2a>
 80070de:	4240      	negs	r0, r0
 80070e0:	e7f9      	b.n	80070d6 <__mcmp+0x2a>
	...

080070e4 <__mdiff>:
 80070e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070e6:	000e      	movs	r6, r1
 80070e8:	0007      	movs	r7, r0
 80070ea:	0011      	movs	r1, r2
 80070ec:	0030      	movs	r0, r6
 80070ee:	b087      	sub	sp, #28
 80070f0:	0014      	movs	r4, r2
 80070f2:	f7ff ffdb 	bl	80070ac <__mcmp>
 80070f6:	1e05      	subs	r5, r0, #0
 80070f8:	d110      	bne.n	800711c <__mdiff+0x38>
 80070fa:	0001      	movs	r1, r0
 80070fc:	0038      	movs	r0, r7
 80070fe:	f7ff fd51 	bl	8006ba4 <_Balloc>
 8007102:	1e02      	subs	r2, r0, #0
 8007104:	d104      	bne.n	8007110 <__mdiff+0x2c>
 8007106:	4b40      	ldr	r3, [pc, #256]	; (8007208 <__mdiff+0x124>)
 8007108:	4940      	ldr	r1, [pc, #256]	; (800720c <__mdiff+0x128>)
 800710a:	4841      	ldr	r0, [pc, #260]	; (8007210 <__mdiff+0x12c>)
 800710c:	f000 fb68 	bl	80077e0 <__assert_func>
 8007110:	2301      	movs	r3, #1
 8007112:	6145      	str	r5, [r0, #20]
 8007114:	6103      	str	r3, [r0, #16]
 8007116:	0010      	movs	r0, r2
 8007118:	b007      	add	sp, #28
 800711a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800711c:	2301      	movs	r3, #1
 800711e:	9301      	str	r3, [sp, #4]
 8007120:	2800      	cmp	r0, #0
 8007122:	db04      	blt.n	800712e <__mdiff+0x4a>
 8007124:	0023      	movs	r3, r4
 8007126:	0034      	movs	r4, r6
 8007128:	001e      	movs	r6, r3
 800712a:	2300      	movs	r3, #0
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	0038      	movs	r0, r7
 8007130:	6861      	ldr	r1, [r4, #4]
 8007132:	f7ff fd37 	bl	8006ba4 <_Balloc>
 8007136:	1e02      	subs	r2, r0, #0
 8007138:	d103      	bne.n	8007142 <__mdiff+0x5e>
 800713a:	2190      	movs	r1, #144	; 0x90
 800713c:	4b32      	ldr	r3, [pc, #200]	; (8007208 <__mdiff+0x124>)
 800713e:	0089      	lsls	r1, r1, #2
 8007140:	e7e3      	b.n	800710a <__mdiff+0x26>
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	2700      	movs	r7, #0
 8007146:	60c3      	str	r3, [r0, #12]
 8007148:	6920      	ldr	r0, [r4, #16]
 800714a:	3414      	adds	r4, #20
 800714c:	9401      	str	r4, [sp, #4]
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	0084      	lsls	r4, r0, #2
 8007152:	191b      	adds	r3, r3, r4
 8007154:	0034      	movs	r4, r6
 8007156:	9302      	str	r3, [sp, #8]
 8007158:	6933      	ldr	r3, [r6, #16]
 800715a:	3414      	adds	r4, #20
 800715c:	0099      	lsls	r1, r3, #2
 800715e:	1863      	adds	r3, r4, r1
 8007160:	9303      	str	r3, [sp, #12]
 8007162:	0013      	movs	r3, r2
 8007164:	3314      	adds	r3, #20
 8007166:	469c      	mov	ip, r3
 8007168:	9305      	str	r3, [sp, #20]
 800716a:	9b01      	ldr	r3, [sp, #4]
 800716c:	9304      	str	r3, [sp, #16]
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	cc02      	ldmia	r4!, {r1}
 8007172:	cb20      	ldmia	r3!, {r5}
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	b2ab      	uxth	r3, r5
 8007178:	19df      	adds	r7, r3, r7
 800717a:	b28b      	uxth	r3, r1
 800717c:	1afb      	subs	r3, r7, r3
 800717e:	0c09      	lsrs	r1, r1, #16
 8007180:	0c2d      	lsrs	r5, r5, #16
 8007182:	1a6d      	subs	r5, r5, r1
 8007184:	1419      	asrs	r1, r3, #16
 8007186:	186d      	adds	r5, r5, r1
 8007188:	4661      	mov	r1, ip
 800718a:	142f      	asrs	r7, r5, #16
 800718c:	b29b      	uxth	r3, r3
 800718e:	042d      	lsls	r5, r5, #16
 8007190:	432b      	orrs	r3, r5
 8007192:	c108      	stmia	r1!, {r3}
 8007194:	9b03      	ldr	r3, [sp, #12]
 8007196:	468c      	mov	ip, r1
 8007198:	42a3      	cmp	r3, r4
 800719a:	d8e8      	bhi.n	800716e <__mdiff+0x8a>
 800719c:	0031      	movs	r1, r6
 800719e:	9c03      	ldr	r4, [sp, #12]
 80071a0:	3115      	adds	r1, #21
 80071a2:	2304      	movs	r3, #4
 80071a4:	428c      	cmp	r4, r1
 80071a6:	d304      	bcc.n	80071b2 <__mdiff+0xce>
 80071a8:	1ba3      	subs	r3, r4, r6
 80071aa:	3b15      	subs	r3, #21
 80071ac:	089b      	lsrs	r3, r3, #2
 80071ae:	3301      	adds	r3, #1
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	9901      	ldr	r1, [sp, #4]
 80071b4:	18cc      	adds	r4, r1, r3
 80071b6:	9905      	ldr	r1, [sp, #20]
 80071b8:	0026      	movs	r6, r4
 80071ba:	18cb      	adds	r3, r1, r3
 80071bc:	469c      	mov	ip, r3
 80071be:	9902      	ldr	r1, [sp, #8]
 80071c0:	428e      	cmp	r6, r1
 80071c2:	d310      	bcc.n	80071e6 <__mdiff+0x102>
 80071c4:	9e02      	ldr	r6, [sp, #8]
 80071c6:	1ee1      	subs	r1, r4, #3
 80071c8:	2500      	movs	r5, #0
 80071ca:	428e      	cmp	r6, r1
 80071cc:	d304      	bcc.n	80071d8 <__mdiff+0xf4>
 80071ce:	0031      	movs	r1, r6
 80071d0:	3103      	adds	r1, #3
 80071d2:	1b0c      	subs	r4, r1, r4
 80071d4:	08a4      	lsrs	r4, r4, #2
 80071d6:	00a5      	lsls	r5, r4, #2
 80071d8:	195b      	adds	r3, r3, r5
 80071da:	3b04      	subs	r3, #4
 80071dc:	6819      	ldr	r1, [r3, #0]
 80071de:	2900      	cmp	r1, #0
 80071e0:	d00f      	beq.n	8007202 <__mdiff+0x11e>
 80071e2:	6110      	str	r0, [r2, #16]
 80071e4:	e797      	b.n	8007116 <__mdiff+0x32>
 80071e6:	ce02      	ldmia	r6!, {r1}
 80071e8:	b28d      	uxth	r5, r1
 80071ea:	19ed      	adds	r5, r5, r7
 80071ec:	0c0f      	lsrs	r7, r1, #16
 80071ee:	1429      	asrs	r1, r5, #16
 80071f0:	1879      	adds	r1, r7, r1
 80071f2:	140f      	asrs	r7, r1, #16
 80071f4:	b2ad      	uxth	r5, r5
 80071f6:	0409      	lsls	r1, r1, #16
 80071f8:	430d      	orrs	r5, r1
 80071fa:	4661      	mov	r1, ip
 80071fc:	c120      	stmia	r1!, {r5}
 80071fe:	468c      	mov	ip, r1
 8007200:	e7dd      	b.n	80071be <__mdiff+0xda>
 8007202:	3801      	subs	r0, #1
 8007204:	e7e9      	b.n	80071da <__mdiff+0xf6>
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	08008603 	.word	0x08008603
 800720c:	00000232 	.word	0x00000232
 8007210:	08008614 	.word	0x08008614

08007214 <__d2b>:
 8007214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007216:	2101      	movs	r1, #1
 8007218:	0014      	movs	r4, r2
 800721a:	001e      	movs	r6, r3
 800721c:	9f08      	ldr	r7, [sp, #32]
 800721e:	f7ff fcc1 	bl	8006ba4 <_Balloc>
 8007222:	1e05      	subs	r5, r0, #0
 8007224:	d105      	bne.n	8007232 <__d2b+0x1e>
 8007226:	0002      	movs	r2, r0
 8007228:	4b26      	ldr	r3, [pc, #152]	; (80072c4 <__d2b+0xb0>)
 800722a:	4927      	ldr	r1, [pc, #156]	; (80072c8 <__d2b+0xb4>)
 800722c:	4827      	ldr	r0, [pc, #156]	; (80072cc <__d2b+0xb8>)
 800722e:	f000 fad7 	bl	80077e0 <__assert_func>
 8007232:	0333      	lsls	r3, r6, #12
 8007234:	0076      	lsls	r6, r6, #1
 8007236:	0b1b      	lsrs	r3, r3, #12
 8007238:	0d76      	lsrs	r6, r6, #21
 800723a:	d124      	bne.n	8007286 <__d2b+0x72>
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	2c00      	cmp	r4, #0
 8007240:	d027      	beq.n	8007292 <__d2b+0x7e>
 8007242:	4668      	mov	r0, sp
 8007244:	9400      	str	r4, [sp, #0]
 8007246:	f7ff fd73 	bl	8006d30 <__lo0bits>
 800724a:	9c00      	ldr	r4, [sp, #0]
 800724c:	2800      	cmp	r0, #0
 800724e:	d01e      	beq.n	800728e <__d2b+0x7a>
 8007250:	9b01      	ldr	r3, [sp, #4]
 8007252:	2120      	movs	r1, #32
 8007254:	001a      	movs	r2, r3
 8007256:	1a09      	subs	r1, r1, r0
 8007258:	408a      	lsls	r2, r1
 800725a:	40c3      	lsrs	r3, r0
 800725c:	4322      	orrs	r2, r4
 800725e:	616a      	str	r2, [r5, #20]
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	9c01      	ldr	r4, [sp, #4]
 8007264:	61ac      	str	r4, [r5, #24]
 8007266:	1e63      	subs	r3, r4, #1
 8007268:	419c      	sbcs	r4, r3
 800726a:	3401      	adds	r4, #1
 800726c:	612c      	str	r4, [r5, #16]
 800726e:	2e00      	cmp	r6, #0
 8007270:	d018      	beq.n	80072a4 <__d2b+0x90>
 8007272:	4b17      	ldr	r3, [pc, #92]	; (80072d0 <__d2b+0xbc>)
 8007274:	18f6      	adds	r6, r6, r3
 8007276:	2335      	movs	r3, #53	; 0x35
 8007278:	1836      	adds	r6, r6, r0
 800727a:	1a18      	subs	r0, r3, r0
 800727c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800727e:	603e      	str	r6, [r7, #0]
 8007280:	6018      	str	r0, [r3, #0]
 8007282:	0028      	movs	r0, r5
 8007284:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007286:	2280      	movs	r2, #128	; 0x80
 8007288:	0352      	lsls	r2, r2, #13
 800728a:	4313      	orrs	r3, r2
 800728c:	e7d6      	b.n	800723c <__d2b+0x28>
 800728e:	616c      	str	r4, [r5, #20]
 8007290:	e7e7      	b.n	8007262 <__d2b+0x4e>
 8007292:	a801      	add	r0, sp, #4
 8007294:	f7ff fd4c 	bl	8006d30 <__lo0bits>
 8007298:	2401      	movs	r4, #1
 800729a:	9b01      	ldr	r3, [sp, #4]
 800729c:	612c      	str	r4, [r5, #16]
 800729e:	616b      	str	r3, [r5, #20]
 80072a0:	3020      	adds	r0, #32
 80072a2:	e7e4      	b.n	800726e <__d2b+0x5a>
 80072a4:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <__d2b+0xc0>)
 80072a6:	18c0      	adds	r0, r0, r3
 80072a8:	4b0b      	ldr	r3, [pc, #44]	; (80072d8 <__d2b+0xc4>)
 80072aa:	6038      	str	r0, [r7, #0]
 80072ac:	18e3      	adds	r3, r4, r3
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	18eb      	adds	r3, r5, r3
 80072b2:	6958      	ldr	r0, [r3, #20]
 80072b4:	f7ff fd22 	bl	8006cfc <__hi0bits>
 80072b8:	0164      	lsls	r4, r4, #5
 80072ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072bc:	1a24      	subs	r4, r4, r0
 80072be:	601c      	str	r4, [r3, #0]
 80072c0:	e7df      	b.n	8007282 <__d2b+0x6e>
 80072c2:	46c0      	nop			; (mov r8, r8)
 80072c4:	08008603 	.word	0x08008603
 80072c8:	0000030a 	.word	0x0000030a
 80072cc:	08008614 	.word	0x08008614
 80072d0:	fffffbcd 	.word	0xfffffbcd
 80072d4:	fffffbce 	.word	0xfffffbce
 80072d8:	3fffffff 	.word	0x3fffffff

080072dc <_calloc_r>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	0c13      	lsrs	r3, r2, #16
 80072e0:	0c0d      	lsrs	r5, r1, #16
 80072e2:	d11e      	bne.n	8007322 <_calloc_r+0x46>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10c      	bne.n	8007302 <_calloc_r+0x26>
 80072e8:	b289      	uxth	r1, r1
 80072ea:	b294      	uxth	r4, r2
 80072ec:	434c      	muls	r4, r1
 80072ee:	0021      	movs	r1, r4
 80072f0:	f000 f88c 	bl	800740c <_malloc_r>
 80072f4:	1e05      	subs	r5, r0, #0
 80072f6:	d01b      	beq.n	8007330 <_calloc_r+0x54>
 80072f8:	0022      	movs	r2, r4
 80072fa:	2100      	movs	r1, #0
 80072fc:	f7fe f8f4 	bl	80054e8 <memset>
 8007300:	e016      	b.n	8007330 <_calloc_r+0x54>
 8007302:	1c1d      	adds	r5, r3, #0
 8007304:	1c0b      	adds	r3, r1, #0
 8007306:	b292      	uxth	r2, r2
 8007308:	b289      	uxth	r1, r1
 800730a:	b29c      	uxth	r4, r3
 800730c:	4351      	muls	r1, r2
 800730e:	b2ab      	uxth	r3, r5
 8007310:	4363      	muls	r3, r4
 8007312:	0c0c      	lsrs	r4, r1, #16
 8007314:	191c      	adds	r4, r3, r4
 8007316:	0c22      	lsrs	r2, r4, #16
 8007318:	d107      	bne.n	800732a <_calloc_r+0x4e>
 800731a:	0424      	lsls	r4, r4, #16
 800731c:	b289      	uxth	r1, r1
 800731e:	430c      	orrs	r4, r1
 8007320:	e7e5      	b.n	80072ee <_calloc_r+0x12>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <_calloc_r+0x4e>
 8007326:	1c13      	adds	r3, r2, #0
 8007328:	e7ed      	b.n	8007306 <_calloc_r+0x2a>
 800732a:	230c      	movs	r3, #12
 800732c:	2500      	movs	r5, #0
 800732e:	6003      	str	r3, [r0, #0]
 8007330:	0028      	movs	r0, r5
 8007332:	bd70      	pop	{r4, r5, r6, pc}

08007334 <_free_r>:
 8007334:	b570      	push	{r4, r5, r6, lr}
 8007336:	0005      	movs	r5, r0
 8007338:	2900      	cmp	r1, #0
 800733a:	d010      	beq.n	800735e <_free_r+0x2a>
 800733c:	1f0c      	subs	r4, r1, #4
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	da00      	bge.n	8007346 <_free_r+0x12>
 8007344:	18e4      	adds	r4, r4, r3
 8007346:	0028      	movs	r0, r5
 8007348:	f000 fa9e 	bl	8007888 <__malloc_lock>
 800734c:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <_free_r+0x90>)
 800734e:	6813      	ldr	r3, [r2, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d105      	bne.n	8007360 <_free_r+0x2c>
 8007354:	6063      	str	r3, [r4, #4]
 8007356:	6014      	str	r4, [r2, #0]
 8007358:	0028      	movs	r0, r5
 800735a:	f000 fa9d 	bl	8007898 <__malloc_unlock>
 800735e:	bd70      	pop	{r4, r5, r6, pc}
 8007360:	42a3      	cmp	r3, r4
 8007362:	d908      	bls.n	8007376 <_free_r+0x42>
 8007364:	6821      	ldr	r1, [r4, #0]
 8007366:	1860      	adds	r0, r4, r1
 8007368:	4283      	cmp	r3, r0
 800736a:	d1f3      	bne.n	8007354 <_free_r+0x20>
 800736c:	6818      	ldr	r0, [r3, #0]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	1841      	adds	r1, r0, r1
 8007372:	6021      	str	r1, [r4, #0]
 8007374:	e7ee      	b.n	8007354 <_free_r+0x20>
 8007376:	001a      	movs	r2, r3
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <_free_r+0x4e>
 800737e:	42a3      	cmp	r3, r4
 8007380:	d9f9      	bls.n	8007376 <_free_r+0x42>
 8007382:	6811      	ldr	r1, [r2, #0]
 8007384:	1850      	adds	r0, r2, r1
 8007386:	42a0      	cmp	r0, r4
 8007388:	d10b      	bne.n	80073a2 <_free_r+0x6e>
 800738a:	6820      	ldr	r0, [r4, #0]
 800738c:	1809      	adds	r1, r1, r0
 800738e:	1850      	adds	r0, r2, r1
 8007390:	6011      	str	r1, [r2, #0]
 8007392:	4283      	cmp	r3, r0
 8007394:	d1e0      	bne.n	8007358 <_free_r+0x24>
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	1841      	adds	r1, r0, r1
 800739c:	6011      	str	r1, [r2, #0]
 800739e:	6053      	str	r3, [r2, #4]
 80073a0:	e7da      	b.n	8007358 <_free_r+0x24>
 80073a2:	42a0      	cmp	r0, r4
 80073a4:	d902      	bls.n	80073ac <_free_r+0x78>
 80073a6:	230c      	movs	r3, #12
 80073a8:	602b      	str	r3, [r5, #0]
 80073aa:	e7d5      	b.n	8007358 <_free_r+0x24>
 80073ac:	6821      	ldr	r1, [r4, #0]
 80073ae:	1860      	adds	r0, r4, r1
 80073b0:	4283      	cmp	r3, r0
 80073b2:	d103      	bne.n	80073bc <_free_r+0x88>
 80073b4:	6818      	ldr	r0, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	1841      	adds	r1, r0, r1
 80073ba:	6021      	str	r1, [r4, #0]
 80073bc:	6063      	str	r3, [r4, #4]
 80073be:	6054      	str	r4, [r2, #4]
 80073c0:	e7ca      	b.n	8007358 <_free_r+0x24>
 80073c2:	46c0      	nop			; (mov r8, r8)
 80073c4:	20000330 	.word	0x20000330

080073c8 <sbrk_aligned>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	4e0f      	ldr	r6, [pc, #60]	; (8007408 <sbrk_aligned+0x40>)
 80073cc:	000d      	movs	r5, r1
 80073ce:	6831      	ldr	r1, [r6, #0]
 80073d0:	0004      	movs	r4, r0
 80073d2:	2900      	cmp	r1, #0
 80073d4:	d102      	bne.n	80073dc <sbrk_aligned+0x14>
 80073d6:	f000 f9f1 	bl	80077bc <_sbrk_r>
 80073da:	6030      	str	r0, [r6, #0]
 80073dc:	0029      	movs	r1, r5
 80073de:	0020      	movs	r0, r4
 80073e0:	f000 f9ec 	bl	80077bc <_sbrk_r>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d00a      	beq.n	80073fe <sbrk_aligned+0x36>
 80073e8:	2303      	movs	r3, #3
 80073ea:	1cc5      	adds	r5, r0, #3
 80073ec:	439d      	bics	r5, r3
 80073ee:	42a8      	cmp	r0, r5
 80073f0:	d007      	beq.n	8007402 <sbrk_aligned+0x3a>
 80073f2:	1a29      	subs	r1, r5, r0
 80073f4:	0020      	movs	r0, r4
 80073f6:	f000 f9e1 	bl	80077bc <_sbrk_r>
 80073fa:	1c43      	adds	r3, r0, #1
 80073fc:	d101      	bne.n	8007402 <sbrk_aligned+0x3a>
 80073fe:	2501      	movs	r5, #1
 8007400:	426d      	negs	r5, r5
 8007402:	0028      	movs	r0, r5
 8007404:	bd70      	pop	{r4, r5, r6, pc}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	20000334 	.word	0x20000334

0800740c <_malloc_r>:
 800740c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800740e:	2203      	movs	r2, #3
 8007410:	1ccb      	adds	r3, r1, #3
 8007412:	4393      	bics	r3, r2
 8007414:	3308      	adds	r3, #8
 8007416:	0006      	movs	r6, r0
 8007418:	001f      	movs	r7, r3
 800741a:	2b0c      	cmp	r3, #12
 800741c:	d232      	bcs.n	8007484 <_malloc_r+0x78>
 800741e:	270c      	movs	r7, #12
 8007420:	42b9      	cmp	r1, r7
 8007422:	d831      	bhi.n	8007488 <_malloc_r+0x7c>
 8007424:	0030      	movs	r0, r6
 8007426:	f000 fa2f 	bl	8007888 <__malloc_lock>
 800742a:	4d32      	ldr	r5, [pc, #200]	; (80074f4 <_malloc_r+0xe8>)
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	001c      	movs	r4, r3
 8007430:	2c00      	cmp	r4, #0
 8007432:	d12e      	bne.n	8007492 <_malloc_r+0x86>
 8007434:	0039      	movs	r1, r7
 8007436:	0030      	movs	r0, r6
 8007438:	f7ff ffc6 	bl	80073c8 <sbrk_aligned>
 800743c:	0004      	movs	r4, r0
 800743e:	1c43      	adds	r3, r0, #1
 8007440:	d11e      	bne.n	8007480 <_malloc_r+0x74>
 8007442:	682c      	ldr	r4, [r5, #0]
 8007444:	0025      	movs	r5, r4
 8007446:	2d00      	cmp	r5, #0
 8007448:	d14a      	bne.n	80074e0 <_malloc_r+0xd4>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	0029      	movs	r1, r5
 800744e:	18e3      	adds	r3, r4, r3
 8007450:	0030      	movs	r0, r6
 8007452:	9301      	str	r3, [sp, #4]
 8007454:	f000 f9b2 	bl	80077bc <_sbrk_r>
 8007458:	9b01      	ldr	r3, [sp, #4]
 800745a:	4283      	cmp	r3, r0
 800745c:	d143      	bne.n	80074e6 <_malloc_r+0xda>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	3703      	adds	r7, #3
 8007462:	1aff      	subs	r7, r7, r3
 8007464:	2303      	movs	r3, #3
 8007466:	439f      	bics	r7, r3
 8007468:	3708      	adds	r7, #8
 800746a:	2f0c      	cmp	r7, #12
 800746c:	d200      	bcs.n	8007470 <_malloc_r+0x64>
 800746e:	270c      	movs	r7, #12
 8007470:	0039      	movs	r1, r7
 8007472:	0030      	movs	r0, r6
 8007474:	f7ff ffa8 	bl	80073c8 <sbrk_aligned>
 8007478:	1c43      	adds	r3, r0, #1
 800747a:	d034      	beq.n	80074e6 <_malloc_r+0xda>
 800747c:	6823      	ldr	r3, [r4, #0]
 800747e:	19df      	adds	r7, r3, r7
 8007480:	6027      	str	r7, [r4, #0]
 8007482:	e013      	b.n	80074ac <_malloc_r+0xa0>
 8007484:	2b00      	cmp	r3, #0
 8007486:	dacb      	bge.n	8007420 <_malloc_r+0x14>
 8007488:	230c      	movs	r3, #12
 800748a:	2500      	movs	r5, #0
 800748c:	6033      	str	r3, [r6, #0]
 800748e:	0028      	movs	r0, r5
 8007490:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007492:	6822      	ldr	r2, [r4, #0]
 8007494:	1bd1      	subs	r1, r2, r7
 8007496:	d420      	bmi.n	80074da <_malloc_r+0xce>
 8007498:	290b      	cmp	r1, #11
 800749a:	d917      	bls.n	80074cc <_malloc_r+0xc0>
 800749c:	19e2      	adds	r2, r4, r7
 800749e:	6027      	str	r7, [r4, #0]
 80074a0:	42a3      	cmp	r3, r4
 80074a2:	d111      	bne.n	80074c8 <_malloc_r+0xbc>
 80074a4:	602a      	str	r2, [r5, #0]
 80074a6:	6863      	ldr	r3, [r4, #4]
 80074a8:	6011      	str	r1, [r2, #0]
 80074aa:	6053      	str	r3, [r2, #4]
 80074ac:	0030      	movs	r0, r6
 80074ae:	0025      	movs	r5, r4
 80074b0:	f000 f9f2 	bl	8007898 <__malloc_unlock>
 80074b4:	2207      	movs	r2, #7
 80074b6:	350b      	adds	r5, #11
 80074b8:	1d23      	adds	r3, r4, #4
 80074ba:	4395      	bics	r5, r2
 80074bc:	1aea      	subs	r2, r5, r3
 80074be:	429d      	cmp	r5, r3
 80074c0:	d0e5      	beq.n	800748e <_malloc_r+0x82>
 80074c2:	1b5b      	subs	r3, r3, r5
 80074c4:	50a3      	str	r3, [r4, r2]
 80074c6:	e7e2      	b.n	800748e <_malloc_r+0x82>
 80074c8:	605a      	str	r2, [r3, #4]
 80074ca:	e7ec      	b.n	80074a6 <_malloc_r+0x9a>
 80074cc:	6862      	ldr	r2, [r4, #4]
 80074ce:	42a3      	cmp	r3, r4
 80074d0:	d101      	bne.n	80074d6 <_malloc_r+0xca>
 80074d2:	602a      	str	r2, [r5, #0]
 80074d4:	e7ea      	b.n	80074ac <_malloc_r+0xa0>
 80074d6:	605a      	str	r2, [r3, #4]
 80074d8:	e7e8      	b.n	80074ac <_malloc_r+0xa0>
 80074da:	0023      	movs	r3, r4
 80074dc:	6864      	ldr	r4, [r4, #4]
 80074de:	e7a7      	b.n	8007430 <_malloc_r+0x24>
 80074e0:	002c      	movs	r4, r5
 80074e2:	686d      	ldr	r5, [r5, #4]
 80074e4:	e7af      	b.n	8007446 <_malloc_r+0x3a>
 80074e6:	230c      	movs	r3, #12
 80074e8:	0030      	movs	r0, r6
 80074ea:	6033      	str	r3, [r6, #0]
 80074ec:	f000 f9d4 	bl	8007898 <__malloc_unlock>
 80074f0:	e7cd      	b.n	800748e <_malloc_r+0x82>
 80074f2:	46c0      	nop			; (mov r8, r8)
 80074f4:	20000330 	.word	0x20000330

080074f8 <__ssputs_r>:
 80074f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074fa:	688e      	ldr	r6, [r1, #8]
 80074fc:	b085      	sub	sp, #20
 80074fe:	0007      	movs	r7, r0
 8007500:	000c      	movs	r4, r1
 8007502:	9203      	str	r2, [sp, #12]
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	429e      	cmp	r6, r3
 8007508:	d83c      	bhi.n	8007584 <__ssputs_r+0x8c>
 800750a:	2390      	movs	r3, #144	; 0x90
 800750c:	898a      	ldrh	r2, [r1, #12]
 800750e:	00db      	lsls	r3, r3, #3
 8007510:	421a      	tst	r2, r3
 8007512:	d034      	beq.n	800757e <__ssputs_r+0x86>
 8007514:	6909      	ldr	r1, [r1, #16]
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	6960      	ldr	r0, [r4, #20]
 800751a:	1a5b      	subs	r3, r3, r1
 800751c:	9302      	str	r3, [sp, #8]
 800751e:	2303      	movs	r3, #3
 8007520:	4343      	muls	r3, r0
 8007522:	0fdd      	lsrs	r5, r3, #31
 8007524:	18ed      	adds	r5, r5, r3
 8007526:	9b01      	ldr	r3, [sp, #4]
 8007528:	9802      	ldr	r0, [sp, #8]
 800752a:	3301      	adds	r3, #1
 800752c:	181b      	adds	r3, r3, r0
 800752e:	106d      	asrs	r5, r5, #1
 8007530:	42ab      	cmp	r3, r5
 8007532:	d900      	bls.n	8007536 <__ssputs_r+0x3e>
 8007534:	001d      	movs	r5, r3
 8007536:	0553      	lsls	r3, r2, #21
 8007538:	d532      	bpl.n	80075a0 <__ssputs_r+0xa8>
 800753a:	0029      	movs	r1, r5
 800753c:	0038      	movs	r0, r7
 800753e:	f7ff ff65 	bl	800740c <_malloc_r>
 8007542:	1e06      	subs	r6, r0, #0
 8007544:	d109      	bne.n	800755a <__ssputs_r+0x62>
 8007546:	230c      	movs	r3, #12
 8007548:	603b      	str	r3, [r7, #0]
 800754a:	2340      	movs	r3, #64	; 0x40
 800754c:	2001      	movs	r0, #1
 800754e:	89a2      	ldrh	r2, [r4, #12]
 8007550:	4240      	negs	r0, r0
 8007552:	4313      	orrs	r3, r2
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	b005      	add	sp, #20
 8007558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800755a:	9a02      	ldr	r2, [sp, #8]
 800755c:	6921      	ldr	r1, [r4, #16]
 800755e:	f7ff fb18 	bl	8006b92 <memcpy>
 8007562:	89a3      	ldrh	r3, [r4, #12]
 8007564:	4a14      	ldr	r2, [pc, #80]	; (80075b8 <__ssputs_r+0xc0>)
 8007566:	401a      	ands	r2, r3
 8007568:	2380      	movs	r3, #128	; 0x80
 800756a:	4313      	orrs	r3, r2
 800756c:	81a3      	strh	r3, [r4, #12]
 800756e:	9b02      	ldr	r3, [sp, #8]
 8007570:	6126      	str	r6, [r4, #16]
 8007572:	18f6      	adds	r6, r6, r3
 8007574:	6026      	str	r6, [r4, #0]
 8007576:	6165      	str	r5, [r4, #20]
 8007578:	9e01      	ldr	r6, [sp, #4]
 800757a:	1aed      	subs	r5, r5, r3
 800757c:	60a5      	str	r5, [r4, #8]
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	429e      	cmp	r6, r3
 8007582:	d900      	bls.n	8007586 <__ssputs_r+0x8e>
 8007584:	9e01      	ldr	r6, [sp, #4]
 8007586:	0032      	movs	r2, r6
 8007588:	9903      	ldr	r1, [sp, #12]
 800758a:	6820      	ldr	r0, [r4, #0]
 800758c:	f000 f968 	bl	8007860 <memmove>
 8007590:	68a3      	ldr	r3, [r4, #8]
 8007592:	2000      	movs	r0, #0
 8007594:	1b9b      	subs	r3, r3, r6
 8007596:	60a3      	str	r3, [r4, #8]
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	199e      	adds	r6, r3, r6
 800759c:	6026      	str	r6, [r4, #0]
 800759e:	e7da      	b.n	8007556 <__ssputs_r+0x5e>
 80075a0:	002a      	movs	r2, r5
 80075a2:	0038      	movs	r0, r7
 80075a4:	f000 f980 	bl	80078a8 <_realloc_r>
 80075a8:	1e06      	subs	r6, r0, #0
 80075aa:	d1e0      	bne.n	800756e <__ssputs_r+0x76>
 80075ac:	0038      	movs	r0, r7
 80075ae:	6921      	ldr	r1, [r4, #16]
 80075b0:	f7ff fec0 	bl	8007334 <_free_r>
 80075b4:	e7c7      	b.n	8007546 <__ssputs_r+0x4e>
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	fffffb7f 	.word	0xfffffb7f

080075bc <_svfiprintf_r>:
 80075bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075be:	b0a1      	sub	sp, #132	; 0x84
 80075c0:	9003      	str	r0, [sp, #12]
 80075c2:	001d      	movs	r5, r3
 80075c4:	898b      	ldrh	r3, [r1, #12]
 80075c6:	000f      	movs	r7, r1
 80075c8:	0016      	movs	r6, r2
 80075ca:	061b      	lsls	r3, r3, #24
 80075cc:	d511      	bpl.n	80075f2 <_svfiprintf_r+0x36>
 80075ce:	690b      	ldr	r3, [r1, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10e      	bne.n	80075f2 <_svfiprintf_r+0x36>
 80075d4:	2140      	movs	r1, #64	; 0x40
 80075d6:	f7ff ff19 	bl	800740c <_malloc_r>
 80075da:	6038      	str	r0, [r7, #0]
 80075dc:	6138      	str	r0, [r7, #16]
 80075de:	2800      	cmp	r0, #0
 80075e0:	d105      	bne.n	80075ee <_svfiprintf_r+0x32>
 80075e2:	230c      	movs	r3, #12
 80075e4:	9a03      	ldr	r2, [sp, #12]
 80075e6:	3801      	subs	r0, #1
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	b021      	add	sp, #132	; 0x84
 80075ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075ee:	2340      	movs	r3, #64	; 0x40
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	2300      	movs	r3, #0
 80075f4:	ac08      	add	r4, sp, #32
 80075f6:	6163      	str	r3, [r4, #20]
 80075f8:	3320      	adds	r3, #32
 80075fa:	7663      	strb	r3, [r4, #25]
 80075fc:	3310      	adds	r3, #16
 80075fe:	76a3      	strb	r3, [r4, #26]
 8007600:	9507      	str	r5, [sp, #28]
 8007602:	0035      	movs	r5, r6
 8007604:	782b      	ldrb	r3, [r5, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d001      	beq.n	800760e <_svfiprintf_r+0x52>
 800760a:	2b25      	cmp	r3, #37	; 0x25
 800760c:	d147      	bne.n	800769e <_svfiprintf_r+0xe2>
 800760e:	1bab      	subs	r3, r5, r6
 8007610:	9305      	str	r3, [sp, #20]
 8007612:	42b5      	cmp	r5, r6
 8007614:	d00c      	beq.n	8007630 <_svfiprintf_r+0x74>
 8007616:	0032      	movs	r2, r6
 8007618:	0039      	movs	r1, r7
 800761a:	9803      	ldr	r0, [sp, #12]
 800761c:	f7ff ff6c 	bl	80074f8 <__ssputs_r>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d100      	bne.n	8007626 <_svfiprintf_r+0x6a>
 8007624:	e0ae      	b.n	8007784 <_svfiprintf_r+0x1c8>
 8007626:	6962      	ldr	r2, [r4, #20]
 8007628:	9b05      	ldr	r3, [sp, #20]
 800762a:	4694      	mov	ip, r2
 800762c:	4463      	add	r3, ip
 800762e:	6163      	str	r3, [r4, #20]
 8007630:	782b      	ldrb	r3, [r5, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d100      	bne.n	8007638 <_svfiprintf_r+0x7c>
 8007636:	e0a5      	b.n	8007784 <_svfiprintf_r+0x1c8>
 8007638:	2201      	movs	r2, #1
 800763a:	2300      	movs	r3, #0
 800763c:	4252      	negs	r2, r2
 800763e:	6062      	str	r2, [r4, #4]
 8007640:	a904      	add	r1, sp, #16
 8007642:	3254      	adds	r2, #84	; 0x54
 8007644:	1852      	adds	r2, r2, r1
 8007646:	1c6e      	adds	r6, r5, #1
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	60e3      	str	r3, [r4, #12]
 800764c:	60a3      	str	r3, [r4, #8]
 800764e:	7013      	strb	r3, [r2, #0]
 8007650:	65a3      	str	r3, [r4, #88]	; 0x58
 8007652:	2205      	movs	r2, #5
 8007654:	7831      	ldrb	r1, [r6, #0]
 8007656:	4854      	ldr	r0, [pc, #336]	; (80077a8 <_svfiprintf_r+0x1ec>)
 8007658:	f7ff fa90 	bl	8006b7c <memchr>
 800765c:	1c75      	adds	r5, r6, #1
 800765e:	2800      	cmp	r0, #0
 8007660:	d11f      	bne.n	80076a2 <_svfiprintf_r+0xe6>
 8007662:	6822      	ldr	r2, [r4, #0]
 8007664:	06d3      	lsls	r3, r2, #27
 8007666:	d504      	bpl.n	8007672 <_svfiprintf_r+0xb6>
 8007668:	2353      	movs	r3, #83	; 0x53
 800766a:	a904      	add	r1, sp, #16
 800766c:	185b      	adds	r3, r3, r1
 800766e:	2120      	movs	r1, #32
 8007670:	7019      	strb	r1, [r3, #0]
 8007672:	0713      	lsls	r3, r2, #28
 8007674:	d504      	bpl.n	8007680 <_svfiprintf_r+0xc4>
 8007676:	2353      	movs	r3, #83	; 0x53
 8007678:	a904      	add	r1, sp, #16
 800767a:	185b      	adds	r3, r3, r1
 800767c:	212b      	movs	r1, #43	; 0x2b
 800767e:	7019      	strb	r1, [r3, #0]
 8007680:	7833      	ldrb	r3, [r6, #0]
 8007682:	2b2a      	cmp	r3, #42	; 0x2a
 8007684:	d016      	beq.n	80076b4 <_svfiprintf_r+0xf8>
 8007686:	0035      	movs	r5, r6
 8007688:	2100      	movs	r1, #0
 800768a:	200a      	movs	r0, #10
 800768c:	68e3      	ldr	r3, [r4, #12]
 800768e:	782a      	ldrb	r2, [r5, #0]
 8007690:	1c6e      	adds	r6, r5, #1
 8007692:	3a30      	subs	r2, #48	; 0x30
 8007694:	2a09      	cmp	r2, #9
 8007696:	d94e      	bls.n	8007736 <_svfiprintf_r+0x17a>
 8007698:	2900      	cmp	r1, #0
 800769a:	d111      	bne.n	80076c0 <_svfiprintf_r+0x104>
 800769c:	e017      	b.n	80076ce <_svfiprintf_r+0x112>
 800769e:	3501      	adds	r5, #1
 80076a0:	e7b0      	b.n	8007604 <_svfiprintf_r+0x48>
 80076a2:	4b41      	ldr	r3, [pc, #260]	; (80077a8 <_svfiprintf_r+0x1ec>)
 80076a4:	6822      	ldr	r2, [r4, #0]
 80076a6:	1ac0      	subs	r0, r0, r3
 80076a8:	2301      	movs	r3, #1
 80076aa:	4083      	lsls	r3, r0
 80076ac:	4313      	orrs	r3, r2
 80076ae:	002e      	movs	r6, r5
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	e7ce      	b.n	8007652 <_svfiprintf_r+0x96>
 80076b4:	9b07      	ldr	r3, [sp, #28]
 80076b6:	1d19      	adds	r1, r3, #4
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	9107      	str	r1, [sp, #28]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	db01      	blt.n	80076c4 <_svfiprintf_r+0x108>
 80076c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80076c2:	e004      	b.n	80076ce <_svfiprintf_r+0x112>
 80076c4:	425b      	negs	r3, r3
 80076c6:	60e3      	str	r3, [r4, #12]
 80076c8:	2302      	movs	r3, #2
 80076ca:	4313      	orrs	r3, r2
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	782b      	ldrb	r3, [r5, #0]
 80076d0:	2b2e      	cmp	r3, #46	; 0x2e
 80076d2:	d10a      	bne.n	80076ea <_svfiprintf_r+0x12e>
 80076d4:	786b      	ldrb	r3, [r5, #1]
 80076d6:	2b2a      	cmp	r3, #42	; 0x2a
 80076d8:	d135      	bne.n	8007746 <_svfiprintf_r+0x18a>
 80076da:	9b07      	ldr	r3, [sp, #28]
 80076dc:	3502      	adds	r5, #2
 80076de:	1d1a      	adds	r2, r3, #4
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	9207      	str	r2, [sp, #28]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	db2b      	blt.n	8007740 <_svfiprintf_r+0x184>
 80076e8:	9309      	str	r3, [sp, #36]	; 0x24
 80076ea:	4e30      	ldr	r6, [pc, #192]	; (80077ac <_svfiprintf_r+0x1f0>)
 80076ec:	2203      	movs	r2, #3
 80076ee:	0030      	movs	r0, r6
 80076f0:	7829      	ldrb	r1, [r5, #0]
 80076f2:	f7ff fa43 	bl	8006b7c <memchr>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d006      	beq.n	8007708 <_svfiprintf_r+0x14c>
 80076fa:	2340      	movs	r3, #64	; 0x40
 80076fc:	1b80      	subs	r0, r0, r6
 80076fe:	4083      	lsls	r3, r0
 8007700:	6822      	ldr	r2, [r4, #0]
 8007702:	3501      	adds	r5, #1
 8007704:	4313      	orrs	r3, r2
 8007706:	6023      	str	r3, [r4, #0]
 8007708:	7829      	ldrb	r1, [r5, #0]
 800770a:	2206      	movs	r2, #6
 800770c:	4828      	ldr	r0, [pc, #160]	; (80077b0 <_svfiprintf_r+0x1f4>)
 800770e:	1c6e      	adds	r6, r5, #1
 8007710:	7621      	strb	r1, [r4, #24]
 8007712:	f7ff fa33 	bl	8006b7c <memchr>
 8007716:	2800      	cmp	r0, #0
 8007718:	d03c      	beq.n	8007794 <_svfiprintf_r+0x1d8>
 800771a:	4b26      	ldr	r3, [pc, #152]	; (80077b4 <_svfiprintf_r+0x1f8>)
 800771c:	2b00      	cmp	r3, #0
 800771e:	d125      	bne.n	800776c <_svfiprintf_r+0x1b0>
 8007720:	2207      	movs	r2, #7
 8007722:	9b07      	ldr	r3, [sp, #28]
 8007724:	3307      	adds	r3, #7
 8007726:	4393      	bics	r3, r2
 8007728:	3308      	adds	r3, #8
 800772a:	9307      	str	r3, [sp, #28]
 800772c:	6963      	ldr	r3, [r4, #20]
 800772e:	9a04      	ldr	r2, [sp, #16]
 8007730:	189b      	adds	r3, r3, r2
 8007732:	6163      	str	r3, [r4, #20]
 8007734:	e765      	b.n	8007602 <_svfiprintf_r+0x46>
 8007736:	4343      	muls	r3, r0
 8007738:	0035      	movs	r5, r6
 800773a:	2101      	movs	r1, #1
 800773c:	189b      	adds	r3, r3, r2
 800773e:	e7a6      	b.n	800768e <_svfiprintf_r+0xd2>
 8007740:	2301      	movs	r3, #1
 8007742:	425b      	negs	r3, r3
 8007744:	e7d0      	b.n	80076e8 <_svfiprintf_r+0x12c>
 8007746:	2300      	movs	r3, #0
 8007748:	200a      	movs	r0, #10
 800774a:	001a      	movs	r2, r3
 800774c:	3501      	adds	r5, #1
 800774e:	6063      	str	r3, [r4, #4]
 8007750:	7829      	ldrb	r1, [r5, #0]
 8007752:	1c6e      	adds	r6, r5, #1
 8007754:	3930      	subs	r1, #48	; 0x30
 8007756:	2909      	cmp	r1, #9
 8007758:	d903      	bls.n	8007762 <_svfiprintf_r+0x1a6>
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0c5      	beq.n	80076ea <_svfiprintf_r+0x12e>
 800775e:	9209      	str	r2, [sp, #36]	; 0x24
 8007760:	e7c3      	b.n	80076ea <_svfiprintf_r+0x12e>
 8007762:	4342      	muls	r2, r0
 8007764:	0035      	movs	r5, r6
 8007766:	2301      	movs	r3, #1
 8007768:	1852      	adds	r2, r2, r1
 800776a:	e7f1      	b.n	8007750 <_svfiprintf_r+0x194>
 800776c:	ab07      	add	r3, sp, #28
 800776e:	9300      	str	r3, [sp, #0]
 8007770:	003a      	movs	r2, r7
 8007772:	0021      	movs	r1, r4
 8007774:	4b10      	ldr	r3, [pc, #64]	; (80077b8 <_svfiprintf_r+0x1fc>)
 8007776:	9803      	ldr	r0, [sp, #12]
 8007778:	f7fd ff68 	bl	800564c <_printf_float>
 800777c:	9004      	str	r0, [sp, #16]
 800777e:	9b04      	ldr	r3, [sp, #16]
 8007780:	3301      	adds	r3, #1
 8007782:	d1d3      	bne.n	800772c <_svfiprintf_r+0x170>
 8007784:	89bb      	ldrh	r3, [r7, #12]
 8007786:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007788:	065b      	lsls	r3, r3, #25
 800778a:	d400      	bmi.n	800778e <_svfiprintf_r+0x1d2>
 800778c:	e72d      	b.n	80075ea <_svfiprintf_r+0x2e>
 800778e:	2001      	movs	r0, #1
 8007790:	4240      	negs	r0, r0
 8007792:	e72a      	b.n	80075ea <_svfiprintf_r+0x2e>
 8007794:	ab07      	add	r3, sp, #28
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	003a      	movs	r2, r7
 800779a:	0021      	movs	r1, r4
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <_svfiprintf_r+0x1fc>)
 800779e:	9803      	ldr	r0, [sp, #12]
 80077a0:	f7fe fa06 	bl	8005bb0 <_printf_i>
 80077a4:	e7ea      	b.n	800777c <_svfiprintf_r+0x1c0>
 80077a6:	46c0      	nop			; (mov r8, r8)
 80077a8:	0800876c 	.word	0x0800876c
 80077ac:	08008772 	.word	0x08008772
 80077b0:	08008776 	.word	0x08008776
 80077b4:	0800564d 	.word	0x0800564d
 80077b8:	080074f9 	.word	0x080074f9

080077bc <_sbrk_r>:
 80077bc:	2300      	movs	r3, #0
 80077be:	b570      	push	{r4, r5, r6, lr}
 80077c0:	4d06      	ldr	r5, [pc, #24]	; (80077dc <_sbrk_r+0x20>)
 80077c2:	0004      	movs	r4, r0
 80077c4:	0008      	movs	r0, r1
 80077c6:	602b      	str	r3, [r5, #0]
 80077c8:	f7fb fb84 	bl	8002ed4 <_sbrk>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d103      	bne.n	80077d8 <_sbrk_r+0x1c>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d000      	beq.n	80077d8 <_sbrk_r+0x1c>
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	bd70      	pop	{r4, r5, r6, pc}
 80077da:	46c0      	nop			; (mov r8, r8)
 80077dc:	20000338 	.word	0x20000338

080077e0 <__assert_func>:
 80077e0:	b530      	push	{r4, r5, lr}
 80077e2:	0014      	movs	r4, r2
 80077e4:	001a      	movs	r2, r3
 80077e6:	4b09      	ldr	r3, [pc, #36]	; (800780c <__assert_func+0x2c>)
 80077e8:	0005      	movs	r5, r0
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	b085      	sub	sp, #20
 80077ee:	68d8      	ldr	r0, [r3, #12]
 80077f0:	4b07      	ldr	r3, [pc, #28]	; (8007810 <__assert_func+0x30>)
 80077f2:	2c00      	cmp	r4, #0
 80077f4:	d101      	bne.n	80077fa <__assert_func+0x1a>
 80077f6:	4b07      	ldr	r3, [pc, #28]	; (8007814 <__assert_func+0x34>)
 80077f8:	001c      	movs	r4, r3
 80077fa:	9301      	str	r3, [sp, #4]
 80077fc:	9100      	str	r1, [sp, #0]
 80077fe:	002b      	movs	r3, r5
 8007800:	4905      	ldr	r1, [pc, #20]	; (8007818 <__assert_func+0x38>)
 8007802:	9402      	str	r4, [sp, #8]
 8007804:	f000 f80a 	bl	800781c <fiprintf>
 8007808:	f000 faba 	bl	8007d80 <abort>
 800780c:	2000000c 	.word	0x2000000c
 8007810:	0800877d 	.word	0x0800877d
 8007814:	080087b8 	.word	0x080087b8
 8007818:	0800878a 	.word	0x0800878a

0800781c <fiprintf>:
 800781c:	b40e      	push	{r1, r2, r3}
 800781e:	b503      	push	{r0, r1, lr}
 8007820:	0001      	movs	r1, r0
 8007822:	ab03      	add	r3, sp, #12
 8007824:	4804      	ldr	r0, [pc, #16]	; (8007838 <fiprintf+0x1c>)
 8007826:	cb04      	ldmia	r3!, {r2}
 8007828:	6800      	ldr	r0, [r0, #0]
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	f000 f892 	bl	8007954 <_vfiprintf_r>
 8007830:	b002      	add	sp, #8
 8007832:	bc08      	pop	{r3}
 8007834:	b003      	add	sp, #12
 8007836:	4718      	bx	r3
 8007838:	2000000c 	.word	0x2000000c

0800783c <__ascii_mbtowc>:
 800783c:	b082      	sub	sp, #8
 800783e:	2900      	cmp	r1, #0
 8007840:	d100      	bne.n	8007844 <__ascii_mbtowc+0x8>
 8007842:	a901      	add	r1, sp, #4
 8007844:	1e10      	subs	r0, r2, #0
 8007846:	d006      	beq.n	8007856 <__ascii_mbtowc+0x1a>
 8007848:	2b00      	cmp	r3, #0
 800784a:	d006      	beq.n	800785a <__ascii_mbtowc+0x1e>
 800784c:	7813      	ldrb	r3, [r2, #0]
 800784e:	600b      	str	r3, [r1, #0]
 8007850:	7810      	ldrb	r0, [r2, #0]
 8007852:	1e43      	subs	r3, r0, #1
 8007854:	4198      	sbcs	r0, r3
 8007856:	b002      	add	sp, #8
 8007858:	4770      	bx	lr
 800785a:	2002      	movs	r0, #2
 800785c:	4240      	negs	r0, r0
 800785e:	e7fa      	b.n	8007856 <__ascii_mbtowc+0x1a>

08007860 <memmove>:
 8007860:	b510      	push	{r4, lr}
 8007862:	4288      	cmp	r0, r1
 8007864:	d902      	bls.n	800786c <memmove+0xc>
 8007866:	188b      	adds	r3, r1, r2
 8007868:	4298      	cmp	r0, r3
 800786a:	d303      	bcc.n	8007874 <memmove+0x14>
 800786c:	2300      	movs	r3, #0
 800786e:	e007      	b.n	8007880 <memmove+0x20>
 8007870:	5c8b      	ldrb	r3, [r1, r2]
 8007872:	5483      	strb	r3, [r0, r2]
 8007874:	3a01      	subs	r2, #1
 8007876:	d2fb      	bcs.n	8007870 <memmove+0x10>
 8007878:	bd10      	pop	{r4, pc}
 800787a:	5ccc      	ldrb	r4, [r1, r3]
 800787c:	54c4      	strb	r4, [r0, r3]
 800787e:	3301      	adds	r3, #1
 8007880:	429a      	cmp	r2, r3
 8007882:	d1fa      	bne.n	800787a <memmove+0x1a>
 8007884:	e7f8      	b.n	8007878 <memmove+0x18>
	...

08007888 <__malloc_lock>:
 8007888:	b510      	push	{r4, lr}
 800788a:	4802      	ldr	r0, [pc, #8]	; (8007894 <__malloc_lock+0xc>)
 800788c:	f000 fc4f 	bl	800812e <__retarget_lock_acquire_recursive>
 8007890:	bd10      	pop	{r4, pc}
 8007892:	46c0      	nop			; (mov r8, r8)
 8007894:	2000033c 	.word	0x2000033c

08007898 <__malloc_unlock>:
 8007898:	b510      	push	{r4, lr}
 800789a:	4802      	ldr	r0, [pc, #8]	; (80078a4 <__malloc_unlock+0xc>)
 800789c:	f000 fc48 	bl	8008130 <__retarget_lock_release_recursive>
 80078a0:	bd10      	pop	{r4, pc}
 80078a2:	46c0      	nop			; (mov r8, r8)
 80078a4:	2000033c 	.word	0x2000033c

080078a8 <_realloc_r>:
 80078a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078aa:	0007      	movs	r7, r0
 80078ac:	000e      	movs	r6, r1
 80078ae:	0014      	movs	r4, r2
 80078b0:	2900      	cmp	r1, #0
 80078b2:	d105      	bne.n	80078c0 <_realloc_r+0x18>
 80078b4:	0011      	movs	r1, r2
 80078b6:	f7ff fda9 	bl	800740c <_malloc_r>
 80078ba:	0005      	movs	r5, r0
 80078bc:	0028      	movs	r0, r5
 80078be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	d103      	bne.n	80078cc <_realloc_r+0x24>
 80078c4:	f7ff fd36 	bl	8007334 <_free_r>
 80078c8:	0025      	movs	r5, r4
 80078ca:	e7f7      	b.n	80078bc <_realloc_r+0x14>
 80078cc:	f000 fc9e 	bl	800820c <_malloc_usable_size_r>
 80078d0:	9001      	str	r0, [sp, #4]
 80078d2:	4284      	cmp	r4, r0
 80078d4:	d803      	bhi.n	80078de <_realloc_r+0x36>
 80078d6:	0035      	movs	r5, r6
 80078d8:	0843      	lsrs	r3, r0, #1
 80078da:	42a3      	cmp	r3, r4
 80078dc:	d3ee      	bcc.n	80078bc <_realloc_r+0x14>
 80078de:	0021      	movs	r1, r4
 80078e0:	0038      	movs	r0, r7
 80078e2:	f7ff fd93 	bl	800740c <_malloc_r>
 80078e6:	1e05      	subs	r5, r0, #0
 80078e8:	d0e8      	beq.n	80078bc <_realloc_r+0x14>
 80078ea:	9b01      	ldr	r3, [sp, #4]
 80078ec:	0022      	movs	r2, r4
 80078ee:	429c      	cmp	r4, r3
 80078f0:	d900      	bls.n	80078f4 <_realloc_r+0x4c>
 80078f2:	001a      	movs	r2, r3
 80078f4:	0031      	movs	r1, r6
 80078f6:	0028      	movs	r0, r5
 80078f8:	f7ff f94b 	bl	8006b92 <memcpy>
 80078fc:	0031      	movs	r1, r6
 80078fe:	0038      	movs	r0, r7
 8007900:	f7ff fd18 	bl	8007334 <_free_r>
 8007904:	e7da      	b.n	80078bc <_realloc_r+0x14>

08007906 <__sfputc_r>:
 8007906:	6893      	ldr	r3, [r2, #8]
 8007908:	b510      	push	{r4, lr}
 800790a:	3b01      	subs	r3, #1
 800790c:	6093      	str	r3, [r2, #8]
 800790e:	2b00      	cmp	r3, #0
 8007910:	da04      	bge.n	800791c <__sfputc_r+0x16>
 8007912:	6994      	ldr	r4, [r2, #24]
 8007914:	42a3      	cmp	r3, r4
 8007916:	db07      	blt.n	8007928 <__sfputc_r+0x22>
 8007918:	290a      	cmp	r1, #10
 800791a:	d005      	beq.n	8007928 <__sfputc_r+0x22>
 800791c:	6813      	ldr	r3, [r2, #0]
 800791e:	1c58      	adds	r0, r3, #1
 8007920:	6010      	str	r0, [r2, #0]
 8007922:	7019      	strb	r1, [r3, #0]
 8007924:	0008      	movs	r0, r1
 8007926:	bd10      	pop	{r4, pc}
 8007928:	f000 f94e 	bl	8007bc8 <__swbuf_r>
 800792c:	0001      	movs	r1, r0
 800792e:	e7f9      	b.n	8007924 <__sfputc_r+0x1e>

08007930 <__sfputs_r>:
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	0006      	movs	r6, r0
 8007934:	000f      	movs	r7, r1
 8007936:	0014      	movs	r4, r2
 8007938:	18d5      	adds	r5, r2, r3
 800793a:	42ac      	cmp	r4, r5
 800793c:	d101      	bne.n	8007942 <__sfputs_r+0x12>
 800793e:	2000      	movs	r0, #0
 8007940:	e007      	b.n	8007952 <__sfputs_r+0x22>
 8007942:	7821      	ldrb	r1, [r4, #0]
 8007944:	003a      	movs	r2, r7
 8007946:	0030      	movs	r0, r6
 8007948:	f7ff ffdd 	bl	8007906 <__sfputc_r>
 800794c:	3401      	adds	r4, #1
 800794e:	1c43      	adds	r3, r0, #1
 8007950:	d1f3      	bne.n	800793a <__sfputs_r+0xa>
 8007952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007954 <_vfiprintf_r>:
 8007954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007956:	b0a1      	sub	sp, #132	; 0x84
 8007958:	0006      	movs	r6, r0
 800795a:	000c      	movs	r4, r1
 800795c:	001f      	movs	r7, r3
 800795e:	9203      	str	r2, [sp, #12]
 8007960:	2800      	cmp	r0, #0
 8007962:	d004      	beq.n	800796e <_vfiprintf_r+0x1a>
 8007964:	6983      	ldr	r3, [r0, #24]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <_vfiprintf_r+0x1a>
 800796a:	f000 fb3f 	bl	8007fec <__sinit>
 800796e:	4b8e      	ldr	r3, [pc, #568]	; (8007ba8 <_vfiprintf_r+0x254>)
 8007970:	429c      	cmp	r4, r3
 8007972:	d11c      	bne.n	80079ae <_vfiprintf_r+0x5a>
 8007974:	6874      	ldr	r4, [r6, #4]
 8007976:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007978:	07db      	lsls	r3, r3, #31
 800797a:	d405      	bmi.n	8007988 <_vfiprintf_r+0x34>
 800797c:	89a3      	ldrh	r3, [r4, #12]
 800797e:	059b      	lsls	r3, r3, #22
 8007980:	d402      	bmi.n	8007988 <_vfiprintf_r+0x34>
 8007982:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007984:	f000 fbd3 	bl	800812e <__retarget_lock_acquire_recursive>
 8007988:	89a3      	ldrh	r3, [r4, #12]
 800798a:	071b      	lsls	r3, r3, #28
 800798c:	d502      	bpl.n	8007994 <_vfiprintf_r+0x40>
 800798e:	6923      	ldr	r3, [r4, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d11d      	bne.n	80079d0 <_vfiprintf_r+0x7c>
 8007994:	0021      	movs	r1, r4
 8007996:	0030      	movs	r0, r6
 8007998:	f000 f97a 	bl	8007c90 <__swsetup_r>
 800799c:	2800      	cmp	r0, #0
 800799e:	d017      	beq.n	80079d0 <_vfiprintf_r+0x7c>
 80079a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079a2:	07db      	lsls	r3, r3, #31
 80079a4:	d50d      	bpl.n	80079c2 <_vfiprintf_r+0x6e>
 80079a6:	2001      	movs	r0, #1
 80079a8:	4240      	negs	r0, r0
 80079aa:	b021      	add	sp, #132	; 0x84
 80079ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ae:	4b7f      	ldr	r3, [pc, #508]	; (8007bac <_vfiprintf_r+0x258>)
 80079b0:	429c      	cmp	r4, r3
 80079b2:	d101      	bne.n	80079b8 <_vfiprintf_r+0x64>
 80079b4:	68b4      	ldr	r4, [r6, #8]
 80079b6:	e7de      	b.n	8007976 <_vfiprintf_r+0x22>
 80079b8:	4b7d      	ldr	r3, [pc, #500]	; (8007bb0 <_vfiprintf_r+0x25c>)
 80079ba:	429c      	cmp	r4, r3
 80079bc:	d1db      	bne.n	8007976 <_vfiprintf_r+0x22>
 80079be:	68f4      	ldr	r4, [r6, #12]
 80079c0:	e7d9      	b.n	8007976 <_vfiprintf_r+0x22>
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	059b      	lsls	r3, r3, #22
 80079c6:	d4ee      	bmi.n	80079a6 <_vfiprintf_r+0x52>
 80079c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079ca:	f000 fbb1 	bl	8008130 <__retarget_lock_release_recursive>
 80079ce:	e7ea      	b.n	80079a6 <_vfiprintf_r+0x52>
 80079d0:	2300      	movs	r3, #0
 80079d2:	ad08      	add	r5, sp, #32
 80079d4:	616b      	str	r3, [r5, #20]
 80079d6:	3320      	adds	r3, #32
 80079d8:	766b      	strb	r3, [r5, #25]
 80079da:	3310      	adds	r3, #16
 80079dc:	76ab      	strb	r3, [r5, #26]
 80079de:	9707      	str	r7, [sp, #28]
 80079e0:	9f03      	ldr	r7, [sp, #12]
 80079e2:	783b      	ldrb	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <_vfiprintf_r+0x98>
 80079e8:	2b25      	cmp	r3, #37	; 0x25
 80079ea:	d14e      	bne.n	8007a8a <_vfiprintf_r+0x136>
 80079ec:	9b03      	ldr	r3, [sp, #12]
 80079ee:	1afb      	subs	r3, r7, r3
 80079f0:	9305      	str	r3, [sp, #20]
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	429f      	cmp	r7, r3
 80079f6:	d00d      	beq.n	8007a14 <_vfiprintf_r+0xc0>
 80079f8:	9b05      	ldr	r3, [sp, #20]
 80079fa:	0021      	movs	r1, r4
 80079fc:	0030      	movs	r0, r6
 80079fe:	9a03      	ldr	r2, [sp, #12]
 8007a00:	f7ff ff96 	bl	8007930 <__sfputs_r>
 8007a04:	1c43      	adds	r3, r0, #1
 8007a06:	d100      	bne.n	8007a0a <_vfiprintf_r+0xb6>
 8007a08:	e0b5      	b.n	8007b76 <_vfiprintf_r+0x222>
 8007a0a:	696a      	ldr	r2, [r5, #20]
 8007a0c:	9b05      	ldr	r3, [sp, #20]
 8007a0e:	4694      	mov	ip, r2
 8007a10:	4463      	add	r3, ip
 8007a12:	616b      	str	r3, [r5, #20]
 8007a14:	783b      	ldrb	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d100      	bne.n	8007a1c <_vfiprintf_r+0xc8>
 8007a1a:	e0ac      	b.n	8007b76 <_vfiprintf_r+0x222>
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	1c7b      	adds	r3, r7, #1
 8007a20:	9303      	str	r3, [sp, #12]
 8007a22:	2300      	movs	r3, #0
 8007a24:	4252      	negs	r2, r2
 8007a26:	606a      	str	r2, [r5, #4]
 8007a28:	a904      	add	r1, sp, #16
 8007a2a:	3254      	adds	r2, #84	; 0x54
 8007a2c:	1852      	adds	r2, r2, r1
 8007a2e:	602b      	str	r3, [r5, #0]
 8007a30:	60eb      	str	r3, [r5, #12]
 8007a32:	60ab      	str	r3, [r5, #8]
 8007a34:	7013      	strb	r3, [r2, #0]
 8007a36:	65ab      	str	r3, [r5, #88]	; 0x58
 8007a38:	9b03      	ldr	r3, [sp, #12]
 8007a3a:	2205      	movs	r2, #5
 8007a3c:	7819      	ldrb	r1, [r3, #0]
 8007a3e:	485d      	ldr	r0, [pc, #372]	; (8007bb4 <_vfiprintf_r+0x260>)
 8007a40:	f7ff f89c 	bl	8006b7c <memchr>
 8007a44:	9b03      	ldr	r3, [sp, #12]
 8007a46:	1c5f      	adds	r7, r3, #1
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d120      	bne.n	8007a8e <_vfiprintf_r+0x13a>
 8007a4c:	682a      	ldr	r2, [r5, #0]
 8007a4e:	06d3      	lsls	r3, r2, #27
 8007a50:	d504      	bpl.n	8007a5c <_vfiprintf_r+0x108>
 8007a52:	2353      	movs	r3, #83	; 0x53
 8007a54:	a904      	add	r1, sp, #16
 8007a56:	185b      	adds	r3, r3, r1
 8007a58:	2120      	movs	r1, #32
 8007a5a:	7019      	strb	r1, [r3, #0]
 8007a5c:	0713      	lsls	r3, r2, #28
 8007a5e:	d504      	bpl.n	8007a6a <_vfiprintf_r+0x116>
 8007a60:	2353      	movs	r3, #83	; 0x53
 8007a62:	a904      	add	r1, sp, #16
 8007a64:	185b      	adds	r3, r3, r1
 8007a66:	212b      	movs	r1, #43	; 0x2b
 8007a68:	7019      	strb	r1, [r3, #0]
 8007a6a:	9b03      	ldr	r3, [sp, #12]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a70:	d016      	beq.n	8007aa0 <_vfiprintf_r+0x14c>
 8007a72:	2100      	movs	r1, #0
 8007a74:	68eb      	ldr	r3, [r5, #12]
 8007a76:	9f03      	ldr	r7, [sp, #12]
 8007a78:	783a      	ldrb	r2, [r7, #0]
 8007a7a:	1c78      	adds	r0, r7, #1
 8007a7c:	3a30      	subs	r2, #48	; 0x30
 8007a7e:	4684      	mov	ip, r0
 8007a80:	2a09      	cmp	r2, #9
 8007a82:	d94f      	bls.n	8007b24 <_vfiprintf_r+0x1d0>
 8007a84:	2900      	cmp	r1, #0
 8007a86:	d111      	bne.n	8007aac <_vfiprintf_r+0x158>
 8007a88:	e017      	b.n	8007aba <_vfiprintf_r+0x166>
 8007a8a:	3701      	adds	r7, #1
 8007a8c:	e7a9      	b.n	80079e2 <_vfiprintf_r+0x8e>
 8007a8e:	4b49      	ldr	r3, [pc, #292]	; (8007bb4 <_vfiprintf_r+0x260>)
 8007a90:	682a      	ldr	r2, [r5, #0]
 8007a92:	1ac0      	subs	r0, r0, r3
 8007a94:	2301      	movs	r3, #1
 8007a96:	4083      	lsls	r3, r0
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	602b      	str	r3, [r5, #0]
 8007a9c:	9703      	str	r7, [sp, #12]
 8007a9e:	e7cb      	b.n	8007a38 <_vfiprintf_r+0xe4>
 8007aa0:	9b07      	ldr	r3, [sp, #28]
 8007aa2:	1d19      	adds	r1, r3, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	9107      	str	r1, [sp, #28]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	db01      	blt.n	8007ab0 <_vfiprintf_r+0x15c>
 8007aac:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aae:	e004      	b.n	8007aba <_vfiprintf_r+0x166>
 8007ab0:	425b      	negs	r3, r3
 8007ab2:	60eb      	str	r3, [r5, #12]
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	602b      	str	r3, [r5, #0]
 8007aba:	783b      	ldrb	r3, [r7, #0]
 8007abc:	2b2e      	cmp	r3, #46	; 0x2e
 8007abe:	d10a      	bne.n	8007ad6 <_vfiprintf_r+0x182>
 8007ac0:	787b      	ldrb	r3, [r7, #1]
 8007ac2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac4:	d137      	bne.n	8007b36 <_vfiprintf_r+0x1e2>
 8007ac6:	9b07      	ldr	r3, [sp, #28]
 8007ac8:	3702      	adds	r7, #2
 8007aca:	1d1a      	adds	r2, r3, #4
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	9207      	str	r2, [sp, #28]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	db2d      	blt.n	8007b30 <_vfiprintf_r+0x1dc>
 8007ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad6:	2203      	movs	r2, #3
 8007ad8:	7839      	ldrb	r1, [r7, #0]
 8007ada:	4837      	ldr	r0, [pc, #220]	; (8007bb8 <_vfiprintf_r+0x264>)
 8007adc:	f7ff f84e 	bl	8006b7c <memchr>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d007      	beq.n	8007af4 <_vfiprintf_r+0x1a0>
 8007ae4:	4b34      	ldr	r3, [pc, #208]	; (8007bb8 <_vfiprintf_r+0x264>)
 8007ae6:	682a      	ldr	r2, [r5, #0]
 8007ae8:	1ac0      	subs	r0, r0, r3
 8007aea:	2340      	movs	r3, #64	; 0x40
 8007aec:	4083      	lsls	r3, r0
 8007aee:	4313      	orrs	r3, r2
 8007af0:	3701      	adds	r7, #1
 8007af2:	602b      	str	r3, [r5, #0]
 8007af4:	7839      	ldrb	r1, [r7, #0]
 8007af6:	1c7b      	adds	r3, r7, #1
 8007af8:	2206      	movs	r2, #6
 8007afa:	4830      	ldr	r0, [pc, #192]	; (8007bbc <_vfiprintf_r+0x268>)
 8007afc:	9303      	str	r3, [sp, #12]
 8007afe:	7629      	strb	r1, [r5, #24]
 8007b00:	f7ff f83c 	bl	8006b7c <memchr>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d045      	beq.n	8007b94 <_vfiprintf_r+0x240>
 8007b08:	4b2d      	ldr	r3, [pc, #180]	; (8007bc0 <_vfiprintf_r+0x26c>)
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d127      	bne.n	8007b5e <_vfiprintf_r+0x20a>
 8007b0e:	2207      	movs	r2, #7
 8007b10:	9b07      	ldr	r3, [sp, #28]
 8007b12:	3307      	adds	r3, #7
 8007b14:	4393      	bics	r3, r2
 8007b16:	3308      	adds	r3, #8
 8007b18:	9307      	str	r3, [sp, #28]
 8007b1a:	696b      	ldr	r3, [r5, #20]
 8007b1c:	9a04      	ldr	r2, [sp, #16]
 8007b1e:	189b      	adds	r3, r3, r2
 8007b20:	616b      	str	r3, [r5, #20]
 8007b22:	e75d      	b.n	80079e0 <_vfiprintf_r+0x8c>
 8007b24:	210a      	movs	r1, #10
 8007b26:	434b      	muls	r3, r1
 8007b28:	4667      	mov	r7, ip
 8007b2a:	189b      	adds	r3, r3, r2
 8007b2c:	3909      	subs	r1, #9
 8007b2e:	e7a3      	b.n	8007a78 <_vfiprintf_r+0x124>
 8007b30:	2301      	movs	r3, #1
 8007b32:	425b      	negs	r3, r3
 8007b34:	e7ce      	b.n	8007ad4 <_vfiprintf_r+0x180>
 8007b36:	2300      	movs	r3, #0
 8007b38:	001a      	movs	r2, r3
 8007b3a:	3701      	adds	r7, #1
 8007b3c:	606b      	str	r3, [r5, #4]
 8007b3e:	7839      	ldrb	r1, [r7, #0]
 8007b40:	1c78      	adds	r0, r7, #1
 8007b42:	3930      	subs	r1, #48	; 0x30
 8007b44:	4684      	mov	ip, r0
 8007b46:	2909      	cmp	r1, #9
 8007b48:	d903      	bls.n	8007b52 <_vfiprintf_r+0x1fe>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0c3      	beq.n	8007ad6 <_vfiprintf_r+0x182>
 8007b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8007b50:	e7c1      	b.n	8007ad6 <_vfiprintf_r+0x182>
 8007b52:	230a      	movs	r3, #10
 8007b54:	435a      	muls	r2, r3
 8007b56:	4667      	mov	r7, ip
 8007b58:	1852      	adds	r2, r2, r1
 8007b5a:	3b09      	subs	r3, #9
 8007b5c:	e7ef      	b.n	8007b3e <_vfiprintf_r+0x1ea>
 8007b5e:	ab07      	add	r3, sp, #28
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	0022      	movs	r2, r4
 8007b64:	0029      	movs	r1, r5
 8007b66:	0030      	movs	r0, r6
 8007b68:	4b16      	ldr	r3, [pc, #88]	; (8007bc4 <_vfiprintf_r+0x270>)
 8007b6a:	f7fd fd6f 	bl	800564c <_printf_float>
 8007b6e:	9004      	str	r0, [sp, #16]
 8007b70:	9b04      	ldr	r3, [sp, #16]
 8007b72:	3301      	adds	r3, #1
 8007b74:	d1d1      	bne.n	8007b1a <_vfiprintf_r+0x1c6>
 8007b76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b78:	07db      	lsls	r3, r3, #31
 8007b7a:	d405      	bmi.n	8007b88 <_vfiprintf_r+0x234>
 8007b7c:	89a3      	ldrh	r3, [r4, #12]
 8007b7e:	059b      	lsls	r3, r3, #22
 8007b80:	d402      	bmi.n	8007b88 <_vfiprintf_r+0x234>
 8007b82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b84:	f000 fad4 	bl	8008130 <__retarget_lock_release_recursive>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	065b      	lsls	r3, r3, #25
 8007b8c:	d500      	bpl.n	8007b90 <_vfiprintf_r+0x23c>
 8007b8e:	e70a      	b.n	80079a6 <_vfiprintf_r+0x52>
 8007b90:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007b92:	e70a      	b.n	80079aa <_vfiprintf_r+0x56>
 8007b94:	ab07      	add	r3, sp, #28
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	0022      	movs	r2, r4
 8007b9a:	0029      	movs	r1, r5
 8007b9c:	0030      	movs	r0, r6
 8007b9e:	4b09      	ldr	r3, [pc, #36]	; (8007bc4 <_vfiprintf_r+0x270>)
 8007ba0:	f7fe f806 	bl	8005bb0 <_printf_i>
 8007ba4:	e7e3      	b.n	8007b6e <_vfiprintf_r+0x21a>
 8007ba6:	46c0      	nop			; (mov r8, r8)
 8007ba8:	080088e4 	.word	0x080088e4
 8007bac:	08008904 	.word	0x08008904
 8007bb0:	080088c4 	.word	0x080088c4
 8007bb4:	0800876c 	.word	0x0800876c
 8007bb8:	08008772 	.word	0x08008772
 8007bbc:	08008776 	.word	0x08008776
 8007bc0:	0800564d 	.word	0x0800564d
 8007bc4:	08007931 	.word	0x08007931

08007bc8 <__swbuf_r>:
 8007bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bca:	0005      	movs	r5, r0
 8007bcc:	000e      	movs	r6, r1
 8007bce:	0014      	movs	r4, r2
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	d004      	beq.n	8007bde <__swbuf_r+0x16>
 8007bd4:	6983      	ldr	r3, [r0, #24]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <__swbuf_r+0x16>
 8007bda:	f000 fa07 	bl	8007fec <__sinit>
 8007bde:	4b22      	ldr	r3, [pc, #136]	; (8007c68 <__swbuf_r+0xa0>)
 8007be0:	429c      	cmp	r4, r3
 8007be2:	d12e      	bne.n	8007c42 <__swbuf_r+0x7a>
 8007be4:	686c      	ldr	r4, [r5, #4]
 8007be6:	69a3      	ldr	r3, [r4, #24]
 8007be8:	60a3      	str	r3, [r4, #8]
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	071b      	lsls	r3, r3, #28
 8007bee:	d532      	bpl.n	8007c56 <__swbuf_r+0x8e>
 8007bf0:	6923      	ldr	r3, [r4, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d02f      	beq.n	8007c56 <__swbuf_r+0x8e>
 8007bf6:	6823      	ldr	r3, [r4, #0]
 8007bf8:	6922      	ldr	r2, [r4, #16]
 8007bfa:	b2f7      	uxtb	r7, r6
 8007bfc:	1a98      	subs	r0, r3, r2
 8007bfe:	6963      	ldr	r3, [r4, #20]
 8007c00:	b2f6      	uxtb	r6, r6
 8007c02:	4283      	cmp	r3, r0
 8007c04:	dc05      	bgt.n	8007c12 <__swbuf_r+0x4a>
 8007c06:	0021      	movs	r1, r4
 8007c08:	0028      	movs	r0, r5
 8007c0a:	f000 f94d 	bl	8007ea8 <_fflush_r>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d127      	bne.n	8007c62 <__swbuf_r+0x9a>
 8007c12:	68a3      	ldr	r3, [r4, #8]
 8007c14:	3001      	adds	r0, #1
 8007c16:	3b01      	subs	r3, #1
 8007c18:	60a3      	str	r3, [r4, #8]
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	6022      	str	r2, [r4, #0]
 8007c20:	701f      	strb	r7, [r3, #0]
 8007c22:	6963      	ldr	r3, [r4, #20]
 8007c24:	4283      	cmp	r3, r0
 8007c26:	d004      	beq.n	8007c32 <__swbuf_r+0x6a>
 8007c28:	89a3      	ldrh	r3, [r4, #12]
 8007c2a:	07db      	lsls	r3, r3, #31
 8007c2c:	d507      	bpl.n	8007c3e <__swbuf_r+0x76>
 8007c2e:	2e0a      	cmp	r6, #10
 8007c30:	d105      	bne.n	8007c3e <__swbuf_r+0x76>
 8007c32:	0021      	movs	r1, r4
 8007c34:	0028      	movs	r0, r5
 8007c36:	f000 f937 	bl	8007ea8 <_fflush_r>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d111      	bne.n	8007c62 <__swbuf_r+0x9a>
 8007c3e:	0030      	movs	r0, r6
 8007c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c42:	4b0a      	ldr	r3, [pc, #40]	; (8007c6c <__swbuf_r+0xa4>)
 8007c44:	429c      	cmp	r4, r3
 8007c46:	d101      	bne.n	8007c4c <__swbuf_r+0x84>
 8007c48:	68ac      	ldr	r4, [r5, #8]
 8007c4a:	e7cc      	b.n	8007be6 <__swbuf_r+0x1e>
 8007c4c:	4b08      	ldr	r3, [pc, #32]	; (8007c70 <__swbuf_r+0xa8>)
 8007c4e:	429c      	cmp	r4, r3
 8007c50:	d1c9      	bne.n	8007be6 <__swbuf_r+0x1e>
 8007c52:	68ec      	ldr	r4, [r5, #12]
 8007c54:	e7c7      	b.n	8007be6 <__swbuf_r+0x1e>
 8007c56:	0021      	movs	r1, r4
 8007c58:	0028      	movs	r0, r5
 8007c5a:	f000 f819 	bl	8007c90 <__swsetup_r>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d0c9      	beq.n	8007bf6 <__swbuf_r+0x2e>
 8007c62:	2601      	movs	r6, #1
 8007c64:	4276      	negs	r6, r6
 8007c66:	e7ea      	b.n	8007c3e <__swbuf_r+0x76>
 8007c68:	080088e4 	.word	0x080088e4
 8007c6c:	08008904 	.word	0x08008904
 8007c70:	080088c4 	.word	0x080088c4

08007c74 <__ascii_wctomb>:
 8007c74:	0003      	movs	r3, r0
 8007c76:	1e08      	subs	r0, r1, #0
 8007c78:	d005      	beq.n	8007c86 <__ascii_wctomb+0x12>
 8007c7a:	2aff      	cmp	r2, #255	; 0xff
 8007c7c:	d904      	bls.n	8007c88 <__ascii_wctomb+0x14>
 8007c7e:	228a      	movs	r2, #138	; 0x8a
 8007c80:	2001      	movs	r0, #1
 8007c82:	601a      	str	r2, [r3, #0]
 8007c84:	4240      	negs	r0, r0
 8007c86:	4770      	bx	lr
 8007c88:	2001      	movs	r0, #1
 8007c8a:	700a      	strb	r2, [r1, #0]
 8007c8c:	e7fb      	b.n	8007c86 <__ascii_wctomb+0x12>
	...

08007c90 <__swsetup_r>:
 8007c90:	4b37      	ldr	r3, [pc, #220]	; (8007d70 <__swsetup_r+0xe0>)
 8007c92:	b570      	push	{r4, r5, r6, lr}
 8007c94:	681d      	ldr	r5, [r3, #0]
 8007c96:	0006      	movs	r6, r0
 8007c98:	000c      	movs	r4, r1
 8007c9a:	2d00      	cmp	r5, #0
 8007c9c:	d005      	beq.n	8007caa <__swsetup_r+0x1a>
 8007c9e:	69ab      	ldr	r3, [r5, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d102      	bne.n	8007caa <__swsetup_r+0x1a>
 8007ca4:	0028      	movs	r0, r5
 8007ca6:	f000 f9a1 	bl	8007fec <__sinit>
 8007caa:	4b32      	ldr	r3, [pc, #200]	; (8007d74 <__swsetup_r+0xe4>)
 8007cac:	429c      	cmp	r4, r3
 8007cae:	d10f      	bne.n	8007cd0 <__swsetup_r+0x40>
 8007cb0:	686c      	ldr	r4, [r5, #4]
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	5ee2      	ldrsh	r2, [r4, r3]
 8007cb6:	b293      	uxth	r3, r2
 8007cb8:	0711      	lsls	r1, r2, #28
 8007cba:	d42d      	bmi.n	8007d18 <__swsetup_r+0x88>
 8007cbc:	06d9      	lsls	r1, r3, #27
 8007cbe:	d411      	bmi.n	8007ce4 <__swsetup_r+0x54>
 8007cc0:	2309      	movs	r3, #9
 8007cc2:	2001      	movs	r0, #1
 8007cc4:	6033      	str	r3, [r6, #0]
 8007cc6:	3337      	adds	r3, #55	; 0x37
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	81a3      	strh	r3, [r4, #12]
 8007ccc:	4240      	negs	r0, r0
 8007cce:	bd70      	pop	{r4, r5, r6, pc}
 8007cd0:	4b29      	ldr	r3, [pc, #164]	; (8007d78 <__swsetup_r+0xe8>)
 8007cd2:	429c      	cmp	r4, r3
 8007cd4:	d101      	bne.n	8007cda <__swsetup_r+0x4a>
 8007cd6:	68ac      	ldr	r4, [r5, #8]
 8007cd8:	e7eb      	b.n	8007cb2 <__swsetup_r+0x22>
 8007cda:	4b28      	ldr	r3, [pc, #160]	; (8007d7c <__swsetup_r+0xec>)
 8007cdc:	429c      	cmp	r4, r3
 8007cde:	d1e8      	bne.n	8007cb2 <__swsetup_r+0x22>
 8007ce0:	68ec      	ldr	r4, [r5, #12]
 8007ce2:	e7e6      	b.n	8007cb2 <__swsetup_r+0x22>
 8007ce4:	075b      	lsls	r3, r3, #29
 8007ce6:	d513      	bpl.n	8007d10 <__swsetup_r+0x80>
 8007ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cea:	2900      	cmp	r1, #0
 8007cec:	d008      	beq.n	8007d00 <__swsetup_r+0x70>
 8007cee:	0023      	movs	r3, r4
 8007cf0:	3344      	adds	r3, #68	; 0x44
 8007cf2:	4299      	cmp	r1, r3
 8007cf4:	d002      	beq.n	8007cfc <__swsetup_r+0x6c>
 8007cf6:	0030      	movs	r0, r6
 8007cf8:	f7ff fb1c 	bl	8007334 <_free_r>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	6363      	str	r3, [r4, #52]	; 0x34
 8007d00:	2224      	movs	r2, #36	; 0x24
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	4393      	bics	r3, r2
 8007d06:	81a3      	strh	r3, [r4, #12]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	6063      	str	r3, [r4, #4]
 8007d0c:	6923      	ldr	r3, [r4, #16]
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	2308      	movs	r3, #8
 8007d12:	89a2      	ldrh	r2, [r4, #12]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	81a3      	strh	r3, [r4, #12]
 8007d18:	6923      	ldr	r3, [r4, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10b      	bne.n	8007d36 <__swsetup_r+0xa6>
 8007d1e:	21a0      	movs	r1, #160	; 0xa0
 8007d20:	2280      	movs	r2, #128	; 0x80
 8007d22:	89a3      	ldrh	r3, [r4, #12]
 8007d24:	0089      	lsls	r1, r1, #2
 8007d26:	0092      	lsls	r2, r2, #2
 8007d28:	400b      	ands	r3, r1
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d003      	beq.n	8007d36 <__swsetup_r+0xa6>
 8007d2e:	0021      	movs	r1, r4
 8007d30:	0030      	movs	r0, r6
 8007d32:	f000 fa27 	bl	8008184 <__smakebuf_r>
 8007d36:	220c      	movs	r2, #12
 8007d38:	5ea3      	ldrsh	r3, [r4, r2]
 8007d3a:	2001      	movs	r0, #1
 8007d3c:	001a      	movs	r2, r3
 8007d3e:	b299      	uxth	r1, r3
 8007d40:	4002      	ands	r2, r0
 8007d42:	4203      	tst	r3, r0
 8007d44:	d00f      	beq.n	8007d66 <__swsetup_r+0xd6>
 8007d46:	2200      	movs	r2, #0
 8007d48:	60a2      	str	r2, [r4, #8]
 8007d4a:	6962      	ldr	r2, [r4, #20]
 8007d4c:	4252      	negs	r2, r2
 8007d4e:	61a2      	str	r2, [r4, #24]
 8007d50:	2000      	movs	r0, #0
 8007d52:	6922      	ldr	r2, [r4, #16]
 8007d54:	4282      	cmp	r2, r0
 8007d56:	d1ba      	bne.n	8007cce <__swsetup_r+0x3e>
 8007d58:	060a      	lsls	r2, r1, #24
 8007d5a:	d5b8      	bpl.n	8007cce <__swsetup_r+0x3e>
 8007d5c:	2240      	movs	r2, #64	; 0x40
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	81a3      	strh	r3, [r4, #12]
 8007d62:	3801      	subs	r0, #1
 8007d64:	e7b3      	b.n	8007cce <__swsetup_r+0x3e>
 8007d66:	0788      	lsls	r0, r1, #30
 8007d68:	d400      	bmi.n	8007d6c <__swsetup_r+0xdc>
 8007d6a:	6962      	ldr	r2, [r4, #20]
 8007d6c:	60a2      	str	r2, [r4, #8]
 8007d6e:	e7ef      	b.n	8007d50 <__swsetup_r+0xc0>
 8007d70:	2000000c 	.word	0x2000000c
 8007d74:	080088e4 	.word	0x080088e4
 8007d78:	08008904 	.word	0x08008904
 8007d7c:	080088c4 	.word	0x080088c4

08007d80 <abort>:
 8007d80:	2006      	movs	r0, #6
 8007d82:	b510      	push	{r4, lr}
 8007d84:	f000 fa74 	bl	8008270 <raise>
 8007d88:	2001      	movs	r0, #1
 8007d8a:	f7fb f832 	bl	8002df2 <_exit>
	...

08007d90 <__sflush_r>:
 8007d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d92:	898b      	ldrh	r3, [r1, #12]
 8007d94:	0005      	movs	r5, r0
 8007d96:	000c      	movs	r4, r1
 8007d98:	071a      	lsls	r2, r3, #28
 8007d9a:	d45f      	bmi.n	8007e5c <__sflush_r+0xcc>
 8007d9c:	684a      	ldr	r2, [r1, #4]
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	dc04      	bgt.n	8007dac <__sflush_r+0x1c>
 8007da2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007da4:	2a00      	cmp	r2, #0
 8007da6:	dc01      	bgt.n	8007dac <__sflush_r+0x1c>
 8007da8:	2000      	movs	r0, #0
 8007daa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007dac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007dae:	2f00      	cmp	r7, #0
 8007db0:	d0fa      	beq.n	8007da8 <__sflush_r+0x18>
 8007db2:	2200      	movs	r2, #0
 8007db4:	2180      	movs	r1, #128	; 0x80
 8007db6:	682e      	ldr	r6, [r5, #0]
 8007db8:	602a      	str	r2, [r5, #0]
 8007dba:	001a      	movs	r2, r3
 8007dbc:	0149      	lsls	r1, r1, #5
 8007dbe:	400a      	ands	r2, r1
 8007dc0:	420b      	tst	r3, r1
 8007dc2:	d034      	beq.n	8007e2e <__sflush_r+0x9e>
 8007dc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dc6:	89a3      	ldrh	r3, [r4, #12]
 8007dc8:	075b      	lsls	r3, r3, #29
 8007dca:	d506      	bpl.n	8007dda <__sflush_r+0x4a>
 8007dcc:	6863      	ldr	r3, [r4, #4]
 8007dce:	1ac0      	subs	r0, r0, r3
 8007dd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <__sflush_r+0x4a>
 8007dd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dd8:	1ac0      	subs	r0, r0, r3
 8007dda:	0002      	movs	r2, r0
 8007ddc:	6a21      	ldr	r1, [r4, #32]
 8007dde:	2300      	movs	r3, #0
 8007de0:	0028      	movs	r0, r5
 8007de2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007de4:	47b8      	blx	r7
 8007de6:	89a1      	ldrh	r1, [r4, #12]
 8007de8:	1c43      	adds	r3, r0, #1
 8007dea:	d106      	bne.n	8007dfa <__sflush_r+0x6a>
 8007dec:	682b      	ldr	r3, [r5, #0]
 8007dee:	2b1d      	cmp	r3, #29
 8007df0:	d831      	bhi.n	8007e56 <__sflush_r+0xc6>
 8007df2:	4a2c      	ldr	r2, [pc, #176]	; (8007ea4 <__sflush_r+0x114>)
 8007df4:	40da      	lsrs	r2, r3
 8007df6:	07d3      	lsls	r3, r2, #31
 8007df8:	d52d      	bpl.n	8007e56 <__sflush_r+0xc6>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	6063      	str	r3, [r4, #4]
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	04cb      	lsls	r3, r1, #19
 8007e04:	d505      	bpl.n	8007e12 <__sflush_r+0x82>
 8007e06:	1c43      	adds	r3, r0, #1
 8007e08:	d102      	bne.n	8007e10 <__sflush_r+0x80>
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d100      	bne.n	8007e12 <__sflush_r+0x82>
 8007e10:	6560      	str	r0, [r4, #84]	; 0x54
 8007e12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e14:	602e      	str	r6, [r5, #0]
 8007e16:	2900      	cmp	r1, #0
 8007e18:	d0c6      	beq.n	8007da8 <__sflush_r+0x18>
 8007e1a:	0023      	movs	r3, r4
 8007e1c:	3344      	adds	r3, #68	; 0x44
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d002      	beq.n	8007e28 <__sflush_r+0x98>
 8007e22:	0028      	movs	r0, r5
 8007e24:	f7ff fa86 	bl	8007334 <_free_r>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	6360      	str	r0, [r4, #52]	; 0x34
 8007e2c:	e7bd      	b.n	8007daa <__sflush_r+0x1a>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	0028      	movs	r0, r5
 8007e32:	6a21      	ldr	r1, [r4, #32]
 8007e34:	47b8      	blx	r7
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	d1c5      	bne.n	8007dc6 <__sflush_r+0x36>
 8007e3a:	682b      	ldr	r3, [r5, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d0c2      	beq.n	8007dc6 <__sflush_r+0x36>
 8007e40:	2b1d      	cmp	r3, #29
 8007e42:	d001      	beq.n	8007e48 <__sflush_r+0xb8>
 8007e44:	2b16      	cmp	r3, #22
 8007e46:	d101      	bne.n	8007e4c <__sflush_r+0xbc>
 8007e48:	602e      	str	r6, [r5, #0]
 8007e4a:	e7ad      	b.n	8007da8 <__sflush_r+0x18>
 8007e4c:	2340      	movs	r3, #64	; 0x40
 8007e4e:	89a2      	ldrh	r2, [r4, #12]
 8007e50:	4313      	orrs	r3, r2
 8007e52:	81a3      	strh	r3, [r4, #12]
 8007e54:	e7a9      	b.n	8007daa <__sflush_r+0x1a>
 8007e56:	2340      	movs	r3, #64	; 0x40
 8007e58:	430b      	orrs	r3, r1
 8007e5a:	e7fa      	b.n	8007e52 <__sflush_r+0xc2>
 8007e5c:	690f      	ldr	r7, [r1, #16]
 8007e5e:	2f00      	cmp	r7, #0
 8007e60:	d0a2      	beq.n	8007da8 <__sflush_r+0x18>
 8007e62:	680a      	ldr	r2, [r1, #0]
 8007e64:	600f      	str	r7, [r1, #0]
 8007e66:	1bd2      	subs	r2, r2, r7
 8007e68:	9201      	str	r2, [sp, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	079b      	lsls	r3, r3, #30
 8007e6e:	d100      	bne.n	8007e72 <__sflush_r+0xe2>
 8007e70:	694a      	ldr	r2, [r1, #20]
 8007e72:	60a2      	str	r2, [r4, #8]
 8007e74:	9b01      	ldr	r3, [sp, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	dc00      	bgt.n	8007e7c <__sflush_r+0xec>
 8007e7a:	e795      	b.n	8007da8 <__sflush_r+0x18>
 8007e7c:	003a      	movs	r2, r7
 8007e7e:	0028      	movs	r0, r5
 8007e80:	9b01      	ldr	r3, [sp, #4]
 8007e82:	6a21      	ldr	r1, [r4, #32]
 8007e84:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e86:	47b0      	blx	r6
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	dc06      	bgt.n	8007e9a <__sflush_r+0x10a>
 8007e8c:	2340      	movs	r3, #64	; 0x40
 8007e8e:	2001      	movs	r0, #1
 8007e90:	89a2      	ldrh	r2, [r4, #12]
 8007e92:	4240      	negs	r0, r0
 8007e94:	4313      	orrs	r3, r2
 8007e96:	81a3      	strh	r3, [r4, #12]
 8007e98:	e787      	b.n	8007daa <__sflush_r+0x1a>
 8007e9a:	9b01      	ldr	r3, [sp, #4]
 8007e9c:	183f      	adds	r7, r7, r0
 8007e9e:	1a1b      	subs	r3, r3, r0
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	e7e7      	b.n	8007e74 <__sflush_r+0xe4>
 8007ea4:	20400001 	.word	0x20400001

08007ea8 <_fflush_r>:
 8007ea8:	690b      	ldr	r3, [r1, #16]
 8007eaa:	b570      	push	{r4, r5, r6, lr}
 8007eac:	0005      	movs	r5, r0
 8007eae:	000c      	movs	r4, r1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d102      	bne.n	8007eba <_fflush_r+0x12>
 8007eb4:	2500      	movs	r5, #0
 8007eb6:	0028      	movs	r0, r5
 8007eb8:	bd70      	pop	{r4, r5, r6, pc}
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d004      	beq.n	8007ec8 <_fflush_r+0x20>
 8007ebe:	6983      	ldr	r3, [r0, #24]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <_fflush_r+0x20>
 8007ec4:	f000 f892 	bl	8007fec <__sinit>
 8007ec8:	4b14      	ldr	r3, [pc, #80]	; (8007f1c <_fflush_r+0x74>)
 8007eca:	429c      	cmp	r4, r3
 8007ecc:	d11b      	bne.n	8007f06 <_fflush_r+0x5e>
 8007ece:	686c      	ldr	r4, [r5, #4]
 8007ed0:	220c      	movs	r2, #12
 8007ed2:	5ea3      	ldrsh	r3, [r4, r2]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0ed      	beq.n	8007eb4 <_fflush_r+0xc>
 8007ed8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007eda:	07d2      	lsls	r2, r2, #31
 8007edc:	d404      	bmi.n	8007ee8 <_fflush_r+0x40>
 8007ede:	059b      	lsls	r3, r3, #22
 8007ee0:	d402      	bmi.n	8007ee8 <_fflush_r+0x40>
 8007ee2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ee4:	f000 f923 	bl	800812e <__retarget_lock_acquire_recursive>
 8007ee8:	0028      	movs	r0, r5
 8007eea:	0021      	movs	r1, r4
 8007eec:	f7ff ff50 	bl	8007d90 <__sflush_r>
 8007ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ef2:	0005      	movs	r5, r0
 8007ef4:	07db      	lsls	r3, r3, #31
 8007ef6:	d4de      	bmi.n	8007eb6 <_fflush_r+0xe>
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	059b      	lsls	r3, r3, #22
 8007efc:	d4db      	bmi.n	8007eb6 <_fflush_r+0xe>
 8007efe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f00:	f000 f916 	bl	8008130 <__retarget_lock_release_recursive>
 8007f04:	e7d7      	b.n	8007eb6 <_fflush_r+0xe>
 8007f06:	4b06      	ldr	r3, [pc, #24]	; (8007f20 <_fflush_r+0x78>)
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	d101      	bne.n	8007f10 <_fflush_r+0x68>
 8007f0c:	68ac      	ldr	r4, [r5, #8]
 8007f0e:	e7df      	b.n	8007ed0 <_fflush_r+0x28>
 8007f10:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <_fflush_r+0x7c>)
 8007f12:	429c      	cmp	r4, r3
 8007f14:	d1dc      	bne.n	8007ed0 <_fflush_r+0x28>
 8007f16:	68ec      	ldr	r4, [r5, #12]
 8007f18:	e7da      	b.n	8007ed0 <_fflush_r+0x28>
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	080088e4 	.word	0x080088e4
 8007f20:	08008904 	.word	0x08008904
 8007f24:	080088c4 	.word	0x080088c4

08007f28 <std>:
 8007f28:	2300      	movs	r3, #0
 8007f2a:	b510      	push	{r4, lr}
 8007f2c:	0004      	movs	r4, r0
 8007f2e:	6003      	str	r3, [r0, #0]
 8007f30:	6043      	str	r3, [r0, #4]
 8007f32:	6083      	str	r3, [r0, #8]
 8007f34:	8181      	strh	r1, [r0, #12]
 8007f36:	6643      	str	r3, [r0, #100]	; 0x64
 8007f38:	0019      	movs	r1, r3
 8007f3a:	81c2      	strh	r2, [r0, #14]
 8007f3c:	6103      	str	r3, [r0, #16]
 8007f3e:	6143      	str	r3, [r0, #20]
 8007f40:	6183      	str	r3, [r0, #24]
 8007f42:	2208      	movs	r2, #8
 8007f44:	305c      	adds	r0, #92	; 0x5c
 8007f46:	f7fd facf 	bl	80054e8 <memset>
 8007f4a:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <std+0x38>)
 8007f4c:	6224      	str	r4, [r4, #32]
 8007f4e:	6263      	str	r3, [r4, #36]	; 0x24
 8007f50:	4b04      	ldr	r3, [pc, #16]	; (8007f64 <std+0x3c>)
 8007f52:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f54:	4b04      	ldr	r3, [pc, #16]	; (8007f68 <std+0x40>)
 8007f56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f58:	4b04      	ldr	r3, [pc, #16]	; (8007f6c <std+0x44>)
 8007f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8007f5c:	bd10      	pop	{r4, pc}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	080082b1 	.word	0x080082b1
 8007f64:	080082d9 	.word	0x080082d9
 8007f68:	08008311 	.word	0x08008311
 8007f6c:	0800833d 	.word	0x0800833d

08007f70 <_cleanup_r>:
 8007f70:	b510      	push	{r4, lr}
 8007f72:	4902      	ldr	r1, [pc, #8]	; (8007f7c <_cleanup_r+0xc>)
 8007f74:	f000 f8ba 	bl	80080ec <_fwalk_reent>
 8007f78:	bd10      	pop	{r4, pc}
 8007f7a:	46c0      	nop			; (mov r8, r8)
 8007f7c:	08007ea9 	.word	0x08007ea9

08007f80 <__sfmoreglue>:
 8007f80:	b570      	push	{r4, r5, r6, lr}
 8007f82:	2568      	movs	r5, #104	; 0x68
 8007f84:	1e4a      	subs	r2, r1, #1
 8007f86:	4355      	muls	r5, r2
 8007f88:	000e      	movs	r6, r1
 8007f8a:	0029      	movs	r1, r5
 8007f8c:	3174      	adds	r1, #116	; 0x74
 8007f8e:	f7ff fa3d 	bl	800740c <_malloc_r>
 8007f92:	1e04      	subs	r4, r0, #0
 8007f94:	d008      	beq.n	8007fa8 <__sfmoreglue+0x28>
 8007f96:	2100      	movs	r1, #0
 8007f98:	002a      	movs	r2, r5
 8007f9a:	6001      	str	r1, [r0, #0]
 8007f9c:	6046      	str	r6, [r0, #4]
 8007f9e:	300c      	adds	r0, #12
 8007fa0:	60a0      	str	r0, [r4, #8]
 8007fa2:	3268      	adds	r2, #104	; 0x68
 8007fa4:	f7fd faa0 	bl	80054e8 <memset>
 8007fa8:	0020      	movs	r0, r4
 8007faa:	bd70      	pop	{r4, r5, r6, pc}

08007fac <__sfp_lock_acquire>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	4802      	ldr	r0, [pc, #8]	; (8007fb8 <__sfp_lock_acquire+0xc>)
 8007fb0:	f000 f8bd 	bl	800812e <__retarget_lock_acquire_recursive>
 8007fb4:	bd10      	pop	{r4, pc}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	2000033d 	.word	0x2000033d

08007fbc <__sfp_lock_release>:
 8007fbc:	b510      	push	{r4, lr}
 8007fbe:	4802      	ldr	r0, [pc, #8]	; (8007fc8 <__sfp_lock_release+0xc>)
 8007fc0:	f000 f8b6 	bl	8008130 <__retarget_lock_release_recursive>
 8007fc4:	bd10      	pop	{r4, pc}
 8007fc6:	46c0      	nop			; (mov r8, r8)
 8007fc8:	2000033d 	.word	0x2000033d

08007fcc <__sinit_lock_acquire>:
 8007fcc:	b510      	push	{r4, lr}
 8007fce:	4802      	ldr	r0, [pc, #8]	; (8007fd8 <__sinit_lock_acquire+0xc>)
 8007fd0:	f000 f8ad 	bl	800812e <__retarget_lock_acquire_recursive>
 8007fd4:	bd10      	pop	{r4, pc}
 8007fd6:	46c0      	nop			; (mov r8, r8)
 8007fd8:	2000033e 	.word	0x2000033e

08007fdc <__sinit_lock_release>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	4802      	ldr	r0, [pc, #8]	; (8007fe8 <__sinit_lock_release+0xc>)
 8007fe0:	f000 f8a6 	bl	8008130 <__retarget_lock_release_recursive>
 8007fe4:	bd10      	pop	{r4, pc}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	2000033e 	.word	0x2000033e

08007fec <__sinit>:
 8007fec:	b513      	push	{r0, r1, r4, lr}
 8007fee:	0004      	movs	r4, r0
 8007ff0:	f7ff ffec 	bl	8007fcc <__sinit_lock_acquire>
 8007ff4:	69a3      	ldr	r3, [r4, #24]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <__sinit+0x14>
 8007ffa:	f7ff ffef 	bl	8007fdc <__sinit_lock_release>
 8007ffe:	bd13      	pop	{r0, r1, r4, pc}
 8008000:	64a3      	str	r3, [r4, #72]	; 0x48
 8008002:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008004:	6523      	str	r3, [r4, #80]	; 0x50
 8008006:	4b13      	ldr	r3, [pc, #76]	; (8008054 <__sinit+0x68>)
 8008008:	4a13      	ldr	r2, [pc, #76]	; (8008058 <__sinit+0x6c>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	62a2      	str	r2, [r4, #40]	; 0x28
 800800e:	9301      	str	r3, [sp, #4]
 8008010:	42a3      	cmp	r3, r4
 8008012:	d101      	bne.n	8008018 <__sinit+0x2c>
 8008014:	2301      	movs	r3, #1
 8008016:	61a3      	str	r3, [r4, #24]
 8008018:	0020      	movs	r0, r4
 800801a:	f000 f81f 	bl	800805c <__sfp>
 800801e:	6060      	str	r0, [r4, #4]
 8008020:	0020      	movs	r0, r4
 8008022:	f000 f81b 	bl	800805c <__sfp>
 8008026:	60a0      	str	r0, [r4, #8]
 8008028:	0020      	movs	r0, r4
 800802a:	f000 f817 	bl	800805c <__sfp>
 800802e:	2200      	movs	r2, #0
 8008030:	2104      	movs	r1, #4
 8008032:	60e0      	str	r0, [r4, #12]
 8008034:	6860      	ldr	r0, [r4, #4]
 8008036:	f7ff ff77 	bl	8007f28 <std>
 800803a:	2201      	movs	r2, #1
 800803c:	2109      	movs	r1, #9
 800803e:	68a0      	ldr	r0, [r4, #8]
 8008040:	f7ff ff72 	bl	8007f28 <std>
 8008044:	2202      	movs	r2, #2
 8008046:	2112      	movs	r1, #18
 8008048:	68e0      	ldr	r0, [r4, #12]
 800804a:	f7ff ff6d 	bl	8007f28 <std>
 800804e:	2301      	movs	r3, #1
 8008050:	61a3      	str	r3, [r4, #24]
 8008052:	e7d2      	b.n	8007ffa <__sinit+0xe>
 8008054:	0800854c 	.word	0x0800854c
 8008058:	08007f71 	.word	0x08007f71

0800805c <__sfp>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	0007      	movs	r7, r0
 8008060:	f7ff ffa4 	bl	8007fac <__sfp_lock_acquire>
 8008064:	4b1f      	ldr	r3, [pc, #124]	; (80080e4 <__sfp+0x88>)
 8008066:	681e      	ldr	r6, [r3, #0]
 8008068:	69b3      	ldr	r3, [r6, #24]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d102      	bne.n	8008074 <__sfp+0x18>
 800806e:	0030      	movs	r0, r6
 8008070:	f7ff ffbc 	bl	8007fec <__sinit>
 8008074:	3648      	adds	r6, #72	; 0x48
 8008076:	68b4      	ldr	r4, [r6, #8]
 8008078:	6873      	ldr	r3, [r6, #4]
 800807a:	3b01      	subs	r3, #1
 800807c:	d504      	bpl.n	8008088 <__sfp+0x2c>
 800807e:	6833      	ldr	r3, [r6, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d022      	beq.n	80080ca <__sfp+0x6e>
 8008084:	6836      	ldr	r6, [r6, #0]
 8008086:	e7f6      	b.n	8008076 <__sfp+0x1a>
 8008088:	220c      	movs	r2, #12
 800808a:	5ea5      	ldrsh	r5, [r4, r2]
 800808c:	2d00      	cmp	r5, #0
 800808e:	d11a      	bne.n	80080c6 <__sfp+0x6a>
 8008090:	0020      	movs	r0, r4
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <__sfp+0x8c>)
 8008094:	3058      	adds	r0, #88	; 0x58
 8008096:	60e3      	str	r3, [r4, #12]
 8008098:	6665      	str	r5, [r4, #100]	; 0x64
 800809a:	f000 f847 	bl	800812c <__retarget_lock_init_recursive>
 800809e:	f7ff ff8d 	bl	8007fbc <__sfp_lock_release>
 80080a2:	0020      	movs	r0, r4
 80080a4:	2208      	movs	r2, #8
 80080a6:	0029      	movs	r1, r5
 80080a8:	6025      	str	r5, [r4, #0]
 80080aa:	60a5      	str	r5, [r4, #8]
 80080ac:	6065      	str	r5, [r4, #4]
 80080ae:	6125      	str	r5, [r4, #16]
 80080b0:	6165      	str	r5, [r4, #20]
 80080b2:	61a5      	str	r5, [r4, #24]
 80080b4:	305c      	adds	r0, #92	; 0x5c
 80080b6:	f7fd fa17 	bl	80054e8 <memset>
 80080ba:	6365      	str	r5, [r4, #52]	; 0x34
 80080bc:	63a5      	str	r5, [r4, #56]	; 0x38
 80080be:	64a5      	str	r5, [r4, #72]	; 0x48
 80080c0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80080c2:	0020      	movs	r0, r4
 80080c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080c6:	3468      	adds	r4, #104	; 0x68
 80080c8:	e7d7      	b.n	800807a <__sfp+0x1e>
 80080ca:	2104      	movs	r1, #4
 80080cc:	0038      	movs	r0, r7
 80080ce:	f7ff ff57 	bl	8007f80 <__sfmoreglue>
 80080d2:	1e04      	subs	r4, r0, #0
 80080d4:	6030      	str	r0, [r6, #0]
 80080d6:	d1d5      	bne.n	8008084 <__sfp+0x28>
 80080d8:	f7ff ff70 	bl	8007fbc <__sfp_lock_release>
 80080dc:	230c      	movs	r3, #12
 80080de:	603b      	str	r3, [r7, #0]
 80080e0:	e7ef      	b.n	80080c2 <__sfp+0x66>
 80080e2:	46c0      	nop			; (mov r8, r8)
 80080e4:	0800854c 	.word	0x0800854c
 80080e8:	ffff0001 	.word	0xffff0001

080080ec <_fwalk_reent>:
 80080ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080ee:	0004      	movs	r4, r0
 80080f0:	0006      	movs	r6, r0
 80080f2:	2700      	movs	r7, #0
 80080f4:	9101      	str	r1, [sp, #4]
 80080f6:	3448      	adds	r4, #72	; 0x48
 80080f8:	6863      	ldr	r3, [r4, #4]
 80080fa:	68a5      	ldr	r5, [r4, #8]
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	9b00      	ldr	r3, [sp, #0]
 8008100:	3b01      	subs	r3, #1
 8008102:	9300      	str	r3, [sp, #0]
 8008104:	d504      	bpl.n	8008110 <_fwalk_reent+0x24>
 8008106:	6824      	ldr	r4, [r4, #0]
 8008108:	2c00      	cmp	r4, #0
 800810a:	d1f5      	bne.n	80080f8 <_fwalk_reent+0xc>
 800810c:	0038      	movs	r0, r7
 800810e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008110:	89ab      	ldrh	r3, [r5, #12]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d908      	bls.n	8008128 <_fwalk_reent+0x3c>
 8008116:	220e      	movs	r2, #14
 8008118:	5eab      	ldrsh	r3, [r5, r2]
 800811a:	3301      	adds	r3, #1
 800811c:	d004      	beq.n	8008128 <_fwalk_reent+0x3c>
 800811e:	0029      	movs	r1, r5
 8008120:	0030      	movs	r0, r6
 8008122:	9b01      	ldr	r3, [sp, #4]
 8008124:	4798      	blx	r3
 8008126:	4307      	orrs	r7, r0
 8008128:	3568      	adds	r5, #104	; 0x68
 800812a:	e7e8      	b.n	80080fe <_fwalk_reent+0x12>

0800812c <__retarget_lock_init_recursive>:
 800812c:	4770      	bx	lr

0800812e <__retarget_lock_acquire_recursive>:
 800812e:	4770      	bx	lr

08008130 <__retarget_lock_release_recursive>:
 8008130:	4770      	bx	lr
	...

08008134 <__swhatbuf_r>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	000e      	movs	r6, r1
 8008138:	001d      	movs	r5, r3
 800813a:	230e      	movs	r3, #14
 800813c:	5ec9      	ldrsh	r1, [r1, r3]
 800813e:	0014      	movs	r4, r2
 8008140:	b096      	sub	sp, #88	; 0x58
 8008142:	2900      	cmp	r1, #0
 8008144:	da08      	bge.n	8008158 <__swhatbuf_r+0x24>
 8008146:	220c      	movs	r2, #12
 8008148:	5eb3      	ldrsh	r3, [r6, r2]
 800814a:	2200      	movs	r2, #0
 800814c:	602a      	str	r2, [r5, #0]
 800814e:	061b      	lsls	r3, r3, #24
 8008150:	d411      	bmi.n	8008176 <__swhatbuf_r+0x42>
 8008152:	2380      	movs	r3, #128	; 0x80
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	e00f      	b.n	8008178 <__swhatbuf_r+0x44>
 8008158:	466a      	mov	r2, sp
 800815a:	f000 f91b 	bl	8008394 <_fstat_r>
 800815e:	2800      	cmp	r0, #0
 8008160:	dbf1      	blt.n	8008146 <__swhatbuf_r+0x12>
 8008162:	23f0      	movs	r3, #240	; 0xf0
 8008164:	9901      	ldr	r1, [sp, #4]
 8008166:	021b      	lsls	r3, r3, #8
 8008168:	4019      	ands	r1, r3
 800816a:	4b05      	ldr	r3, [pc, #20]	; (8008180 <__swhatbuf_r+0x4c>)
 800816c:	18c9      	adds	r1, r1, r3
 800816e:	424b      	negs	r3, r1
 8008170:	4159      	adcs	r1, r3
 8008172:	6029      	str	r1, [r5, #0]
 8008174:	e7ed      	b.n	8008152 <__swhatbuf_r+0x1e>
 8008176:	2340      	movs	r3, #64	; 0x40
 8008178:	2000      	movs	r0, #0
 800817a:	6023      	str	r3, [r4, #0]
 800817c:	b016      	add	sp, #88	; 0x58
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	ffffe000 	.word	0xffffe000

08008184 <__smakebuf_r>:
 8008184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008186:	2602      	movs	r6, #2
 8008188:	898b      	ldrh	r3, [r1, #12]
 800818a:	0005      	movs	r5, r0
 800818c:	000c      	movs	r4, r1
 800818e:	4233      	tst	r3, r6
 8008190:	d006      	beq.n	80081a0 <__smakebuf_r+0x1c>
 8008192:	0023      	movs	r3, r4
 8008194:	3347      	adds	r3, #71	; 0x47
 8008196:	6023      	str	r3, [r4, #0]
 8008198:	6123      	str	r3, [r4, #16]
 800819a:	2301      	movs	r3, #1
 800819c:	6163      	str	r3, [r4, #20]
 800819e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80081a0:	466a      	mov	r2, sp
 80081a2:	ab01      	add	r3, sp, #4
 80081a4:	f7ff ffc6 	bl	8008134 <__swhatbuf_r>
 80081a8:	9900      	ldr	r1, [sp, #0]
 80081aa:	0007      	movs	r7, r0
 80081ac:	0028      	movs	r0, r5
 80081ae:	f7ff f92d 	bl	800740c <_malloc_r>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d108      	bne.n	80081c8 <__smakebuf_r+0x44>
 80081b6:	220c      	movs	r2, #12
 80081b8:	5ea3      	ldrsh	r3, [r4, r2]
 80081ba:	059a      	lsls	r2, r3, #22
 80081bc:	d4ef      	bmi.n	800819e <__smakebuf_r+0x1a>
 80081be:	2203      	movs	r2, #3
 80081c0:	4393      	bics	r3, r2
 80081c2:	431e      	orrs	r6, r3
 80081c4:	81a6      	strh	r6, [r4, #12]
 80081c6:	e7e4      	b.n	8008192 <__smakebuf_r+0xe>
 80081c8:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <__smakebuf_r+0x84>)
 80081ca:	62ab      	str	r3, [r5, #40]	; 0x28
 80081cc:	2380      	movs	r3, #128	; 0x80
 80081ce:	89a2      	ldrh	r2, [r4, #12]
 80081d0:	6020      	str	r0, [r4, #0]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	81a3      	strh	r3, [r4, #12]
 80081d6:	9b00      	ldr	r3, [sp, #0]
 80081d8:	6120      	str	r0, [r4, #16]
 80081da:	6163      	str	r3, [r4, #20]
 80081dc:	9b01      	ldr	r3, [sp, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00d      	beq.n	80081fe <__smakebuf_r+0x7a>
 80081e2:	0028      	movs	r0, r5
 80081e4:	230e      	movs	r3, #14
 80081e6:	5ee1      	ldrsh	r1, [r4, r3]
 80081e8:	f000 f8e6 	bl	80083b8 <_isatty_r>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d006      	beq.n	80081fe <__smakebuf_r+0x7a>
 80081f0:	2203      	movs	r2, #3
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	4393      	bics	r3, r2
 80081f6:	001a      	movs	r2, r3
 80081f8:	2301      	movs	r3, #1
 80081fa:	4313      	orrs	r3, r2
 80081fc:	81a3      	strh	r3, [r4, #12]
 80081fe:	89a0      	ldrh	r0, [r4, #12]
 8008200:	4307      	orrs	r7, r0
 8008202:	81a7      	strh	r7, [r4, #12]
 8008204:	e7cb      	b.n	800819e <__smakebuf_r+0x1a>
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	08007f71 	.word	0x08007f71

0800820c <_malloc_usable_size_r>:
 800820c:	1f0b      	subs	r3, r1, #4
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	1f18      	subs	r0, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	da01      	bge.n	800821a <_malloc_usable_size_r+0xe>
 8008216:	580b      	ldr	r3, [r1, r0]
 8008218:	18c0      	adds	r0, r0, r3
 800821a:	4770      	bx	lr

0800821c <_raise_r>:
 800821c:	b570      	push	{r4, r5, r6, lr}
 800821e:	0004      	movs	r4, r0
 8008220:	000d      	movs	r5, r1
 8008222:	291f      	cmp	r1, #31
 8008224:	d904      	bls.n	8008230 <_raise_r+0x14>
 8008226:	2316      	movs	r3, #22
 8008228:	6003      	str	r3, [r0, #0]
 800822a:	2001      	movs	r0, #1
 800822c:	4240      	negs	r0, r0
 800822e:	bd70      	pop	{r4, r5, r6, pc}
 8008230:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008232:	2b00      	cmp	r3, #0
 8008234:	d004      	beq.n	8008240 <_raise_r+0x24>
 8008236:	008a      	lsls	r2, r1, #2
 8008238:	189b      	adds	r3, r3, r2
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	2a00      	cmp	r2, #0
 800823e:	d108      	bne.n	8008252 <_raise_r+0x36>
 8008240:	0020      	movs	r0, r4
 8008242:	f000 f831 	bl	80082a8 <_getpid_r>
 8008246:	002a      	movs	r2, r5
 8008248:	0001      	movs	r1, r0
 800824a:	0020      	movs	r0, r4
 800824c:	f000 f81a 	bl	8008284 <_kill_r>
 8008250:	e7ed      	b.n	800822e <_raise_r+0x12>
 8008252:	2000      	movs	r0, #0
 8008254:	2a01      	cmp	r2, #1
 8008256:	d0ea      	beq.n	800822e <_raise_r+0x12>
 8008258:	1c51      	adds	r1, r2, #1
 800825a:	d103      	bne.n	8008264 <_raise_r+0x48>
 800825c:	2316      	movs	r3, #22
 800825e:	3001      	adds	r0, #1
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	e7e4      	b.n	800822e <_raise_r+0x12>
 8008264:	2400      	movs	r4, #0
 8008266:	0028      	movs	r0, r5
 8008268:	601c      	str	r4, [r3, #0]
 800826a:	4790      	blx	r2
 800826c:	0020      	movs	r0, r4
 800826e:	e7de      	b.n	800822e <_raise_r+0x12>

08008270 <raise>:
 8008270:	b510      	push	{r4, lr}
 8008272:	4b03      	ldr	r3, [pc, #12]	; (8008280 <raise+0x10>)
 8008274:	0001      	movs	r1, r0
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	f7ff ffd0 	bl	800821c <_raise_r>
 800827c:	bd10      	pop	{r4, pc}
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	2000000c 	.word	0x2000000c

08008284 <_kill_r>:
 8008284:	2300      	movs	r3, #0
 8008286:	b570      	push	{r4, r5, r6, lr}
 8008288:	4d06      	ldr	r5, [pc, #24]	; (80082a4 <_kill_r+0x20>)
 800828a:	0004      	movs	r4, r0
 800828c:	0008      	movs	r0, r1
 800828e:	0011      	movs	r1, r2
 8008290:	602b      	str	r3, [r5, #0]
 8008292:	f7fa fd9e 	bl	8002dd2 <_kill>
 8008296:	1c43      	adds	r3, r0, #1
 8008298:	d103      	bne.n	80082a2 <_kill_r+0x1e>
 800829a:	682b      	ldr	r3, [r5, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d000      	beq.n	80082a2 <_kill_r+0x1e>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	20000338 	.word	0x20000338

080082a8 <_getpid_r>:
 80082a8:	b510      	push	{r4, lr}
 80082aa:	f7fa fd8c 	bl	8002dc6 <_getpid>
 80082ae:	bd10      	pop	{r4, pc}

080082b0 <__sread>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	000c      	movs	r4, r1
 80082b4:	250e      	movs	r5, #14
 80082b6:	5f49      	ldrsh	r1, [r1, r5]
 80082b8:	f000 f8a4 	bl	8008404 <_read_r>
 80082bc:	2800      	cmp	r0, #0
 80082be:	db03      	blt.n	80082c8 <__sread+0x18>
 80082c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80082c2:	181b      	adds	r3, r3, r0
 80082c4:	6563      	str	r3, [r4, #84]	; 0x54
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	4a02      	ldr	r2, [pc, #8]	; (80082d4 <__sread+0x24>)
 80082cc:	4013      	ands	r3, r2
 80082ce:	81a3      	strh	r3, [r4, #12]
 80082d0:	e7f9      	b.n	80082c6 <__sread+0x16>
 80082d2:	46c0      	nop			; (mov r8, r8)
 80082d4:	ffffefff 	.word	0xffffefff

080082d8 <__swrite>:
 80082d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082da:	001f      	movs	r7, r3
 80082dc:	898b      	ldrh	r3, [r1, #12]
 80082de:	0005      	movs	r5, r0
 80082e0:	000c      	movs	r4, r1
 80082e2:	0016      	movs	r6, r2
 80082e4:	05db      	lsls	r3, r3, #23
 80082e6:	d505      	bpl.n	80082f4 <__swrite+0x1c>
 80082e8:	230e      	movs	r3, #14
 80082ea:	5ec9      	ldrsh	r1, [r1, r3]
 80082ec:	2200      	movs	r2, #0
 80082ee:	2302      	movs	r3, #2
 80082f0:	f000 f874 	bl	80083dc <_lseek_r>
 80082f4:	89a3      	ldrh	r3, [r4, #12]
 80082f6:	4a05      	ldr	r2, [pc, #20]	; (800830c <__swrite+0x34>)
 80082f8:	0028      	movs	r0, r5
 80082fa:	4013      	ands	r3, r2
 80082fc:	81a3      	strh	r3, [r4, #12]
 80082fe:	0032      	movs	r2, r6
 8008300:	230e      	movs	r3, #14
 8008302:	5ee1      	ldrsh	r1, [r4, r3]
 8008304:	003b      	movs	r3, r7
 8008306:	f000 f81f 	bl	8008348 <_write_r>
 800830a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800830c:	ffffefff 	.word	0xffffefff

08008310 <__sseek>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	000c      	movs	r4, r1
 8008314:	250e      	movs	r5, #14
 8008316:	5f49      	ldrsh	r1, [r1, r5]
 8008318:	f000 f860 	bl	80083dc <_lseek_r>
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	1c42      	adds	r2, r0, #1
 8008320:	d103      	bne.n	800832a <__sseek+0x1a>
 8008322:	4a05      	ldr	r2, [pc, #20]	; (8008338 <__sseek+0x28>)
 8008324:	4013      	ands	r3, r2
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	bd70      	pop	{r4, r5, r6, pc}
 800832a:	2280      	movs	r2, #128	; 0x80
 800832c:	0152      	lsls	r2, r2, #5
 800832e:	4313      	orrs	r3, r2
 8008330:	81a3      	strh	r3, [r4, #12]
 8008332:	6560      	str	r0, [r4, #84]	; 0x54
 8008334:	e7f8      	b.n	8008328 <__sseek+0x18>
 8008336:	46c0      	nop			; (mov r8, r8)
 8008338:	ffffefff 	.word	0xffffefff

0800833c <__sclose>:
 800833c:	b510      	push	{r4, lr}
 800833e:	230e      	movs	r3, #14
 8008340:	5ec9      	ldrsh	r1, [r1, r3]
 8008342:	f000 f815 	bl	8008370 <_close_r>
 8008346:	bd10      	pop	{r4, pc}

08008348 <_write_r>:
 8008348:	b570      	push	{r4, r5, r6, lr}
 800834a:	0004      	movs	r4, r0
 800834c:	0008      	movs	r0, r1
 800834e:	0011      	movs	r1, r2
 8008350:	001a      	movs	r2, r3
 8008352:	2300      	movs	r3, #0
 8008354:	4d05      	ldr	r5, [pc, #20]	; (800836c <_write_r+0x24>)
 8008356:	602b      	str	r3, [r5, #0]
 8008358:	f7fa fd74 	bl	8002e44 <_write>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d103      	bne.n	8008368 <_write_r+0x20>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d000      	beq.n	8008368 <_write_r+0x20>
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	bd70      	pop	{r4, r5, r6, pc}
 800836a:	46c0      	nop			; (mov r8, r8)
 800836c:	20000338 	.word	0x20000338

08008370 <_close_r>:
 8008370:	2300      	movs	r3, #0
 8008372:	b570      	push	{r4, r5, r6, lr}
 8008374:	4d06      	ldr	r5, [pc, #24]	; (8008390 <_close_r+0x20>)
 8008376:	0004      	movs	r4, r0
 8008378:	0008      	movs	r0, r1
 800837a:	602b      	str	r3, [r5, #0]
 800837c:	f7fa fd7e 	bl	8002e7c <_close>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d103      	bne.n	800838c <_close_r+0x1c>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d000      	beq.n	800838c <_close_r+0x1c>
 800838a:	6023      	str	r3, [r4, #0]
 800838c:	bd70      	pop	{r4, r5, r6, pc}
 800838e:	46c0      	nop			; (mov r8, r8)
 8008390:	20000338 	.word	0x20000338

08008394 <_fstat_r>:
 8008394:	2300      	movs	r3, #0
 8008396:	b570      	push	{r4, r5, r6, lr}
 8008398:	4d06      	ldr	r5, [pc, #24]	; (80083b4 <_fstat_r+0x20>)
 800839a:	0004      	movs	r4, r0
 800839c:	0008      	movs	r0, r1
 800839e:	0011      	movs	r1, r2
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	f7fa fd75 	bl	8002e90 <_fstat>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d103      	bne.n	80083b2 <_fstat_r+0x1e>
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d000      	beq.n	80083b2 <_fstat_r+0x1e>
 80083b0:	6023      	str	r3, [r4, #0]
 80083b2:	bd70      	pop	{r4, r5, r6, pc}
 80083b4:	20000338 	.word	0x20000338

080083b8 <_isatty_r>:
 80083b8:	2300      	movs	r3, #0
 80083ba:	b570      	push	{r4, r5, r6, lr}
 80083bc:	4d06      	ldr	r5, [pc, #24]	; (80083d8 <_isatty_r+0x20>)
 80083be:	0004      	movs	r4, r0
 80083c0:	0008      	movs	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7fa fd72 	bl	8002eac <_isatty>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d103      	bne.n	80083d4 <_isatty_r+0x1c>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d000      	beq.n	80083d4 <_isatty_r+0x1c>
 80083d2:	6023      	str	r3, [r4, #0]
 80083d4:	bd70      	pop	{r4, r5, r6, pc}
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	20000338 	.word	0x20000338

080083dc <_lseek_r>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	0004      	movs	r4, r0
 80083e0:	0008      	movs	r0, r1
 80083e2:	0011      	movs	r1, r2
 80083e4:	001a      	movs	r2, r3
 80083e6:	2300      	movs	r3, #0
 80083e8:	4d05      	ldr	r5, [pc, #20]	; (8008400 <_lseek_r+0x24>)
 80083ea:	602b      	str	r3, [r5, #0]
 80083ec:	f7fa fd67 	bl	8002ebe <_lseek>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d103      	bne.n	80083fc <_lseek_r+0x20>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d000      	beq.n	80083fc <_lseek_r+0x20>
 80083fa:	6023      	str	r3, [r4, #0]
 80083fc:	bd70      	pop	{r4, r5, r6, pc}
 80083fe:	46c0      	nop			; (mov r8, r8)
 8008400:	20000338 	.word	0x20000338

08008404 <_read_r>:
 8008404:	b570      	push	{r4, r5, r6, lr}
 8008406:	0004      	movs	r4, r0
 8008408:	0008      	movs	r0, r1
 800840a:	0011      	movs	r1, r2
 800840c:	001a      	movs	r2, r3
 800840e:	2300      	movs	r3, #0
 8008410:	4d05      	ldr	r5, [pc, #20]	; (8008428 <_read_r+0x24>)
 8008412:	602b      	str	r3, [r5, #0]
 8008414:	f7fa fcf9 	bl	8002e0a <_read>
 8008418:	1c43      	adds	r3, r0, #1
 800841a:	d103      	bne.n	8008424 <_read_r+0x20>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d000      	beq.n	8008424 <_read_r+0x20>
 8008422:	6023      	str	r3, [r4, #0]
 8008424:	bd70      	pop	{r4, r5, r6, pc}
 8008426:	46c0      	nop			; (mov r8, r8)
 8008428:	20000338 	.word	0x20000338

0800842c <_init>:
 800842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008432:	bc08      	pop	{r3}
 8008434:	469e      	mov	lr, r3
 8008436:	4770      	bx	lr

08008438 <_fini>:
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843e:	bc08      	pop	{r3}
 8008440:	469e      	mov	lr, r3
 8008442:	4770      	bx	lr
